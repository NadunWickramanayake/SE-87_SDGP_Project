%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2002.i039.010.P.m004.c33.chatbot messenger AI isometric set-11.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 3/27/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 11 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2002.i039.010.P.m004.c33.chatbot messenger AI isometric set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-03-27T07:30:33+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-03-27T07:30:33+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-03-27T07:30:33+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8z1Tz9rmlebRZXqK&#xA;YJ7r6pbNFG/pqJZQluLkfG8ZfkAsyllav2EALZmnRmUOOB5DcH7aPl3McepxgmGQddpDp7xyr5e9&#xA;6NDdRSRci68lUNIFIPHbfMOQpkBazT9SsdRtlubKZZoWpRlqCKgMAymhU0INCMhGQkLDbmwzxy4Z&#xA;iiick1OxV2KuxV2KuxV2KpdqerNZywxpA0okNZphQRwxqRzeRiRQAYk0248XFe4/SfILdO8w6fqV&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:867ace14-6b1f-b346-ac1f-0fe310b69e32</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:867ace14-6b1f-b346-ac1f-0fe310b69e32</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:fb9a4a3b-55ef-410b-86d2-1ef2587a46cc</stRef:instanceID>
            <stRef:documentID>xmp.did:2dbddf57-5c96-1847-b9e6-50a422aaccff</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3a20f972-edde-0b45-bb2e-054a8dc7c649</stEvt:instanceID>
                  <stEvt:when>2018-10-13T13:53:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:43832778-9d0f-074b-a9ab-a300dea7487c</stEvt:instanceID>
                  <stEvt:when>2020-02-18T18:49:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2dbddf57-5c96-1847-b9e6-50a422aaccff</stEvt:instanceID>
                  <stEvt:when>2021-03-26T09:14:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:867ace14-6b1f-b346-ac1f-0fe310b69e32</stEvt:instanceID>
                  <stEvt:when>2021-03-27T07:30:33+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
258.162 392.32 mo
182.006 348.39 li
234.787 318.964 li
235.293 319.87 li
184.11 348.406 li
258.681 391.422 li
258.162 392.32 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.0196078 .831373 .960784 rgb
f
149.086 348.366 mo
148.826 348.216 li
95.3407 317.336 li
95.8596 316.438 li
149.084 347.167 li
222.508 304.487 li
223.03 305.385 li
149.086 348.366 li
cp
f
136.068 367.888 mo
135.549 366.99 li
226.69 314.37 li
227.208 315.268 li
136.068 367.888 li
cp
f
182.618 399.667 mo
182.097 398.769 li
213.14 380.731 li
183.391 363.556 li
245.603 327.466 li
246.124 328.364 li
185.463 363.554 li
215.211 380.729 li
182.618 399.667 li
cp
f
80.9296 345.818 mo
80.4166 344.916 li
124.736 319.718 li
153.029 336.206 li
167.4 327.696 212.849 300.823 213.983 300.662 cv
214.056 301.176 li
214.189 301.677 li
212.554 302.248 169.679 327.552 153.296 337.255 cv
153.033 337.41 li
124.73 320.917 li
80.9296 345.818 li
cp
f
139.061 365.64 mo
137.294 364.598 134.414 364.571 132.628 365.581 cv
130.842 366.59 130.827 368.252 132.594 369.295 cv
134.361 370.337 137.241 370.363 139.027 369.354 cv
140.813 368.345 140.828 366.682 139.061 365.64 cv
cp
f
218.207 391.794 mo
217.688 390.896 li
308.828 338.276 li
309.347 339.175 li
218.207 391.794 li
cp
f
221.2 389.546 mo
219.434 388.504 216.553 388.477 214.767 389.487 cv
212.981 390.496 212.966 392.159 214.733 393.201 cv
216.5 394.243 219.38 394.27 221.166 393.26 cv
222.952 392.251 222.967 390.588 221.2 389.546 cv
cp
f
260.821 390.045 mo
259.054 389.003 256.174 388.976 254.388 389.985 cv
252.602 390.995 252.587 392.657 254.354 393.7 cv
256.121 394.741 259.001 394.768 260.787 393.759 cv
262.573 392.75 262.588 391.087 260.821 390.045 cv
cp
f
98.8339 314.942 mo
97.0671 313.899 94.1866 313.873 92.4008 314.882 cv
90.6149 315.891 90.5997 317.554 92.3665 318.596 cv
94.1335 319.638 97.0137 319.665 98.7996 318.656 cv
100.585 317.647 100.601 315.984 98.8339 314.942 cv
cp
f
149.699 323.541 mo
149.438 323.39 li
95.9537 292.511 li
96.4728 291.612 li
149.697 322.341 li
223.121 279.661 li
223.643 280.559 li
149.699 323.541 li
cp
f
99.4469 290.116 mo
97.6798 289.074 94.7998 289.047 93.0139 290.056 cv
91.228 291.066 91.2124 292.729 92.9796 293.771 cv
94.7463 294.813 97.6268 294.839 99.4126 293.83 cv
101.198 292.821 101.214 291.158 99.4469 290.116 cv
cp
f
85.2098 342.864 mo
83.4426 341.821 80.5626 341.795 78.7767 342.804 cv
76.9908 343.813 76.9752 345.476 78.7424 346.518 cv
80.5092 347.56 83.3896 347.587 85.1755 346.578 cv
86.9613 345.568 86.9766 343.906 85.2098 342.864 cv
cp
f
185.591 397.391 mo
183.824 396.349 180.944 396.322 179.158 397.331 cv
177.372 398.34 177.357 400.003 179.124 401.045 cv
180.891 402.088 183.771 402.114 185.557 401.105 cv
187.343 400.096 187.358 398.433 185.591 397.391 cv
cp
f
340.685 111.689 mo
349.711 116.9 357.054 112.658 357.083 102.221 cv
357.113 91.7847 349.819 79.0988 340.792 73.8871 cv
331.766 68.6759 324.424 72.9119 324.394 83.3483 cv
324.364 93.7852 331.659 106.478 340.685 111.689 cv
cp
372.526 118.73 mo
365.533 114.692 li
364.982 116.542 364.225 118.163 363.282 119.552 cv
368.009 127.786 li
357.911 133.585 li
353.119 125.235 li
351.401 125.317 349.567 125.108 347.643 124.594 cv
347.6 132.191 li
333.387 123.941 li
333.427 116.043 li
331.545 114.276 329.76 112.315 328.104 110.216 cv
323.341 112.92 li
313.361 95.4689 li
318.401 92.6063 li
317.56 90.1918 316.896 87.7549 316.435 85.3512 cv
309.485 81.2936 li
309.605 64.9008 li
316.983 69.2052 li
317.559 67.5239 318.321 66.0496 319.237 64.7838 cv
314.174 55.899 li
324.324 50.194 li
329.62 59.4817 li
331.182 59.4585 332.838 59.6691 334.572 60.1283 cv
334.656 51.66 li
348.873 60.0022 li
348.788 68.6592 li
350.51 70.2795 352.153 72.0538 353.692 73.9569 cv
358.893 71.0677 li
368.817 88.5511 li
363.599 91.4503 li
364.424 93.7109 365.088 95.989 365.579 98.2512 cv
372.573 102.289 li
372.526 118.73 li
cp
f
292.773 105.405 mo
297.387 108.069 301.142 105.902 301.157 100.568 cv
301.172 95.2291 297.442 88.741 292.828 86.0768 cv
288.21 83.4105 284.455 85.5778 284.44 90.9163 cv
284.425 96.2504 288.155 102.738 292.773 105.405 cv
cp
313.757 113.336 mo
309.091 110.643 li
308.725 111.875 308.219 112.962 307.591 113.886 cv
310.745 119.383 li
304.003 123.252 li
300.805 117.676 li
299.661 117.734 298.437 117.596 297.15 117.247 cv
297.123 122.323 li
287.636 116.818 li
287.663 111.545 li
286.407 110.362 285.218 109.057 284.109 107.656 cv
280.93 109.459 li
274.272 97.8113 li
277.635 95.8993 li
277.073 94.2877 276.631 92.667 276.321 91.0582 cv
271.683 88.3529 li
271.766 77.4082 li
276.686 80.2811 li
277.072 79.1614 277.581 78.1774 278.194 77.3348 cv
274.813 71.4012 li
281.587 67.5913 li
285.123 73.793 li
286.163 73.775 287.271 73.9203 288.427 74.2255 cv
288.483 68.5714 li
297.969 74.1356 li
297.913 79.9177 li
299.067 81.0007 300.16 82.1863 301.189 83.454 cv
304.66 81.5261 li
311.286 93.1968 li
307.8 95.1287 li
308.349 96.6377 308.796 98.1599 309.122 99.6681 cv
313.788 102.362 li
313.757 113.336 li
cp
f
336.898 146.254 mo
334.123 144.652 li
333.905 145.385 333.604 146.031 333.23 146.581 cv
335.107 149.851 li
331.096 152.152 li
329.194 148.835 li
328.513 148.87 327.785 148.788 327.02 148.58 cv
327.004 151.599 li
321.361 148.325 li
321.377 145.189 li
320.63 144.485 319.922 143.709 319.263 142.875 cv
317.372 143.948 li
313.411 137.02 li
315.412 135.882 li
315.078 134.923 314.815 133.96 314.63 133.003 cv
311.871 131.393 li
311.921 124.883 li
314.847 126.592 li
315.077 125.926 315.38 125.341 315.745 124.84 cv
313.734 121.31 li
317.763 119.044 li
319.866 122.733 li
320.485 122.722 321.144 122.808 321.831 122.99 cv
321.865 119.627 li
327.507 122.937 li
327.474 126.376 li
328.16 127.02 328.81 127.725 329.422 128.479 cv
331.487 127.333 li
335.428 134.274 li
333.354 135.424 li
333.682 136.322 333.947 137.227 334.141 138.124 cv
336.917 139.727 li
336.898 146.254 li
cp
f
259.604 151.678 mo
259.596 148.892 258.144 145.793 256.359 144.756 cv
255.552 144.286 li
254.832 143.868 254.169 143.85 253.634 144.158 cv
251.734 145.27 249.912 147.138 248.528 149.466 cv
247.171 151.749 246.234 154.474 246.316 157.536 cv
246.353 158.141 246.698 158.684 247.375 159.077 cv
248.182 159.546 li
248.163 159.222 248.159 158.893 248.17 158.559 cv
248.17 158.559 li
248.159 158.892 248.163 159.222 248.182 159.546 cv
249.967 160.583 253.377 160.187 255.799 158.661 cv
255.638 156.136 257.406 152.938 259.604 151.678 cv
cp
.921569 .921569 .945098 rgb
f
251.063 204.035 mo
250.938 203.953 250.764 203.855 250.645 203.765 cv
250.438 203.607 250.16 203.398 249.982 203.209 cv
249.431 202.62 249.316 202.478 248.89 201.716 cv
248.76 201.485 248.511 200.898 248.397 200.466 cv
248.254 199.921 248.188 199.672 248.111 198.755 cv
248.148 199.37 248.494 199.918 249.17 200.311 cv
249.281 202.13 249.984 203.407 251.063 204.035 cv
cp
.717647 .713726 .890196 rgb
f
gsave
251.063 204.035 mo
250.938 203.953 250.764 203.855 250.645 203.765 cv
250.438 203.607 250.16 203.398 249.982 203.209 cv
249.431 202.62 249.316 202.478 248.89 201.716 cv
248.76 201.485 248.511 200.898 248.397 200.466 cv
248.254 199.921 248.188 199.672 248.111 198.755 cv
248.148 199.37 248.494 199.918 249.17 200.311 cv
249.281 202.13 249.984 203.407 251.063 204.035 cv
cp
clp
251.063 204.035 mo
249.23 202.853 248.319 201.225 248.111 198.755 cv
248.148 199.37 248.494 199.918 249.17 200.311 cv
249.281 202.13 249.984 203.407 251.063 204.035 cv
cp
f
grestore
251.871 204.504 mo
251.063 204.035 li
249.984 203.407 249.281 202.13 249.17 200.311 cv
249.978 200.781 li
250.088 202.599 250.792 203.877 251.871 204.504 cv
cp
f
gsave
251.871 204.504 mo
251.063 204.035 li
249.984 203.407 249.281 202.13 249.17 200.311 cv
249.978 200.781 li
250.088 202.599 250.792 203.877 251.871 204.504 cv
cp
clp
251.871 204.504 mo
251.063 204.035 li
249.984 203.407 249.281 202.13 249.17 200.311 cv
249.978 200.781 li
250.088 202.599 250.792 203.877 251.871 204.504 cv
cp
f
grestore
264.1 194.878 mo
263.534 201.929 256.791 207.236 251.871 204.504 cv
250.792 203.877 250.088 202.599 249.978 200.781 cv
251.762 201.817 255.171 201.381 257.59 199.806 cv
257.667 201.069 258.605 201.537 259.744 200.881 cv
260.887 200.219 261.818 198.672 261.885 197.419 cv
263.291 196.681 264.055 195.74 264.1 194.878 cv
cp
.568627 .615686 .839216 rgb
f
261.885 197.419 mo
263.445 154.155 li
264.863 153.44 265.627 152.516 265.658 151.665 cv
265.58 153.826 li
265.502 155.987 li
265.424 158.148 li
265.346 160.309 li
265.268 162.469 li
265.191 164.629 li
265.112 166.789 li
265.035 168.948 li
264.957 171.108 li
264.879 173.267 li
264.801 175.426 li
264.724 177.585 li
264.645 179.744 li
264.568 181.903 li
264.49 184.062 li
264.412 186.22 li
264.334 188.378 li
264.256 190.537 li
264.179 192.696 li
264.101 194.854 li
264.069 195.723 263.304 196.674 261.885 197.419 cv
cp
f
247.375 159.077 mo
249.17 200.311 li
248.483 199.911 248.136 199.351 248.109 198.724 cv
248.02 196.664 li
247.93 194.605 li
247.84 192.545 li
247.751 190.485 li
247.661 188.425 li
247.571 186.364 li
247.481 184.304 li
247.392 182.243 li
247.302 180.182 li
247.212 178.121 li
247.122 176.06 li
247.033 173.999 li
246.943 171.937 li
246.853 169.876 li
246.763 167.814 li
246.674 165.752 li
246.584 163.691 li
246.494 161.629 li
246.404 159.568 li
246.314 157.506 li
246.341 158.123 246.687 158.677 247.375 159.077 cv
cp
.854902 .85098 .909804 rgb
f
255.621 144.247 mo
255.477 144.245 li
254.786 143.867 254.15 143.86 253.633 144.159 cv
253.829 144.054 254.09 143.914 254.286 143.809 cv
254.548 143.691 254.897 143.531 255.164 143.425 cv
255.813 143.204 li
256.104 143.128 256.492 143.029 256.786 142.971 cv
257.421 142.885 li
257.733 142.868 258.151 142.854 258.463 142.859 cv
259.07 142.915 li
259.387 142.974 259.809 143.064 260.12 143.148 cv
260.679 143.351 li
260.898 143.456 261.192 143.594 261.404 143.712 cv
259.928 142.854 257.888 142.959 255.621 144.247 cv
cp
f
249.978 200.781 mo
249.17 200.311 li
247.375 159.077 li
248.182 159.546 li
249.978 200.781 li
cp
f
256.359 144.756 mo
255.477 144.245 li
257.744 142.957 259.928 142.854 261.404 143.712 cv
262.212 144.181 li
260.735 143.323 258.695 143.429 256.428 144.716 cv
256.359 144.756 li
cp
.768627 .764706 .92549 rgb
f
259.604 151.678 mo
261.807 150.397 263.587 151.548 263.445 154.155 cv
262.922 168.639 262.404 183.029 261.885 197.419 cv
261.818 198.672 260.887 200.219 259.744 200.881 cv
258.605 201.537 257.667 201.069 257.59 199.806 cv
256.996 186.151 256.397 172.406 255.799 158.661 cv
255.638 156.136 257.406 152.938 259.604 151.678 cv
cp
.717647 .713726 .890196 rgb
f
255.799 158.661 mo
257.59 199.806 li
255.171 201.381 251.762 201.817 249.978 200.781 cv
248.182 159.546 li
249.967 160.583 253.377 160.187 255.799 158.661 cv
cp
.854902 .85098 .909804 rgb
f
246.316 157.536 mo
246.31 157.311 246.293 157.011 246.296 156.786 cv
246.3 156.507 246.308 156.135 246.338 155.857 cv
246.387 155.403 246.475 154.801 246.554 154.351 cv
246.598 154.095 246.688 153.76 246.751 153.507 cv
246.88 152.988 247.282 151.593 248.219 149.879 cv
248.955 148.534 249.893 147.342 250.473 146.729 cv
251.007 146.164 252.002 145.113 253.634 144.158 cv
254.169 143.85 254.832 143.868 255.552 144.286 cv
250.803 147.028 247.056 153.807 247.375 159.077 cv
246.698 158.684 246.353 158.141 246.316 157.536 cv
cp
.921569 .921569 .945098 rgb
f
255.799 158.661 mo
253.377 160.187 249.967 160.583 248.182 159.546 cv
247.864 154.276 251.611 147.497 256.359 144.756 cv
258.144 145.793 259.596 148.892 259.604 151.678 cv
257.406 152.938 255.638 156.136 255.799 158.661 cv
cp
f
265.655 150.433 mo
265.639 150.121 265.596 149.705 265.542 149.396 cv
265.337 148.237 265.096 147.653 264.846 147.109 cv
264.709 146.81 264.491 146.427 264.305 146.156 cv
264.099 145.857 263.784 145.487 263.542 145.217 cv
263.322 144.973 262.97 144.706 262.712 144.505 cv
262.571 144.395 262.362 144.278 262.212 144.181 cv
260.72 143.314 258.654 143.431 256.359 144.756 cv
258.144 145.793 259.596 148.892 259.604 151.678 cv
261.807 150.397 263.587 151.548 263.445 154.155 cv
264.85 153.447 265.614 152.533 265.657 151.688 cv
265.668 151.312 265.673 150.809 265.655 150.433 cv
cp
.768627 .764706 .92549 rgb
f
259.604 151.678 mo
259.599 149.553 258.751 147.244 257.557 145.809 cv
257.552 145.922 li
257.495 146.595 257.072 147.472 256.726 148.088 cv
256.564 148.359 256.402 148.629 256.24 148.899 cv
255.742 149.73 255.244 150.561 254.746 151.392 cv
254.132 152.415 253.518 153.438 252.905 154.462 cv
252.404 155.297 251.903 156.132 251.403 156.967 cv
251.266 157.194 251.137 157.429 250.993 157.651 cv
250.583 158.279 249.597 158.579 248.886 158.53 cv
248.249 158.487 247.605 158.187 247.18 157.707 cv
246.998 157.502 246.971 157.145 246.92 156.882 cv
246.85 156.519 246.82 156.148 246.817 155.777 cv
246.813 155.184 246.88 154.59 246.993 154.008 cv
247.116 153.368 247.296 152.739 247.515 152.126 cv
247.746 151.478 248.023 150.846 248.338 150.234 cv
248.659 149.612 249.021 149.011 249.421 148.437 cv
249.815 147.874 250.247 147.336 250.72 146.837 cv
251.171 146.361 251.66 145.92 252.191 145.536 cv
252.688 145.177 253.222 144.866 253.791 144.637 cv
254.329 144.422 254.898 144.28 255.477 144.245 cv
254.786 143.868 254.15 143.86 253.634 144.158 cv
253.398 144.296 253.092 144.497 252.861 144.644 cv
252.246 145.091 li
252.046 145.247 251.79 145.467 251.594 145.629 cv
251.032 146.151 li
250.859 146.32 250.64 146.556 250.473 146.729 cv
249.965 147.311 li
249.816 147.492 249.626 147.741 249.481 147.926 cv
249.031 148.555 li
248.901 148.748 248.737 149.011 248.611 149.206 cv
248.221 149.876 li
248.109 150.08 247.969 150.358 247.861 150.565 cv
247.535 151.266 li
247.441 151.484 247.327 151.778 247.237 151.998 cv
246.981 152.725 li
246.906 152.958 246.819 153.273 246.751 153.507 cv
246.574 154.255 li
246.522 154.507 246.468 154.847 246.424 155.101 cv
246.338 155.857 li
246.317 156.135 246.306 156.507 246.296 156.786 cv
246.302 157.011 246.31 157.311 246.316 157.536 cv
246.353 158.141 246.698 158.684 247.375 159.077 cv
248.182 159.546 li
249.967 160.583 253.377 160.187 255.799 158.661 cv
255.638 156.136 257.406 152.938 259.604 151.678 cv
cp
.854902 .85098 .909804 rgb
f
173.869 238.564 mo
173.721 238.537 li
173.638 238.531 li
173.49 238.546 li
173.422 238.558 li
173.221 238.64 li
173.461 238.508 li
173.554 238.458 173.647 238.409 173.743 238.36 cv
173.844 238.308 173.943 238.257 174.03 238.211 cv
174.765 237.88 li
175.011 237.779 175.345 237.66 175.593 237.566 cv
176.395 237.312 li
176.649 237.239 176.991 237.157 177.247 237.091 cv
177.529 237.032 li
177.679 236.999 177.83 236.968 177.983 236.938 cv
178.094 236.915 li
178.126 236.91 li
180.229 236.517 182.57 236.456 184.929 236.884 cv
185.128 236.916 li
185.39 236.963 185.736 237.042 185.996 237.096 cv
186.824 237.313 li
187.082 237.388 187.421 237.503 187.676 237.585 cv
188.451 237.882 li
189.041 238.131 189.077 238.151 189.991 238.644 cv
189.991 238.644 li
197.291 242.886 li
204.591 247.128 li
211.891 251.37 li
219.191 255.613 li
226.491 259.855 li
233.791 264.097 li
241.091 268.34 li
248.391 272.582 li
255.691 276.824 li
262.991 281.067 li
270.291 285.309 li
277.591 289.551 li
284.891 293.793 li
292.191 298.036 li
299.491 302.278 li
306.791 306.52 li
314.091 310.762 li
321.391 315.005 li
328.691 319.247 li
335.991 323.489 li
335.828 323.416 li
189.869 238.593 li
189.615 238.493 189.326 238.512 189.018 238.69 cv
184.962 236.329 178.261 236.329 174.179 238.69 cv
173.957 238.59 li
173.869 238.564 li
cp
.894118 .890196 .933333 rgb
f
189.991 238.644 mo
189.709 238.48 189.376 238.484 189.018 238.69 cv
184.962 236.329 178.261 236.329 174.179 238.69 cv
173.826 238.485 173.498 238.48 173.221 238.64 cv
174.96 237.646 176.562 237.257 177.247 237.091 cv
177.853 236.944 179.491 236.602 181.613 236.602 cv
183.74 236.602 185.387 236.948 185.996 237.096 cv
186.262 237.161 186.618 237.245 186.878 237.328 cv
187.354 237.481 187.984 237.701 188.451 237.882 cv
188.71 237.983 189.043 238.144 189.292 238.267 cv
189.506 238.372 189.782 238.531 189.991 238.644 cv
cp
f
112.274 274.43 mo
174.179 238.69 li
174.008 238.605 li
170.913 240.392 li
167.817 242.179 li
164.722 243.967 li
161.627 245.754 li
158.532 247.54 li
155.437 249.327 li
152.341 251.114 li
149.246 252.901 li
146.151 254.689 li
143.056 256.476 li
139.961 258.263 li
136.865 260.05 li
133.77 261.836 li
130.675 263.624 li
127.58 265.411 li
124.484 267.198 li
121.389 268.985 li
118.294 270.772 li
115.199 272.559 li
112.104 274.346 li
112.274 274.43 li
cp
f
112.104 274.346 mo
115.199 272.559 li
118.294 270.772 li
121.389 268.985 li
124.484 267.198 li
127.58 265.411 li
130.675 263.624 li
133.77 261.836 li
136.865 260.05 li
139.961 258.263 li
143.056 256.476 li
146.151 254.689 li
149.246 252.901 li
152.341 251.114 li
155.437 249.327 li
158.532 247.54 li
161.627 245.754 li
164.722 243.967 li
167.817 242.179 li
170.913 240.392 li
174.008 238.605 li
173.72 238.488 173.453 238.506 173.221 238.64 cv
167.031 242.214 li
160.84 245.788 li
154.65 249.362 li
148.459 252.936 li
142.269 256.51 li
136.079 260.084 li
129.888 263.658 li
123.698 267.232 li
117.508 270.806 li
114.412 272.593 li
111.317 274.38 li
111.548 274.246 111.816 274.228 112.104 274.346 cv
cp
f
106.648 282.899 mo
106.668 283.531 106.671 283.612 106.72 283.994 cv
106.797 284.586 106.926 285.054 106.931 285.073 cv
107.088 285.641 107.335 286.402 107.853 287.255 cv
108.404 288.162 108.993 288.752 109.16 288.911 cv
109.453 289.191 109.86 289.548 110.183 289.793 cv
110.495 290.03 110.94 290.307 111.274 290.513 cv
110.767 290.218 110.428 289.381 110.424 288.207 cv
107.912 286.746 106.654 284.824 106.648 282.899 cv
cp
.568627 .615686 .839216 rgb
f
gsave
106.648 282.899 mo
106.668 283.531 106.671 283.612 106.72 283.994 cv
106.797 284.586 106.926 285.054 106.931 285.073 cv
107.088 285.641 107.335 286.402 107.853 287.255 cv
108.404 288.162 108.993 288.752 109.16 288.911 cv
109.453 289.191 109.86 289.548 110.183 289.793 cv
110.495 290.03 110.94 290.307 111.274 290.513 cv
110.767 290.218 110.428 289.381 110.424 288.207 cv
107.912 286.746 106.654 284.824 106.648 282.899 cv
cp
clp
106.648 282.899 mo
106.782 287.204 109.191 289.229 111.274 290.513 cv
110.767 290.218 110.428 289.381 110.424 288.207 cv
107.912 286.746 106.654 284.824 106.648 282.899 cv
cp
f
grestore
106.646 282.073 mo
106.648 282.899 li
106.654 284.824 107.912 286.746 110.424 288.207 cv
110.422 287.38 li
107.909 285.92 106.651 283.998 106.646 282.073 cv
cp
.717647 .713726 .890196 rgb
f
335.991 323.489 mo
287.323 295.207 238.659 266.926 189.991 238.644 cv
189.709 238.48 189.376 238.484 189.018 238.69 cv
335.017 323.536 li
335.375 323.329 335.709 323.325 335.991 323.489 cv
cp
.764706 .796078 .890196 rgb
f
gsave
335.991 323.489 mo
287.323 295.207 238.659 266.926 189.991 238.644 cv
189.709 238.48 189.376 238.484 189.018 238.69 cv
335.017 323.536 li
335.375 323.329 335.709 323.325 335.991 323.489 cv
cp
clp
189.018 238.69 mo
335.017 323.536 li
335.309 323.368 335.584 323.334 335.828 323.416 cv
189.829 238.57 li
189.584 238.488 189.309 238.522 189.018 238.69 cv
cp
.894118 .890196 .933333 rgb
f
grestore
335.947 339.623 mo
337.099 338.91 340.602 336.743 340.618 331.93 cv
340.624 333.88 339.344 335.833 336.782 337.312 cv
336.786 338.491 336.452 339.331 335.947 339.623 cv
cp
.568627 .615686 .839216 rgb
f
336.78 336.485 mo
336.782 337.312 li
339.344 335.833 340.624 333.88 340.618 331.93 cv
340.616 331.103 li
340.622 333.053 339.342 335.006 336.78 336.485 cv
cp
.717647 .713726 .890196 rgb
f
340.616 331.103 mo
340.512 327.76 339.042 325.341 335.991 323.489 cv
335.709 323.325 335.375 323.329 335.017 323.536 cv
339.08 325.893 339.058 329.774 334.969 332.131 cv
335.964 332.709 336.775 334.659 336.78 336.485 cv
339.342 335.006 340.622 333.053 340.616 331.103 cv
cp
.894118 .890196 .933333 rgb
f
335.828 323.416 mo
341.57 326.723 342.019 332.877 336.719 335.61 cv
336.758 335.9 336.779 336.194 336.78 336.485 cv
339.342 335.006 340.622 333.053 340.616 331.103 cv
340.612 330.954 340.605 330.755 340.6 330.605 cv
340.545 329.97 340.541 329.932 340.471 329.543 cv
340.367 329.058 li
340.317 328.88 340.253 328.642 340.197 328.466 cv
340.026 327.989 li
339.947 327.806 339.843 327.561 339.758 327.381 cv
339.506 326.908 li
339.384 326.71 339.22 326.446 339.089 326.253 cv
338.734 325.785 li
338.527 325.547 338.245 325.237 338.025 325.012 cv
337.521 324.557 li
336.862 324.042 336.724 323.934 335.991 323.489 cv
335.828 323.416 li
cp
.717647 .713726 .890196 rgb
f
111.274 290.513 mo
125.874 298.998 li
140.474 307.482 li
155.074 315.967 li
169.673 324.451 li
184.274 332.936 li
198.873 341.42 li
213.474 349.905 li
228.073 358.39 li
242.673 366.874 li
257.273 375.359 li
256.766 375.064 256.427 374.226 256.424 373.052 cv
110.424 288.207 li
110.428 289.381 110.766 290.218 111.274 290.513 cv
cp
.568627 .615686 .839216 rgb
f
gsave
111.274 290.513 mo
125.874 298.998 li
140.474 307.482 li
155.074 315.967 li
169.673 324.451 li
184.274 332.936 li
198.873 341.42 li
213.474 349.905 li
228.073 358.39 li
242.673 366.874 li
257.273 375.359 li
256.766 375.064 256.427 374.226 256.424 373.052 cv
110.424 288.207 li
110.428 289.381 110.766 290.218 111.274 290.513 cv
cp
clp
256.424 373.052 mo
110.424 288.207 li
110.428 289.381 110.766 290.218 111.274 290.513 cv
125.874 298.998 li
140.474 307.482 li
155.074 315.967 li
169.673 324.451 li
184.274 332.936 li
198.873 341.42 li
213.474 349.905 li
228.073 358.39 li
242.673 366.874 li
257.273 375.359 li
256.766 375.064 256.427 374.226 256.424 373.052 cv
cp
f
grestore
274.043 375.363 mo
280.234 371.789 li
286.424 368.214 li
292.615 364.64 li
298.805 361.067 li
304.995 357.492 li
311.186 353.918 li
317.376 350.344 li
323.567 346.77 li
329.757 343.196 li
335.948 339.622 li
336.452 339.331 336.786 338.491 336.782 337.312 cv
274.878 373.052 li
274.882 374.232 274.548 375.071 274.043 375.363 cv
cp
f
gsave
274.043 375.363 mo
280.234 371.789 li
286.424 368.214 li
292.615 364.64 li
298.805 361.067 li
304.995 357.492 li
311.186 353.918 li
317.376 350.344 li
323.567 346.77 li
329.757 343.196 li
335.948 339.622 li
336.452 339.331 336.786 338.491 336.782 337.312 cv
274.878 373.052 li
274.882 374.232 274.548 375.071 274.043 375.363 cv
cp
clp
336.782 337.312 mo
274.878 373.052 li
274.882 374.232 274.548 375.071 274.043 375.363 cv
280.234 371.789 li
286.424 368.214 li
292.615 364.64 li
298.805 361.067 li
304.995 357.492 li
311.186 353.918 li
317.376 350.344 li
323.567 346.77 li
329.757 343.196 li
335.948 339.622 li
336.452 339.331 336.786 338.491 336.782 337.312 cv
cp
f
grestore
110.422 287.38 mo
110.424 288.207 li
256.424 373.052 li
256.422 372.225 li
110.422 287.38 li
cp
.717647 .713726 .890196 rgb
f
274.876 372.225 mo
274.878 373.052 li
336.782 337.312 li
336.78 336.485 li
274.876 372.225 li
cp
f
258.284 367.871 mo
112.284 283.026 li
112.14 283.109 112.001 283.22 111.867 283.355 cv
257.866 368.201 li
258 368.066 258.14 367.954 258.284 367.871 cv
cp
.894118 .890196 .933333 rgb
f
334.969 332.131 mo
273.065 367.871 li
273.204 367.953 273.339 368.06 273.469 368.19 cv
335.374 332.449 li
335.244 332.319 335.108 332.212 334.969 332.131 cv
cp
f
335.374 332.449 mo
273.469 368.19 li
273.797 368.519 274.092 368.991 274.325 369.543 cv
336.23 333.803 li
335.996 333.251 335.702 332.778 335.374 332.449 cv
cp
f
336.23 333.803 mo
274.325 369.543 li
274.557 370.089 274.729 370.713 274.815 371.35 cv
336.719 335.61 li
336.633 334.972 336.461 334.349 336.23 333.803 cv
cp
f
336.719 335.61 mo
274.815 371.35 li
274.854 371.641 274.875 371.935 274.876 372.225 cv
336.78 336.485 li
336.779 336.194 336.758 335.901 336.719 335.61 cv
cp
.717647 .713726 .890196 rgb
f
257.273 375.358 mo
257.483 375.472 257.759 375.63 257.972 375.736 cv
258.221 375.859 258.555 376.02 258.814 376.12 cv
259.28 376.301 259.91 376.521 260.387 376.674 cv
260.647 376.757 261.003 376.841 261.268 376.906 cv
261.877 377.055 263.524 377.4 265.651 377.4 cv
267.773 377.401 269.412 377.059 270.018 376.911 cv
270.275 376.849 270.618 376.77 270.869 376.69 cv
271.348 376.538 271.982 376.322 272.451 376.141 cv
272.479 376.131 273.163 375.866 274.043 375.362 cv
274.548 375.071 274.882 374.232 274.878 373.052 cv
269.787 375.991 261.482 375.991 256.424 373.052 cv
256.427 374.226 256.766 375.064 257.273 375.358 cv
cp
.568627 .615686 .839216 rgb
f
gsave
257.273 375.358 mo
257.483 375.472 257.759 375.63 257.972 375.736 cv
258.221 375.859 258.555 376.02 258.814 376.12 cv
259.28 376.301 259.91 376.521 260.387 376.674 cv
260.647 376.757 261.003 376.841 261.268 376.906 cv
261.877 377.055 263.524 377.4 265.651 377.4 cv
267.773 377.401 269.412 377.059 270.018 376.911 cv
270.275 376.849 270.618 376.77 270.869 376.69 cv
271.348 376.538 271.982 376.322 272.451 376.141 cv
272.479 376.131 273.163 375.866 274.043 375.362 cv
274.548 375.071 274.882 374.232 274.878 373.052 cv
269.787 375.991 261.482 375.991 256.424 373.052 cv
256.427 374.226 256.766 375.064 257.273 375.358 cv
cp
clp
257.273 375.358 mo
263.203 378.557 270.123 377.603 274.043 375.362 cv
274.548 375.071 274.882 374.232 274.878 373.052 cv
269.787 375.991 261.482 375.991 256.424 373.052 cv
256.427 374.226 256.766 375.064 257.273 375.358 cv
cp
f
grestore
256.422 372.225 mo
256.424 373.052 li
261.482 375.991 269.787 375.991 274.878 373.052 cv
274.876 372.225 li
269.784 375.165 261.48 375.165 256.422 372.225 cv
cp
.717647 .713726 .890196 rgb
f
256.481 371.349 mo
256.681 369.813 257.384 368.357 258.225 367.871 cv
262.281 370.233 268.982 370.233 273.065 367.871 cv
273.901 368.358 274.606 369.814 274.813 371.351 cv
269.735 374.245 261.524 374.244 256.481 371.349 cv
cp
.894118 .890196 .933333 rgb
f
274.813 371.351 mo
274.852 371.642 274.875 371.935 274.876 372.225 cv
269.784 375.165 261.48 375.165 256.422 372.225 cv
256.421 371.934 256.443 371.641 256.481 371.349 cv
261.524 374.244 269.735 374.245 274.813 371.351 cv
cp
.717647 .713726 .890196 rgb
f
273.065 367.871 mo
268.982 370.233 262.281 370.233 258.225 367.871 cv
257.384 368.357 256.681 369.813 256.481 371.349 cv
256.422 371.318 li
256.416 369.492 257.224 367.542 258.225 366.964 cv
262.281 369.325 268.982 369.325 273.065 366.965 cv
274.059 367.543 274.87 369.492 274.876 371.318 cv
274.813 371.351 li
274.606 369.814 273.901 368.358 273.065 367.871 cv
cp
.894118 .890196 .933333 rgb
f
112.226 283.026 mo
108.163 280.669 108.185 276.787 112.274 274.43 cv
132.909 262.517 153.544 250.603 174.179 238.69 cv
178.261 236.329 184.962 236.329 189.018 238.69 cv
189.664 239.066 190.31 239.441 190.956 239.816 cv
114.165 284.153 li
113.519 283.777 112.872 283.401 112.226 283.026 cv
cp
f
190.956 239.816 mo
238.977 267.723 286.997 295.629 335.017 323.536 cv
339.08 325.893 339.058 329.774 334.969 332.131 cv
314.334 344.045 293.7 355.958 273.065 367.871 cv
268.982 370.233 262.281 370.233 258.225 367.871 cv
210.205 339.965 162.185 312.059 114.165 284.153 cv
190.956 239.816 li
cp
level3{
gsave
clp
[155.018 114.491 -114.491 155.018 98.8351 210.931 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.294118 .666667 .890196 ]
/C1 [.0941176 .337255 .866667 ]
/N 1.36649 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[155.018 114.491 -114.491 155.018 98.8351 210.931 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~91hfK8kM]J8kM]J8kM]I8P)KF8P)KF84Z9B84Z9B84Q0?7n6'>7Rfj:7Rfj977BX677BU46psF26UO4.
6UO1,6:+"*5s[e&5s[b$5X7S"5<h@s5<_7p5!D.n4Ztqk4?P_g4?GVd4$,Ja3]];^3B9)[3&ilW3&`cT
2`EWQ2E!EM2)R6J1c.$F1G^gC1,:U?0ekC;0eb:80J>(40/"q1/hS_-/M/M)/1`;%.k<,".Olns.4H\o
-n$Jk-RU8g-71&c,pai_,U=W[,9nEW+sJ3S+X&!O+<VaJ+!2OF*Zc=B*??+>*#on:)]BV5)AsD1)&O2-
~>
<~Wi;tsWMukrWMukqW2QYnW2HPkVl-GiVP^5fV5:#bV50o_Unjc\USFQXU8"?TTqS-PTV.pLT:_^HSt;LD
SXl:@S=?";S!oe7R[KS3R$a8-Q^=&)QBmf$Q'@MtP`q;pP*1ujOcb`eOH5H`NfK-ZNK&mUN/NUPMMd:J
M2@%ELkgb?L5(D9KnP,4K7ef.Jq8K(J:N0"IsuiqI=6NkI!^3eH?sj^H$FRYGB\4RG'.qLFEDSFEcQ2?
EH#l9Df9N2DJa6,Chmg%C2.HsBkV0mB4bafAS#C_A7K+Y@UW\R?sm>K?=$oC?!LW=>?Y36=]nj/='&F'
~>
<~j5T(Xio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
io8tWio/kTiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibRi8EPOi8EPOi8EPO
i8EPOi8EPOi8EPOi8EPOi8EPOi8EPOi8EPNhr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>J
hVR,GhVR,GhVR,GhVR,GhVR,GhVR,GhVR,GhVR,GhVI#Dh;-oCh;-oCh;-oCh;-oCh;-oCh;-oCh;-oC
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
111.867 283.355 mo
257.866 368.201 li
257.215 368.857 256.587 370.043 256.422 371.318 cv
110.437 287.031 li
110.513 285.575 111.127 284.102 111.867 283.355 cv
cp
.894118 .890196 .933333 rgb
f
256.484 371.354 mo
256.447 371.644 256.421 371.936 256.422 372.225 cv
110.422 287.38 li
110.422 287.264 110.431 287.147 110.437 287.031 cv
256.484 371.354 li
cp
.717647 .713726 .890196 rgb
f
111.317 274.38 mo
110.167 275.092 106.666 277.26 106.646 282.073 cv
106.651 283.998 107.909 285.92 110.422 287.38 cv
110.458 285.663 111.225 283.604 112.226 283.026 cv
108.163 280.669 108.185 276.787 112.274 274.43 cv
111.922 274.225 111.594 274.22 111.317 274.38 cv
cp
.894118 .890196 .933333 rgb
f
106.692 281.182 mo
106.681 281.362 106.666 281.539 106.665 281.727 cv
106.67 283.651 107.928 285.573 110.439 287.033 cv
110.431 287.15 110.425 287.266 110.422 287.38 cv
107.909 285.92 106.651 283.997 106.646 282.073 cv
106.647 281.765 106.663 281.469 106.692 281.182 cv
cp
.717647 .713726 .890196 rgb
f
198.78 290.45 mo
192.254 294.218 188.659 299.184 188.66 304.432 cv
188.66 309.68 192.254 314.646 198.78 318.414 cv
212.54 326.358 234.93 326.358 248.69 318.414 cv
255.216 314.646 258.81 309.68 258.81 304.432 cv
258.811 299.184 255.216 294.218 248.69 290.45 cv
234.93 282.505 212.54 282.505 198.78 290.45 cv
cp
223.735 325.829 mo
214.429 325.829 205.125 323.784 198.041 319.693 cv
191.038 315.651 187.181 310.231 187.181 304.432 cv
187.181 298.633 191.038 293.214 198.041 289.17 cv
212.209 280.99 235.261 280.99 249.429 289.17 cv
256.432 293.214 260.289 298.633 260.288 304.432 cv
260.288 310.231 256.432 315.651 249.429 319.693 cv
242.345 323.784 233.04 325.829 223.735 325.829 cv
cp
0 .768627 .960784 rgb
f
223.735 278.143 mo
211.88 278.143 200.025 280.748 191 285.959 cv
182.396 290.927 177.657 297.487 177.657 304.432 cv
177.657 311.377 182.396 317.938 191 322.905 cv
209.05 333.327 238.42 333.327 256.469 322.905 cv
265.074 317.938 269.812 311.377 269.812 304.432 cv
269.812 297.487 265.074 290.927 256.469 285.959 cv
247.445 280.748 235.589 278.143 223.735 278.143 cv
cp
223.735 332.178 mo
211.612 332.178 199.49 329.514 190.261 324.185 cv
181.181 318.942 176.179 311.927 176.179 304.432 cv
176.179 296.937 181.181 289.922 190.261 284.679 cv
208.719 274.022 238.751 274.022 257.209 284.679 cv
266.289 289.922 271.29 296.937 271.29 304.432 cv
271.29 311.927 266.289 318.942 257.209 324.185 cv
247.98 329.514 235.857 332.178 223.735 332.178 cv
cp
f
205.561 294.366 mo
200.846 297.088 198.25 300.663 198.25 304.432 cv
198.25 308.201 200.846 311.776 205.561 314.498 cv
215.581 320.283 231.887 320.284 241.908 314.498 cv
246.623 311.776 249.22 308.201 249.22 304.432 cv
249.22 300.663 246.623 297.088 241.908 294.366 cv
231.888 288.581 215.583 288.58 205.561 294.366 cv
cp
223.735 320.294 mo
216.885 320.294 210.036 318.789 204.822 315.778 cv
199.631 312.781 196.772 308.751 196.772 304.432 cv
196.772 300.113 199.631 296.083 204.822 293.086 cv
215.25 287.065 232.219 287.065 242.648 293.086 cv
247.839 296.083 250.698 300.113 250.698 304.432 cv
250.698 308.751 247.839 312.781 242.648 315.778 cv
237.434 318.789 230.584 320.294 223.735 320.294 cv
cp
f
175.806 243.462 mo
177.205 244.271 177.211 245.578 175.817 246.383 cv
174.424 247.187 172.159 247.184 170.759 246.376 cv
169.359 245.568 169.354 244.26 170.748 243.456 cv
172.141 242.651 174.406 242.654 175.806 243.462 cv
cp
.0352941 .0862745 .180392 rgb
f
180.33 240.697 mo
181.221 241.211 181.224 242.043 180.338 242.556 cv
179.451 243.068 178.009 243.066 177.119 242.551 cv
176.227 242.037 176.224 241.205 177.111 240.693 cv
177.998 240.181 179.439 240.182 180.33 240.697 cv
cp
f
151.009 260.107 mo
156.073 257.184 li
157.067 256.61 157.063 255.669 156.065 255.093 cv
155.067 254.517 153.438 254.515 152.445 255.089 cv
147.38 258.012 li
146.387 258.586 146.391 259.526 147.389 260.102 cv
148.387 260.679 150.016 260.681 151.009 260.107 cv
cp
.00392157 .0313726 .305882 rgb
f
279.111 370.817 mo
279.111 371.482 278.643 372.291 278.066 372.626 cv
277.652 372.867 277.292 372.793 277.125 372.483 cv
277.056 372.364 277.022 372.212 277.022 372.024 cv
277.022 371.354 277.49 370.546 278.066 370.211 cv
278.214 370.127 278.352 370.083 278.475 370.073 cv
278.849 370.043 279.111 370.32 279.111 370.817 cv
cp
.854902 .85098 .909804 rgb
f
278.583 370.536 mo
278.583 371.202 278.115 372.01 277.539 372.345 cv
277.391 372.428 277.253 372.473 277.125 372.483 cv
277.056 372.364 277.022 372.212 277.022 372.024 cv
277.022 371.354 277.49 370.546 278.066 370.211 cv
278.214 370.127 278.352 370.083 278.475 370.073 cv
278.549 370.192 278.583 370.349 278.583 370.536 cv
cp
.0352941 .0862745 .180392 rgb
f
309.661 353.014 mo
309.661 353.675 309.193 354.483 308.616 354.813 cv
305.734 356.479 li
305.566 356.572 305.408 356.621 305.271 356.621 cv
305.083 356.621 304.926 356.537 304.827 356.385 cv
304.743 356.261 304.694 356.089 304.694 355.877 cv
304.694 355.217 305.162 354.409 305.734 354.079 cv
308.616 352.413 li
308.725 352.354 308.828 352.31 308.922 352.29 cv
309.079 352.271 li
309.424 352.271 309.661 352.547 309.661 353.014 cv
cp
.854902 .85098 .909804 rgb
f
309.055 352.797 mo
309.055 353.458 308.587 354.266 308.015 354.596 cv
305.127 356.261 li
305.024 356.326 304.921 356.365 304.827 356.385 cv
304.743 356.261 304.694 356.089 304.694 355.877 cv
304.694 355.217 305.162 354.409 305.734 354.079 cv
308.616 352.413 li
308.725 352.354 308.828 352.31 308.922 352.29 cv
309.005 352.413 309.055 352.586 309.055 352.797 cv
cp
.0352941 .0862745 .180392 rgb
f
267.984 216.949 mo
265.939 215.689 261.683 213.068 257.396 206.544 cv
253.304 200.318 252.348 194.719 251.989 192.611 cv
252.075 193.218 252.542 193.737 253.417 194.058 cv
254.568 202.117 260.151 210.712 266.679 214.481 cv
266.675 215.642 267.145 216.465 267.984 216.949 cv
cp
.568627 .615686 .839216 rgb
f
266.679 214.481 mo
268.912 215.77 li
268.909 216.932 269.379 217.755 270.218 218.239 cv
269.994 218.11 li
269.771 217.98 li
269.547 217.852 li
269.324 217.723 li
269.101 217.594 li
268.877 217.465 li
268.654 217.336 li
268.431 217.207 li
268.207 217.078 li
267.984 216.949 li
267.145 216.465 266.675 215.642 266.679 214.481 cv
cp
f
268.912 215.77 mo
271.143 217.058 li
271.14 218.22 271.61 219.043 272.449 219.527 cv
272.225 219.398 li
272.002 219.269 li
271.779 219.14 li
271.556 219.011 li
271.333 218.883 li
271.11 218.754 li
270.887 218.625 li
270.664 218.496 li
270.441 218.367 li
270.218 218.239 li
269.379 217.755 268.909 216.932 268.912 215.77 cv
cp
f
314.022 199.333 mo
313.851 200.142 313.613 201.22 313.364 202.008 cv
313.113 202.804 312.703 203.842 312.357 204.601 cv
312.114 205.135 311.762 205.837 311.454 206.336 cv
311.237 206.688 310.962 207.165 310.731 207.507 cv
310.393 208.007 309.923 208.66 309.558 209.14 cv
308.324 210.759 306.605 212.377 306.138 212.777 cv
304.976 213.773 304.626 214.074 303.633 214.792 cv
302.36 215.712 301.357 216.3 300.875 216.583 cv
303.616 214.99 305.566 212.003 306.319 207.777 cv
310.785 205.182 313.548 201.992 314.022 199.333 cv
cp
f
gsave
314.022 199.333 mo
313.851 200.142 313.613 201.22 313.364 202.008 cv
313.113 202.804 312.703 203.842 312.357 204.601 cv
312.114 205.135 311.762 205.837 311.454 206.336 cv
311.237 206.688 310.962 207.165 310.731 207.507 cv
310.393 208.007 309.923 208.66 309.558 209.14 cv
308.324 210.759 306.605 212.377 306.138 212.777 cv
304.976 213.773 304.626 214.074 303.633 214.792 cv
302.36 215.712 301.357 216.3 300.875 216.583 cv
303.616 214.99 305.566 212.003 306.319 207.777 cv
310.785 205.182 313.548 201.992 314.022 199.333 cv
cp
clp
314.022 199.333 mo
313.451 202.027 311.716 210.225 300.875 216.583 cv
303.616 214.99 305.566 212.003 306.319 207.777 cv
310.785 205.182 313.548 201.992 314.022 199.333 cv
cp
f
grestore
248.957 162.864 mo
253.417 194.058 li
252.542 193.737 252.075 193.218 251.981 192.557 cv
251.758 190.997 li
251.535 189.438 li
251.312 187.878 li
251.089 186.318 li
250.866 184.758 li
250.642 183.198 li
250.419 181.639 li
250.196 180.079 li
249.973 178.52 li
249.75 176.96 li
249.527 175.4 li
249.304 173.841 li
249.081 172.281 li
248.858 170.721 li
248.635 169.161 li
248.412 167.602 li
248.189 166.042 li
247.966 164.483 li
247.743 162.923 li
247.52 161.363 li
247.615 162.025 248.081 162.543 248.957 162.864 cv
cp
.717647 .713726 .890196 rgb
f
300.875 216.583 mo
297.747 218.401 li
300.487 216.809 302.437 213.822 303.191 209.595 cv
306.319 207.777 li
305.566 212.003 303.616 214.99 300.875 216.583 cv
cp
.568627 .615686 .839216 rgb
f
gsave
300.875 216.583 mo
297.747 218.401 li
300.487 216.809 302.437 213.822 303.191 209.595 cv
306.319 207.777 li
305.566 212.003 303.616 214.99 300.875 216.583 cv
cp
clp
303.191 209.595 mo
306.319 207.777 li
305.566 212.003 303.616 214.99 300.875 216.583 cv
297.747 218.401 li
300.487 216.809 302.437 213.822 303.191 209.595 cv
cp
f
grestore
262.91 137.52 mo
274.129 131.348 281.281 133.786 285.686 136.157 cv
283.639 134.976 279.399 135.812 274.495 138.662 cv
269.924 136.022 265.849 135.812 262.91 137.52 cv
cp
.894118 .890196 .933333 rgb
f
297.747 218.401 mo
297.345 218.622 296.817 218.93 296.409 219.138 cv
295.857 219.42 295.112 219.781 294.545 220.036 cv
293.085 220.692 291.56 221.181 291.547 221.185 cv
290.727 221.429 289.626 221.733 288.794 221.931 cv
288.289 222.052 287.603 222.156 287.092 222.245 cv
286.075 222.423 285.171 222.463 283.919 222.519 cv
283.315 222.546 282.507 222.504 281.903 222.47 cv
281.492 222.447 280.947 222.379 280.538 222.331 cv
279.76 222.24 278.734 222.023 277.976 221.826 cv
275.25 221.115 273.215 219.961 272.449 219.527 cv
271.61 219.043 271.14 218.22 271.143 217.058 cv
277.674 220.829 283.284 218.697 284.48 211.992 cv
287.9 214.685 296.278 213.613 303.191 209.595 cv
302.437 213.822 300.487 216.809 297.747 218.401 cv
cp
.568627 .615686 .839216 rgb
f
gsave
297.747 218.401 mo
297.345 218.622 296.817 218.93 296.409 219.138 cv
295.857 219.42 295.112 219.781 294.545 220.036 cv
293.085 220.692 291.56 221.181 291.547 221.185 cv
290.727 221.429 289.626 221.733 288.794 221.931 cv
288.289 222.052 287.603 222.156 287.092 222.245 cv
286.075 222.423 285.171 222.463 283.919 222.519 cv
283.315 222.546 282.507 222.504 281.903 222.47 cv
281.492 222.447 280.947 222.379 280.538 222.331 cv
279.76 222.24 278.734 222.023 277.976 221.826 cv
275.25 221.115 273.215 219.961 272.449 219.527 cv
271.61 219.043 271.14 218.22 271.143 217.058 cv
277.674 220.829 283.284 218.697 284.48 211.992 cv
287.9 214.685 296.278 213.613 303.191 209.595 cv
302.437 213.822 300.487 216.809 297.747 218.401 cv
cp
clp
297.747 218.401 mo
292.769 221.143 288.893 222.298 283.919 222.519 cv
281.3 222.636 277.184 222.211 272.449 219.527 cv
271.61 219.043 271.14 218.22 271.143 217.058 cv
277.674 220.829 283.284 218.697 284.48 211.992 cv
287.9 214.685 296.278 213.613 303.191 209.595 cv
302.437 213.822 300.487 216.809 297.747 218.401 cv
cp
f
grestore
259.781 139.338 mo
262.91 137.52 li
265.849 135.812 269.924 136.022 274.495 138.662 cv
271.366 140.48 li
266.795 137.841 262.72 137.63 259.781 139.338 cv
cp
.894118 .890196 .933333 rgb
f
284.734 144.573 mo
274.495 138.662 li
279.399 135.812 283.64 134.976 285.687 136.158 cv
294.902 141.478 li
295.414 141.774 li
295.926 142.069 li
293.879 140.888 289.639 141.723 284.734 144.573 cv
cp
.854902 .85098 .909804 rgb
f
247.52 161.363 mo
247.115 157.656 246.039 147.81 259.71 139.38 cv
262.72 137.63 266.795 137.841 271.366 140.48 cv
264.454 144.497 258.84 150.996 258.829 154.993 cv
252.582 151.392 247.86 155.157 248.957 162.864 cv
248.081 162.543 247.614 162.024 247.52 161.363 cv
cp
f
271.366 140.48 mo
274.495 138.662 li
284.734 144.573 li
281.605 146.392 li
271.366 140.48 li
cp
f
306.319 207.777 mo
310.939 181.827 li
315.406 179.231 318.168 176.041 318.641 173.382 cv
318.41 174.679 li
318.179 175.977 li
317.948 177.275 li
317.717 178.572 li
317.486 179.87 li
317.255 181.167 li
317.024 182.464 li
316.793 183.762 li
316.562 185.06 li
316.331 186.357 li
316.1 187.654 li
315.869 188.952 li
315.638 190.249 li
315.407 191.547 li
315.177 192.845 li
314.946 194.142 li
314.715 195.439 li
314.484 196.737 li
314.253 198.035 li
314.022 199.332 li
313.548 201.991 310.786 205.181 306.319 207.777 cv
cp
.717647 .713726 .890196 rgb
f
307.81 183.645 mo
310.939 181.827 li
306.319 207.777 li
303.191 209.595 li
307.81 183.645 li
cp
f
294.974 150.485 mo
284.734 144.573 li
289.639 141.723 293.879 140.888 295.926 142.069 cv
305.141 147.39 li
306.165 147.981 li
304.119 146.799 299.877 147.635 294.974 150.485 cv
cp
.854902 .85098 .909804 rgb
f
269.068 160.905 mo
258.829 154.993 li
258.84 150.996 264.454 144.497 271.366 140.48 cv
281.605 146.392 li
274.693 150.409 269.079 156.908 269.068 160.905 cv
cp
f
281.605 146.392 mo
284.734 144.573 li
294.974 150.485 li
291.845 152.303 li
281.605 146.392 li
cp
f
306.166 147.981 mo
307.779 148.991 309.448 150.034 311.951 152.78 cv
313.389 154.356 315.069 156.836 316.039 158.81 cv
318.593 164.009 319.42 168.638 318.641 173.38 cv
318.169 176.04 315.406 179.23 310.939 181.827 cv
312.797 171.382 305.142 156.355 294.974 150.485 cv
299.878 147.635 304.119 146.799 306.166 147.981 cv
cp
.717647 .713726 .890196 rgb
f
310.939 181.827 mo
311.579 178.228 311.09 174.084 309.757 169.959 cv
309.863 169.815 310.004 169.623 310.109 169.478 cv
313.765 163.649 310.571 158.155 303.661 158.388 cv
301.166 155.125 298.196 152.345 294.974 150.485 cv
299.878 147.635 304.119 146.799 306.166 147.981 cv
306.539 148.215 307.037 148.526 307.41 148.76 cv
307.81 149.049 308.35 149.426 308.739 149.73 cv
309.853 150.666 li
310.185 150.982 310.636 151.393 310.959 151.719 cv
311.951 152.78 li
312.237 153.12 312.626 153.567 312.902 153.914 cv
313.776 155.077 li
314.022 155.44 314.358 155.919 314.594 156.288 cv
315.348 157.533 li
315.555 157.916 315.841 158.422 316.039 158.81 cv
316.665 160.118 li
316.833 160.519 317.067 161.05 317.225 161.455 cv
317.712 162.81 li
317.837 163.229 318.016 163.784 318.129 164.206 cv
318.461 165.594 li
318.539 166.035 318.655 166.622 318.719 167.065 cv
318.873 168.473 li
318.893 168.955 318.932 169.598 318.933 170.08 cv
318.879 171.484 li
318.815 172.054 318.734 172.815 318.641 173.38 cv
318.169 176.04 315.406 179.23 310.939 181.827 cv
cp
f
310.939 181.827 mo
311.031 181.306 311.101 180.775 311.147 180.233 cv
311.275 180.154 311.446 180.049 311.574 179.969 cv
326.331 170.384 314.128 151.134 305.745 149.44 cv
301.655 148.614 297.757 150.733 296.476 151.43 cv
295.982 151.093 295.481 150.778 294.974 150.485 cv
299.878 147.635 304.119 146.799 306.166 147.981 cv
306.539 148.215 307.037 148.526 307.41 148.76 cv
307.81 149.049 308.35 149.426 308.739 149.73 cv
309.853 150.666 li
310.185 150.982 310.636 151.393 310.959 151.719 cv
311.951 152.78 li
312.237 153.12 312.626 153.567 312.902 153.914 cv
313.776 155.077 li
314.022 155.44 314.358 155.919 314.594 156.288 cv
315.348 157.533 li
315.555 157.916 315.841 158.422 316.039 158.81 cv
316.665 160.118 li
316.833 160.519 317.067 161.05 317.225 161.455 cv
317.712 162.81 li
317.837 163.229 318.016 163.784 318.129 164.206 cv
318.461 165.594 li
318.539 166.035 318.655 166.622 318.719 167.065 cv
318.873 168.473 li
318.893 168.955 318.932 169.598 318.933 170.08 cv
318.879 171.484 li
318.815 172.054 318.734 172.815 318.641 173.38 cv
318.169 176.04 315.406 179.23 310.939 181.827 cv
cp
.768627 .764706 .92549 rgb
f
284.48 211.992 mo
289.099 186.042 li
292.519 188.735 300.898 187.662 307.81 183.645 cv
303.191 209.595 li
296.278 213.613 287.9 214.685 284.48 211.992 cv
cp
.717647 .713726 .890196 rgb
f
279.307 166.816 mo
269.068 160.905 li
269.079 156.908 274.693 150.409 281.605 146.392 cv
291.845 152.303 li
284.932 156.32 279.318 162.819 279.307 166.816 cv
cp
.854902 .85098 .909804 rgb
f
291.845 152.303 mo
294.974 150.485 li
295.481 150.778 295.982 151.093 296.476 151.43 cv
293.347 153.248 li
292.853 152.912 292.352 152.596 291.845 152.303 cv
cp
.768627 .764706 .92549 rgb
f
293.347 153.248 mo
296.476 151.43 li
299.119 153.232 301.558 155.638 303.66 158.387 cv
300.531 160.205 li
298.429 157.456 295.99 155.051 293.347 153.248 cv
cp
.717647 .713726 .890196 rgb
f
300.531 160.205 mo
303.66 158.387 li
306.327 161.874 308.451 165.911 309.759 169.966 cv
306.63 171.784 li
305.322 167.729 303.198 163.692 300.531 160.205 cv
cp
f
306.63 171.784 mo
309.759 169.966 li
310.898 173.493 311.42 177.032 311.147 180.234 cv
308.018 182.052 li
308.291 178.851 307.769 175.311 306.63 171.784 cv
cp
f
308.018 182.052 mo
311.147 180.234 li
311.101 180.775 311.031 181.307 310.939 181.827 cv
307.81 183.645 li
307.903 183.125 307.972 182.593 308.018 182.052 cv
cp
.768627 .764706 .92549 rgb
f
279.307 166.816 mo
285.551 170.426 290.236 179.622 289.099 186.042 cv
287.559 194.692 286.02 203.342 284.48 211.992 cv
283.284 218.697 277.674 220.829 271.143 217.058 cv
270.4 216.629 269.656 216.2 268.912 215.77 cv
268.168 215.341 267.423 214.911 266.679 214.481 cv
260.151 210.712 254.568 202.117 253.417 194.058 cv
251.93 183.659 250.443 173.262 248.957 162.864 cv
247.86 155.157 252.582 151.392 258.829 154.993 cv
262.242 156.963 265.655 158.934 269.068 160.905 cv
272.481 162.875 275.894 164.846 279.307 166.816 cv
cp
f
279.307 166.816 mo
279.318 162.819 284.932 156.32 291.845 152.303 cv
302.013 158.174 309.668 173.201 307.81 183.645 cv
300.898 187.662 292.519 188.735 289.099 186.042 cv
290.236 179.622 285.551 170.426 279.307 166.816 cv
cp
.717647 .713726 .890196 rgb
f
289.099 186.042 mo
290.236 179.622 285.551 170.426 279.307 166.816 cv
279.318 162.819 284.932 156.32 291.845 152.303 cv
295.067 154.164 298.037 156.944 300.532 160.206 cv
300.421 160.212 300.272 160.22 300.16 160.226 cv
288.697 161.08 288.705 170.351 294.785 175.721 cv
298.897 179.353 304.64 174.533 306.628 171.777 cv
307.961 175.902 308.45 180.046 307.81 183.645 cv
300.898 187.662 292.519 188.735 289.099 186.042 cv
cp
f
289.099 186.042 mo
290.236 179.622 285.551 170.426 279.307 166.816 cv
279.318 162.819 284.932 156.32 291.845 152.303 cv
292.352 152.596 292.853 152.912 293.347 153.248 cv
293.216 153.323 293.042 153.424 292.911 153.499 cv
290.464 154.98 284.872 158.997 285.786 164.286 cv
286.357 167.587 293.618 180.544 293.688 180.657 cv
294.891 182.596 296.073 183.898 298.252 184.397 cv
299.484 184.679 302.904 185.016 308.018 182.052 cv
307.972 182.593 307.903 183.125 307.81 183.645 cv
300.898 187.662 292.519 188.735 289.099 186.042 cv
cp
.768627 .764706 .92549 rgb
f
316.046 124.523 mo
313.133 119.502 309.764 117.412 308.326 116.519 cv
306.373 115.392 302.001 116.358 296.917 119.312 cv
297.353 119.564 297.784 119.839 298.21 120.13 cv
295.084 121.946 li
295.152 121.995 li
294.703 121.686 294.248 121.396 293.788 121.131 cv
286.875 125.147 281.262 131.322 281.252 134.919 cv
285.937 137.62 289.736 144.2 289.718 149.579 cv
292.848 151.386 300.992 149.595 307.904 145.578 cv
311.033 143.759 li
316.101 140.814 319.101 137.49 319.108 135.101 cv
319.048 133.411 318.907 129.454 316.046 124.523 cv
cp
.717647 .713726 .890196 rgb
f
257.818 147.861 mo
256.371 146.964 252.984 144.862 250.098 139.858 cv
248.702 137.436 247.036 133.616 247.036 129.167 cv
247.033 129.996 247.428 130.686 248.263 131.169 cv
248.244 136.548 252.044 143.128 256.728 145.828 cv
256.726 146.78 257.115 147.456 257.818 147.861 cv
cp
.768627 .764706 .92549 rgb
f
248.278 125.654 mo
248.263 131.169 li
247.428 130.687 247.033 129.997 247.036 129.168 cv
247.037 128.617 li
247.039 128.065 li
247.041 127.514 li
247.042 126.962 li
247.044 126.411 li
247.045 125.859 li
247.047 125.308 li
247.048 124.756 li
247.05 124.205 li
247.051 123.653 li
247.049 124.482 247.443 125.172 248.278 125.654 cv
cp
.854902 .85098 .909804 rgb
f
262.386 104.207 mo
273.317 98.1599 279.876 100.275 283.858 102.393 cv
281.922 101.274 277.549 102.239 272.464 105.194 cv
268.527 102.922 264.961 102.71 262.386 104.207 cv
cp
.894118 .890196 .933333 rgb
f
259.257 106.025 mo
262.386 104.207 li
264.961 102.71 268.527 102.922 272.464 105.194 cv
269.335 107.013 li
265.398 104.74 261.832 104.529 259.257 106.025 cv
cp
f
256.728 145.828 mo
281.181 159.946 li
281.179 160.897 281.568 161.573 282.27 161.979 cv
279.825 160.567 li
277.38 159.155 li
274.934 157.743 li
272.489 156.332 li
270.044 154.92 li
267.598 153.508 li
265.153 152.096 li
262.708 150.684 li
260.263 149.273 li
257.817 147.861 li
257.115 147.455 256.726 146.78 256.728 145.828 cv
cp
.768627 .764706 .92549 rgb
f
247.051 123.654 mo
247.146 121.062 247.433 113.173 259.257 106.025 cv
261.832 104.529 265.398 104.74 269.335 107.013 cv
262.423 111.03 256.809 117.204 256.799 120.802 cv
252.115 118.093 248.29 120.271 248.278 125.654 cv
247.444 125.172 247.049 124.483 247.051 123.654 cv
cp
.894118 .890196 .933333 rgb
f
311.018 149.274 mo
311.033 143.759 li
314.198 141.92 316.557 139.933 317.883 138.145 cv
317.868 143.66 li
316.541 145.448 314.182 147.435 311.018 149.274 cv
cp
.854902 .85098 .909804 rgb
f
317.868 143.66 mo
317.883 138.145 li
318.681 137.07 319.106 136.067 319.108 135.213 cv
319.106 135.764 li
319.105 136.316 li
319.103 136.867 li
319.102 137.418 li
319.1 137.97 li
319.099 138.521 li
319.097 139.073 li
319.096 139.624 li
319.094 140.176 li
319.093 140.727 li
319.09 141.582 318.665 142.585 317.868 143.66 cv
cp
f
296.917 119.312 mo
272.464 105.194 li
277.549 102.239 281.921 101.275 283.874 102.402 cv
286.319 103.813 li
288.765 105.226 li
291.21 106.637 li
293.655 108.049 li
296.1 109.461 li
298.546 110.872 li
300.991 112.285 li
303.436 113.696 li
305.881 115.108 li
308.327 116.52 li
306.374 115.392 302.001 116.357 296.917 119.312 cv
cp
f
307.904 145.578 mo
311.033 143.759 li
311.018 149.274 li
307.889 151.092 li
307.904 145.578 li
cp
f
269.335 107.013 mo
272.464 105.194 li
296.917 119.312 li
293.788 121.131 li
269.335 107.013 li
cp
f
317.887 138.141 mo
321.212 130.105 313.827 121.623 313.752 121.538 cv
311.049 118.483 307.611 116.044 300.819 118.852 cv
299.651 119.336 298.82 119.793 298.213 120.128 cv
297.786 119.837 297.354 119.564 296.917 119.312 cv
302.001 116.358 306.373 115.392 308.326 116.519 cv
308.612 116.697 308.993 116.933 309.279 117.111 cv
309.578 117.323 309.981 117.599 310.273 117.821 cv
311.13 118.517 li
311.386 118.748 311.732 119.051 311.981 119.29 cv
312.755 120.072 li
312.979 120.323 313.284 120.651 313.502 120.908 cv
314.197 121.764 li
314.394 122.032 314.664 122.385 314.856 122.658 cv
315.471 123.577 li
315.644 123.861 315.88 124.235 316.046 124.523 cv
316.578 125.493 li
316.724 125.791 316.927 126.185 317.066 126.486 cv
317.509 127.499 li
317.627 127.809 317.793 128.22 317.905 128.533 cv
318.249 129.58 li
318.338 129.904 318.464 130.333 318.544 130.658 cv
318.779 131.737 li
318.834 132.078 318.915 132.53 318.959 132.872 cv
319.068 133.982 li
319.081 134.351 319.108 134.844 319.108 135.213 cv
319.105 136.067 318.682 137.068 317.887 138.141 cv
cp
f
293.788 121.131 mo
296.917 119.312 li
297.354 119.564 297.786 119.837 298.213 120.128 cv
295.084 121.946 li
294.657 121.655 294.225 121.383 293.788 121.131 cv
cp
f
289.702 155.093 mo
289.718 149.579 li
291.273 150.477 294.068 150.486 297.333 149.776 cv
297.317 155.29 li
294.052 156.001 291.258 155.992 289.702 155.093 cv
cp
f
297.317 155.29 mo
297.333 149.776 li
300.639 149.056 304.427 147.598 307.904 145.578 cv
307.889 151.092 li
304.411 153.113 300.623 154.57 297.317 155.29 cv
cp
f
281.252 134.919 mo
256.799 120.802 li
256.809 117.204 262.423 111.03 269.335 107.013 cv
293.788 121.131 li
286.875 125.147 281.262 131.322 281.252 134.919 cv
cp
f
281.252 134.919 mo
285.937 137.62 289.736 144.2 289.718 149.579 cv
289.712 151.417 289.707 153.255 289.702 155.093 cv
289.69 160.477 285.866 162.655 281.181 159.946 cv
273.03 155.24 264.879 150.534 256.728 145.828 cv
252.044 143.128 248.244 136.548 248.263 131.169 cv
248.268 129.33 248.273 127.492 248.278 125.654 cv
248.29 120.271 252.115 118.093 256.799 120.802 cv
264.95 125.508 273.101 130.214 281.252 134.919 cv
cp
.0156863 .184314 .560784 rgb
f
289.718 149.579 mo
289.736 144.2 285.937 137.62 281.252 134.919 cv
281.262 131.322 286.875 125.147 293.788 121.131 cv
294.225 121.383 294.657 121.655 295.084 121.946 cv
294.954 122.021 294.78 122.122 294.65 122.197 cv
292.127 123.716 286.304 127.76 286.705 132.49 cv
286.954 135.42 293.01 146.009 293.07 146.11 cv
294.041 147.735 295.006 149.126 296.983 149.689 cv
297.088 149.719 297.229 149.749 297.334 149.775 cv
294.068 150.486 291.274 150.477 289.718 149.579 cv
cp
.854902 .85098 .909804 rgb
f
311.018 149.274 mo
307.889 151.092 li
300.976 155.109 292.833 156.901 289.702 155.093 cv
289.69 160.477 285.866 162.655 281.181 159.946 cv
281.179 160.897 281.568 161.573 282.27 161.978 cv
284.805 163.333 291.542 166.931 303.758 160.174 cv
306.887 158.355 li
306.888 158.355 li
312.429 155.117 315.151 151.426 315.641 150.719 cv
318.076 147.202 318.947 144.68 319.093 140.727 cv
319.087 143.004 316.086 146.328 311.018 149.274 cv
cp
.768627 .764706 .92549 rgb
f
262.182 131.801 mo
262.182 133.899 260.71 134.749 258.893 133.7 cv
257.076 132.651 255.604 130.1 255.604 128.002 cv
255.604 125.905 257.076 125.055 258.893 126.103 cv
260.71 127.152 262.182 129.703 262.182 131.801 cv
cp
.0196078 .831373 .960784 rgb
f
280.614 142.442 mo
280.614 144.54 279.141 145.39 277.324 144.341 cv
275.507 143.292 274.035 140.741 274.035 138.644 cv
274.035 136.546 275.507 135.695 277.324 136.744 cv
279.141 137.793 280.614 140.344 280.614 142.442 cv
cp
f
264.826 144.09 mo
264.819 144.25 li
264.819 146.348 266.292 148.899 268.108 149.948 cv
269.925 150.997 271.398 150.147 271.398 148.049 cv
271.391 147.88 li
264.826 144.09 li
cp
f
313.303 138.019 mo
316.776 140.037 li
315.546 139.323 313.845 139.423 311.966 140.508 cv
308.493 138.49 li
310.372 137.405 312.073 137.305 313.303 138.019 cv
cp
.921569 .921569 .945098 rgb
f
gsave
313.303 138.019 mo
316.776 140.037 li
315.546 139.323 313.845 139.423 311.966 140.508 cv
308.493 138.49 li
310.372 137.405 312.073 137.305 313.303 138.019 cv
cp
clp
311.966 140.508 mo
308.493 138.49 li
310.372 137.405 312.073 137.305 313.303 138.019 cv
316.776 140.037 li
315.546 139.323 313.845 139.423 311.966 140.508 cv
cp
f
grestore
307.198 156.523 mo
303.725 154.504 li
302.511 153.799 301.757 152.299 301.751 150.167 cv
301.74 145.876 304.759 140.646 308.493 138.49 cv
311.966 140.508 li
308.232 142.664 305.212 147.894 305.224 152.185 cv
305.23 154.317 305.984 155.817 307.198 156.523 cv
cp
f
gsave
307.198 156.523 mo
303.725 154.504 li
302.511 153.799 301.757 152.299 301.751 150.167 cv
301.74 145.876 304.759 140.646 308.493 138.49 cv
311.966 140.508 li
308.232 142.664 305.212 147.894 305.224 152.185 cv
305.23 154.317 305.984 155.817 307.198 156.523 cv
cp
clp
307.198 156.523 mo
303.725 154.504 li
302.647 153.878 301.932 152.624 301.781 150.858 cv
305.254 152.876 li
305.405 154.642 306.12 155.896 307.198 156.523 cv
cp
f
305.254 152.876 mo
301.781 150.858 li
301.762 150.636 301.752 150.405 301.751 150.167 cv
301.741 146.467 303.985 142.068 306.997 139.545 cv
310.47 141.563 li
307.458 144.087 305.214 148.485 305.224 152.185 cv
305.225 152.424 305.235 152.654 305.254 152.876 cv
cp
f
310.47 141.563 mo
306.997 139.545 li
307.479 139.142 307.979 138.786 308.493 138.49 cv
311.966 140.508 li
311.452 140.805 310.951 141.16 310.47 141.563 cv
cp
f
grestore
311.966 140.508 mo
315.701 138.352 318.737 140.086 318.749 144.376 cv
318.761 148.667 315.745 153.896 312.01 156.052 cv
308.276 158.208 305.237 156.476 305.224 152.185 cv
305.212 147.894 308.232 142.664 311.966 140.508 cv
cp
.717647 .713726 .890196 rgb
f
311.975 143.912 mo
314.074 142.7 315.781 143.674 315.787 146.086 cv
315.794 148.498 314.099 151.436 312 152.648 cv
309.901 153.86 308.193 152.886 308.186 150.474 cv
308.179 148.063 309.876 145.124 311.975 143.912 cv
cp
.0196078 .831373 .960784 rgb
f
287.259 112.476 mo
287.254 114.258 li
287.252 114.881 286.842 115.504 286.024 115.979 cv
284.378 116.936 281.699 116.937 280.041 115.979 cv
279.208 115.498 278.791 114.866 278.793 114.235 cv
278.798 112.453 li
278.796 113.084 279.212 113.715 280.046 114.197 cv
281.704 115.154 284.383 115.153 286.029 114.197 cv
286.847 113.721 287.257 113.099 287.259 112.476 cv
cp
.717647 .713726 .890196 rgb
f
gsave
287.259 112.476 mo
287.254 114.258 li
287.252 114.881 286.842 115.504 286.024 115.979 cv
284.378 116.936 281.699 116.937 280.041 115.979 cv
279.208 115.498 278.791 114.866 278.793 114.235 cv
278.798 112.453 li
278.796 113.084 279.212 113.715 280.046 114.197 cv
281.704 115.154 284.383 115.153 286.029 114.197 cv
286.847 113.721 287.257 113.099 287.259 112.476 cv
cp
clp
287.259 112.476 mo
287.254 114.258 li
287.252 114.881 286.842 115.504 286.024 115.979 cv
285.4 116.342 284.627 116.567 283.819 116.655 cv
283.824 114.873 li
284.633 114.785 285.405 114.559 286.029 114.197 cv
286.847 113.721 287.257 113.099 287.259 112.476 cv
cp
f
283.824 114.873 mo
283.819 116.655 li
282.494 116.798 281.071 116.573 280.041 115.979 cv
279.892 115.893 279.756 115.802 279.634 115.707 cv
279.638 113.925 li
279.761 114.02 279.897 114.111 280.046 114.197 cv
281.076 114.791 282.499 115.016 283.824 114.873 cv
cp
f
279.638 113.925 mo
279.634 115.707 li
279.072 115.272 278.792 114.753 278.793 114.235 cv
278.798 112.453 li
278.797 112.971 279.077 113.489 279.638 113.925 cv
cp
f
grestore
286.01 110.731 mo
287.668 111.689 287.676 113.24 286.029 114.197 cv
284.383 115.153 281.704 115.154 280.046 114.197 cv
278.389 113.24 278.381 111.689 280.028 110.732 cv
281.674 109.775 284.353 109.774 286.01 110.731 cv
cp
.921569 .921569 .945098 rgb
f
282.976 113.444 mo
282.295 113.444 281.744 112.892 281.744 112.212 cv
281.744 98.605 li
281.744 97.9246 282.295 97.3732 282.976 97.3732 cv
283.656 97.3732 284.207 97.9246 284.207 98.605 cv
284.207 112.212 li
284.207 112.892 283.656 113.444 282.976 113.444 cv
cp
.568627 .615686 .839216 rgb
f
287.123 99.4954 mo
287.123 101.734 285.308 103.549 283.069 103.549 cv
280.83 103.549 279.015 101.734 279.015 99.4954 cv
279.015 97.2563 280.83 95.4414 283.069 95.4414 cv
285.308 95.4414 287.123 97.2563 287.123 99.4954 cv
cp
f
224.328 173.587 mo
229.436 170.619 li
230.527 171.248 231.417 172.788 231.413 174.042 cv
231.411 174.695 231.409 175.348 231.408 176.001 cv
231.406 176.468 231.429 176.942 231.404 177.408 cv
231.372 177.99 231.086 178.46 230.645 178.83 cv
230.24 179.17 229.762 179.416 229.355 179.754 cv
229.188 179.892 229.031 180.047 228.843 180.155 cv
228.667 180.256 228.469 180.314 228.271 180.363 cv
227.906 180.451 227.522 180.508 227.157 180.422 cv
226.808 180.34 226.489 180.106 226.354 179.766 cv
226.228 179.449 226.299 179.039 226.3 178.703 cv
226.302 178.139 226.303 177.575 226.305 177.01 cv
226.309 175.757 225.419 174.217 224.328 173.587 cv
cp
f
224.328 173.587 mo
229.436 170.619 li
218.693 164.416 li
213.584 167.384 li
224.328 173.587 li
cp
.717647 .713726 .890196 rgb
f
221.525 302.706 mo
221.528 302.523 221.524 302.339 221.511 302.154 cv
221.388 300.265 222.115 298.67 222.804 296.924 cv
223.061 296.272 223.34 295.59 223.888 295.153 cv
225.137 294.159 227.114 295.031 227.906 296.416 cv
228.273 297.058 228.475 297.78 228.805 298.442 cv
229.43 299.699 230.689 301.198 232.206 301.267 cv
234.244 301.358 236.535 300.657 238.599 300.532 cv
239.404 300.484 240.237 300.457 240.984 300.758 cv
242.745 301.47 243.254 304.311 242.624 305.897 cv
242.235 306.877 241.353 307.586 240.402 308.039 cv
238.975 308.719 237.094 309.11 235.518 308.992 cv
233.829 308.867 232.213 309.034 230.663 309.766 cv
228.002 311.022 224.908 312.827 222.221 310.38 cv
221.504 309.726 221.152 308.746 221.069 307.779 cv
220.92 306.065 221.502 304.407 221.525 302.706 cv
cp
.568627 .615686 .839216 rgb
f
206.914 298.817 mo
207.121 298.167 207.582 298.345 208.089 298.2 cv
208.721 298.019 209.311 297.57 209.797 297.142 cv
210.421 296.591 210.959 295.95 211.538 295.35 cv
213.038 293.799 214.825 292.526 216.782 291.612 cv
217.382 291.332 218.009 291.083 218.668 291.021 cv
219.921 290.904 221.126 291.468 222.258 292.018 cv
223.355 292.551 223.353 293.256 223.409 294.346 cv
223.436 294.867 223.421 295.396 223.289 295.901 cv
223.025 296.917 222.32 297.755 221.599 298.519 cv
220.767 299.401 219.872 300.249 218.794 300.805 cv
217.915 301.259 216.93 301.508 216.107 302.056 cv
215.552 302.425 215.095 302.916 214.694 303.443 cv
214.376 303.861 214.138 304.396 213.691 304.69 cv
212.763 305.297 211.659 305.787 210.546 305.867 cv
208.351 306.024 206.533 304.693 206.448 302.427 cv
206.418 301.615 206.561 300.807 206.703 300.007 cv
206.792 299.504 206.819 299.112 206.914 298.817 cv
cp
f
223.076 242.977 mo
222.613 242.369 221.775 242.227 221.023 242.093 cv
217.724 241.506 214.498 240.196 211.25 239.408 cv
209.791 239.054 208.327 238.811 206.849 238.78 cv
203.633 235.878 li
203.237 238.675 203 241.518 203.322 244.325 cv
204.022 250.438 205.62 264.546 206.036 271.272 cv
206.354 276.404 206.323 281.546 206.365 286.684 cv
206.383 288.898 206.528 291.113 206.25 293.296 cv
205.996 295.284 205.963 298.009 206.911 299.82 cv
207.662 301.257 209.165 302.259 210.774 302.45 cv
212.384 302.642 214.058 302.035 215.208 300.892 cv
215.936 300.168 215.907 298.739 216.017 297.773 cv
216.117 296.897 216.165 296.017 216.198 295.136 cv
216.293 292.594 216.293 290.05 216.378 287.508 cv
216.467 284.825 216.609 282.144 216.794 279.465 cv
216.916 277.706 217.055 275.949 217.209 274.193 cv
217.294 273.224 217.384 272.255 217.477 271.286 cv
217.556 270.46 217.402 268.852 217.793 268.135 cv
219.475 265.046 220.919 261.727 221.168 259.905 cv
221.522 257.315 221.51 254.693 221.777 252.094 cv
222.021 249.716 222.89 247.523 223.313 245.174 cv
223.448 244.427 223.533 243.582 223.076 242.977 cv
cp
.00784314 .0980392 .415686 rgb
f
229.583 275.509 mo
229.579 275.625 229.576 275.739 229.574 275.853 cv
229.481 281.165 229.854 286.47 229.983 291.779 cv
230.068 295.313 230.777 304.805 227.587 306.014 cv
226.006 306.613 222.816 307.058 221.94 305.531 cv
218.668 299.831 217.689 279.958 217.461 274.346 cv
217.404 272.93 217.557 273.451 217.473 272.037 cv
217.405 270.906 216.949 269.293 217.269 268.199 cv
217.883 266.101 220.659 267.291 222.018 267.759 cv
223.993 268.439 226.464 268.775 228.159 270.084 cv
229.852 271.393 229.641 273.576 229.583 275.509 cv
cp
.0156863 .184314 .560784 rgb
f
229.98 238.722 mo
228.195 237.109 222.687 239.086 220.617 239.207 cv
218.706 239.319 216.791 239.34 214.876 239.322 cv
214.028 239.314 212.939 239.474 212.118 239.274 cv
211.403 239.099 210.84 238.543 210.093 238.365 cv
209.506 238.225 207.86 237.01 207.396 237.395 cv
206.688 237.983 207.669 240.344 207.865 241.244 cv
209.615 249.228 214.891 255.958 216.455 263.955 cv
217.114 267.317 216.977 270.781 217.327 274.19 cv
217.369 274.611 217.421 275.039 217.589 275.428 cv
217.879 276.102 218.48 276.587 219.092 276.992 cv
220.595 277.989 222.31 278.659 224.084 278.974 cv
225.035 279.143 226.005 279.211 226.97 279.172 cv
227.7 279.142 228.637 278.794 229.302 279.164 cv
229.72 276.313 229.416 273.368 230.01 270.565 cv
230.635 267.62 230.501 264.434 230.602 261.41 cv
230.824 254.769 230.943 248.123 230.766 241.48 cv
230.744 240.652 230.706 239.784 230.275 239.077 cv
230.193 238.943 230.095 238.825 229.98 238.722 cv
cp
f
233.109 205.173 mo
233.168 205.931 233.04 207.411 232.3 207.908 cv
231.69 208.319 230.353 208.168 229.66 208.232 cv
227.482 208.434 225.303 208.574 223.126 208.715 cv
222.137 208.779 221.149 208.843 220.161 208.875 cv
217.267 208.966 214.387 208.777 211.569 208.31 cv
210.475 208.128 208.657 207.864 207.786 207.138 cv
206.923 206.417 206.842 205.25 206.987 204.088 cv
207.245 202.012 208.271 199.977 210.245 199.185 cv
212.225 198.389 214.183 198.729 216.146 198.98 cv
220.685 199.56 225.17 200.428 229.568 201.582 cv
230.35 201.787 231.146 202.009 231.8 202.481 cv
232.548 203.022 233.022 204.074 233.109 205.173 cv
cp
.905882 .905882 .905882 rgb
f
232.341 202.686 mo
232.336 202.477 li
232.31 201.284 232.307 199.898 231.616 198.858 cv
230.917 197.806 224.791 194.154 219.412 192.217 cv
214.329 190.386 209.141 186.656 203.718 189.718 cv
196.579 193.756 201.219 205.589 202.85 214.872 cv
203.944 221.106 203.252 223.295 203.832 227.532 cv
204.838 234.868 198.506 241.806 208.386 244.074 cv
215.137 245.623 222.357 246.811 228.862 244.429 cv
232.11 243.239 232.022 241.658 231.839 239.823 cv
229.671 218.141 232.455 209.922 232.341 202.686 cv
cp
.854902 .85098 .909804 rgb
f
220.768 187.8 mo
220.964 186.458 221.979 186.769 221.466 185.551 cv
221.03 184.516 220.368 183.565 219.481 182.878 cv
218.593 182.191 217.471 181.785 216.35 181.847 cv
215.964 181.868 215.707 182.09 215.323 182.09 cv
214.266 182.094 213.202 181.892 212.147 182.046 cv
211.097 182.198 210.125 182.274 210.126 183.46 cv
210.127 185.04 210.199 186.56 209.694 188.114 cv
209.425 188.944 209.014 189.744 208.943 190.615 cv
208.799 192.324 210.049 193.919 211.594 194.667 cv
213.493 195.585 215.641 195.501 217.662 195.208 cv
218.676 195.061 220.103 194.858 220.698 193.892 cv
221.146 193.163 220.954 192.209 220.858 191.413 cv
220.713 190.206 220.591 189.014 220.768 187.8 cv
cp
.960784 .74902 .65098 rgb
f
225.275 170.613 mo
225.912 171.389 226.41 172.262 226.563 173.286 cv
226.904 175.567 225.985 177.911 226.481 180.174 cv
226.96 182.367 226.02 187.347 221.697 188.622 cv
219.509 189.268 215.192 188.512 213.803 187.846 cv
211.939 186.954 210.708 185.148 209.607 183.399 cv
200.575 169.058 219.149 163.16 225.275 170.613 cv
cp
f
206.966 167.795 mo
207.404 167.346 207.941 166.958 208.596 166.653 cv
208.795 166.56 209.006 166.474 209.147 166.307 cv
209.251 166.181 209.305 166.023 209.375 165.875 cv
209.682 165.215 210.296 164.748 210.933 164.393 cv
213.343 163.052 216.265 162.989 218.994 163.38 cv
219.916 163.513 220.839 163.696 221.694 164.063 cv
222.671 164.482 223.534 165.13 224.315 165.85 cv
225.419 166.868 226.467 168.065 227.041 169.47 cv
227.308 170.124 227.361 170.815 227.549 171.478 cv
227.719 172.075 227.511 172.779 227.014 173.159 cv
226.8 173.322 226.548 173.427 226.325 173.577 cv
225.409 174.194 225.238 175.621 224.842 176.587 cv
224.592 177.197 224.097 177.53 223.955 178.186 cv
223.807 178.869 223.821 179.581 223.604 180.25 cv
223.502 180.567 223.291 180.909 222.958 180.931 cv
222.821 180.939 222.686 180.888 222.569 180.815 cv
222.184 180.576 221.983 180.128 221.856 179.692 cv
221.728 179.257 221.646 178.798 221.404 178.414 cv
221.264 178.276 li
221.102 178.273 li
220.638 178.363 220.332 178.709 220.111 179.101 cv
219.842 179.575 219.698 180.107 219.557 180.634 cv
219.334 181.46 219.307 182.161 219.203 182.984 cv
219.098 183.817 218.862 184.707 218.277 185.338 cv
216.967 186.753 214.442 186.674 212.736 186.296 cv
212.119 186.158 211.497 186.013 210.927 185.738 cv
209.611 185.105 208.713 183.861 207.874 182.665 cv
207.107 181.572 206.331 180.457 205.927 179.184 cv
205.698 178.467 205.593 177.716 205.49 176.971 cv
205.072 173.947 204.754 170.069 206.966 167.795 cv
cp
.0745098 .576471 .94902 rgb
f
205.805 178.761 mo
205.871 179.047 206.273 180.126 206.393 180.351 cv
210.793 181.163 215.807 181.053 220.139 180.063 cv
221.931 179.654 223.676 179.077 225.337 178.318 cv
225.871 178.074 228.235 176.936 228.627 176.529 cv
229.016 176.118 229.243 175.54 229.059 175.026 cv
228.791 174.265 228.414 174.294 227.462 174.726 cv
226.392 175.213 222.763 177.078 219.573 178.029 cv
217.528 178.639 210.858 178.938 205.805 178.761 cv
cp
.00392157 .0313726 .305882 rgb
f
229.892 174.8 mo
229.892 175.697 229.262 176.787 228.486 177.236 cv
227.709 177.684 227.08 177.321 227.08 176.424 cv
227.08 175.527 227.709 174.437 228.486 173.988 cv
229.262 173.54 229.892 173.903 229.892 174.8 cv
cp
.00784314 .0980392 .415686 rgb
f
227.193 176.638 mo
226.548 176.539 225.694 177.175 226.215 177.526 cv
225.873 177.568 225.544 177.833 225.537 178.177 cv
225.528 178.624 225.999 178.899 226.35 179.175 cv
226.832 179.556 227.165 180.088 227.488 180.609 cv
228.171 181.707 228.336 183.196 228.114 183.168 cv
227.556 183.097 226.975 182.82 226.754 182.303 cv
226.626 182.002 226.633 181.653 226.479 181.365 cv
226.35 181.127 226.127 180.957 225.908 180.799 cv
225.832 180.745 225.75 180.688 225.657 180.681 cv
225.461 180.666 225.318 180.869 225.267 181.059 cv
225.187 181.357 225.223 181.672 225.26 181.979 cv
225.349 182.728 225.458 183.526 225.946 184.103 cv
226.108 184.293 226.305 184.451 226.483 184.628 cv
226.676 184.82 226.848 185.037 227.061 185.209 cv
227.336 185.431 229.045 186.662 229.807 186.976 cv
232.49 189.329 234.277 188.22 234.793 186.037 cv
235.041 184.989 234.435 182.469 233.985 181.122 cv
233.953 180.999 li
233.861 180.761 li
233.856 180.747 li
233.851 180.736 li
233.129 178.886 231.411 175.172 229.827 175.923 cv
229.823 176.05 229.818 176.176 229.814 176.303 cv
227.837 175.525 228.441 176.831 227.193 176.638 cv
cp
.913725 .635294 .498039 rgb
f
231.754 185.288 mo
232.332 184.807 233.6 184.067 234.425 184.381 cv
235.104 184.64 235.745 185.807 236.192 186.329 cv
238.498 189.029 250.22 206.004 249.88 210.207 cv
249.703 212.384 244.622 212.987 241.683 211.086 cv
238.535 209.05 232.153 193.62 230.872 190.197 cv
230.591 189.448 230.317 188.679 230.326 187.881 cv
230.335 186.968 230.915 185.984 231.754 185.288 cv
cp
.854902 .85098 .909804 rgb
f
230.276 197.409 mo
228.322 196.445 226.058 195.776 224.201 196.96 cv
223.432 197.45 222.879 198.215 222.438 199.013 cv
221.277 201.11 220.566 203.435 221.059 205.832 cv
221.154 206.291 221.288 206.747 221.519 207.155 cv
222.369 208.659 223.943 208.919 225.426 209.409 cv
227.211 210 228.962 210.688 230.705 211.392 cv
234.186 212.798 237.653 214.286 241.3 215.215 cv
243.435 215.759 245.847 216.068 247.718 214.905 cv
248.979 214.12 249.819 212.695 249.893 211.21 cv
250.073 207.611 247.862 206.382 247.465 206.163 cv
234.994 199.261 229.992 197.269 230.276 197.409 cv
cp
.894118 .890196 .933333 rgb
f
219.59 176.04 mo
217.646 175.672 216.855 178.045 217.974 180.085 cv
218.301 180.68 218.938 181.251 219.398 181.749 cv
222.55 185.162 223.821 182.033 222.828 180.881 cv
220.52 178.204 222.035 176.502 219.59 176.04 cv
cp
.960784 .74902 .65098 rgb
f
219.736 179.806 mo
219.536 179.574 217.46 177.986 219.09 177.27 cv
219.541 177.073 219.967 177.498 219.977 177.952 cv
219.983 178.189 219.883 178.416 219.889 178.651 cv
219.893 178.791 219.937 178.927 219.994 179.053 cv
220.154 179.401 220.791 179.792 220.603 180.248 cv
220.435 180.652 219.85 179.94 219.736 179.806 cv
cp
.913725 .635294 .498039 rgb
f
243.993 81.9354 mo
246.497 80.4806 li
246.191 81.1814 li
243.687 82.6366 li
243.993 81.9354 li
cp
.960784 .690196 0 rgb
f
254.535 88.8994 mo
257.038 87.4446 li
258.02 87.1338 li
255.516 88.5886 li
254.535 88.8994 li
cp
f
255.516 88.5886 mo
254.535 88.8994 li
238.769 93.8953 li
243.687 82.6366 li
243.993 81.9354 li
255.516 88.5886 li
cp
.945098 .74902 .0509804 rgb
f
243.993 81.9354 mo
246.497 80.4806 li
258.02 87.1338 li
255.516 88.5886 li
243.993 81.9354 li
cp
.960784 .690196 0 rgb
f
236.254 49.944 mo
238.757 48.4891 li
239.652 47.9694 240.889 48.0388 242.248 48.823 cv
239.744 50.2778 li
238.385 49.4935 237.149 49.4242 236.254 49.944 cv
cp
f
gsave
236.254 49.944 mo
238.757 48.4891 li
239.652 47.9694 240.889 48.0388 242.248 48.823 cv
239.744 50.2778 li
238.385 49.4935 237.149 49.4242 236.254 49.944 cv
cp
clp
236.254 49.944 mo
238.757 48.4891 li
239.652 47.9694 240.889 48.0388 242.248 48.823 cv
239.744 50.2778 li
238.385 49.4935 237.149 49.4242 236.254 49.944 cv
cp
f
grestore
278.293 98.0345 mo
275.79 99.4894 li
276.673 98.976 277.223 97.8875 277.228 96.3436 cv
279.731 94.8889 li
279.727 96.4323 279.177 97.5212 278.293 98.0345 cv
cp
f
gsave
278.293 98.0345 mo
275.79 99.4894 li
276.673 98.976 277.223 97.8875 277.228 96.3436 cv
279.731 94.8889 li
279.727 96.4323 279.177 97.5212 278.293 98.0345 cv
cp
clp
277.228 96.3436 mo
279.731 94.8889 li
279.727 96.4323 279.177 97.5212 278.293 98.0345 cv
275.79 99.4894 li
276.673 98.976 277.223 97.8875 277.228 96.3436 cv
cp
f
grestore
277.281 77.6069 mo
279.784 76.1521 li
279.731 94.8889 li
277.228 96.3436 li
277.281 77.6069 li
cp
f
239.744 50.2778 mo
242.248 48.823 li
274.884 67.6659 li
272.381 69.1207 li
239.744 50.2778 li
cp
f
272.381 69.1207 mo
275.085 70.6824 277.289 74.5027 277.281 77.6069 cv
277.228 96.3436 li
277.219 99.451 275 100.715 272.296 99.1539 cv
254.535 88.8994 li
255.516 88.5886 li
243.993 81.9354 li
243.687 82.6366 li
239.659 80.311 li
236.958 78.7513 234.754 74.9338 234.762 71.8264 cv
234.816 53.0901 li
234.824 49.9854 237.043 48.7181 239.744 50.2778 cv
272.381 69.1207 li
cp
.945098 .74902 .0509804 rgb
f
272.381 69.1207 mo
274.884 67.6659 li
277.589 69.2272 279.793 73.0479 279.784 76.1521 cv
277.281 77.6069 li
277.289 74.5027 275.085 70.6824 272.381 69.1207 cv
cp
.960784 .690196 0 rgb
f
gsave
272.381 69.1207 mo
274.884 67.6659 li
277.589 69.2272 279.793 73.0479 279.784 76.1521 cv
277.281 77.6069 li
277.289 74.5027 275.085 70.6824 272.381 69.1207 cv
cp
clp
272.381 69.1207 mo
274.884 67.6659 li
277.589 69.2272 279.793 73.0479 279.784 76.1521 cv
277.281 77.6069 li
277.289 74.5027 275.085 70.6824 272.381 69.1207 cv
cp
f
grestore
250.746 72.6438 mo
250.746 74.458 249.472 75.1936 247.901 74.2865 cv
246.329 73.3794 245.055 71.1726 245.055 69.3584 cv
245.055 67.5438 246.329 66.8082 247.901 67.7153 cv
249.472 68.6228 250.746 70.8292 250.746 72.6438 cv
cp
1 1 1 rgb
f
258.362 77.0404 mo
258.362 78.8551 257.088 79.5906 255.516 78.6831 cv
253.945 77.776 252.671 75.5697 252.671 73.7551 cv
252.671 71.9406 253.945 71.205 255.516 72.1124 cv
257.088 73.0195 258.362 75.2258 258.362 77.0404 cv
cp
f
265.978 81.4371 mo
265.978 83.2517 264.704 83.9873 263.132 83.0802 cv
261.561 82.1727 260.287 79.9664 260.287 78.1517 cv
260.287 76.3372 261.561 75.6021 263.132 76.5092 cv
264.704 77.4163 265.978 79.6229 265.978 81.4371 cv
cp
f
217.606 112.738 mo
220.11 111.283 li
220.418 111.839 li
217.914 113.294 li
217.606 112.738 li
cp
.956863 .254902 .235294 rgb
f
197.587 76.5159 mo
200.091 75.0612 li
200.88 74.6024 201.972 74.6638 203.172 75.3567 cv
200.668 76.8115 li
199.469 76.1187 198.377 76.0571 197.587 76.5159 cv
cp
f
gsave
197.587 76.5159 mo
200.091 75.0612 li
200.88 74.6024 201.972 74.6638 203.172 75.3567 cv
200.668 76.8115 li
199.469 76.1187 198.377 76.0571 197.587 76.5159 cv
cp
clp
197.587 76.5159 mo
200.091 75.0612 li
200.88 74.6024 201.972 74.6638 203.172 75.3567 cv
200.668 76.8115 li
199.469 76.1187 198.377 76.0571 197.587 76.5159 cv
cp
f
grestore
227.757 118.977 mo
230.261 117.522 li
229.907 128.982 li
227.403 130.437 li
227.757 118.977 li
cp
f
227.769 118.605 mo
227.757 118.977 li
227.403 130.437 li
217.914 113.294 li
217.606 112.738 li
227.769 118.605 li
cp
.960784 .333333 .309804 rgb
f
227.769 118.605 mo
230.272 117.15 li
230.261 117.522 li
227.757 118.977 li
227.769 118.605 li
cp
.956863 .254902 .235294 rgb
f
217.606 112.738 mo
220.11 111.283 li
230.272 117.15 li
227.769 118.605 li
217.606 112.738 li
cp
f
234.956 118.75 mo
232.453 120.205 li
233.232 119.752 233.717 118.792 233.721 117.431 cv
236.224 115.976 li
236.22 117.337 235.735 118.297 234.956 118.75 cv
cp
f
gsave
234.956 118.75 mo
232.453 120.205 li
233.232 119.752 233.717 118.792 233.721 117.431 cv
236.224 115.976 li
236.22 117.337 235.735 118.297 234.956 118.75 cv
cp
clp
233.721 117.431 mo
236.224 115.976 li
236.22 117.337 235.735 118.297 234.956 118.75 cv
232.453 120.205 li
233.232 119.752 233.717 118.792 233.721 117.431 cv
cp
f
grestore
233.768 100.907 mo
236.271 99.4519 li
236.224 115.976 li
233.721 117.431 li
233.768 100.907 li
cp
f
200.668 76.8115 mo
203.172 75.3567 li
231.951 91.9722 li
229.447 93.4269 li
200.668 76.8115 li
cp
f
229.447 93.4269 mo
231.831 94.8035 233.775 98.1703 233.768 100.907 cv
233.721 117.431 li
233.713 120.171 231.756 121.286 229.372 119.91 cv
227.757 118.977 li
227.769 118.605 li
217.606 112.738 li
217.914 113.294 li
200.594 103.294 li
198.21 101.917 196.265 98.5504 196.273 95.8112 cv
196.32 79.2863 li
196.328 76.5502 198.285 75.4353 200.668 76.8115 cv
229.447 93.4269 li
cp
.960784 .333333 .309804 rgb
f
229.447 93.4269 mo
231.951 91.9722 li
234.335 93.3488 236.279 96.7155 236.271 99.4519 cv
233.768 100.907 li
233.775 98.1703 231.831 94.8035 229.447 93.4269 cv
cp
.956863 .254902 .235294 rgb
f
gsave
229.447 93.4269 mo
231.951 91.9722 li
234.335 93.3488 236.279 96.7155 236.271 99.4519 cv
233.768 100.907 li
233.775 98.1703 231.831 94.8035 229.447 93.4269 cv
cp
clp
229.447 93.4269 mo
231.951 91.9722 li
234.335 93.3488 236.279 96.7155 236.271 99.4519 cv
233.768 100.907 li
233.775 98.1703 231.831 94.8035 229.447 93.4269 cv
cp
f
grestore
206.518 89.189 mo
208.957 90.597 li
208.957 94.8219 li
211.094 96.0557 li
211.094 91.8313 li
213.534 93.2394 li
213.534 103.867 li
211.094 102.458 li
211.094 98.5819 li
208.957 97.3481 li
208.957 101.225 li
206.518 99.816 li
206.518 89.189 li
cp
.894118 .890196 .933333 rgb
f
214.515 93.8059 mo
216.954 95.214 li
216.954 105.841 li
214.515 104.433 li
214.515 93.8059 li
cp
f
218.048 104.441 mo
218.048 104.223 218.149 104.135 218.35 104.251 cv
219.796 105.086 li
219.984 105.195 220.085 105.413 220.085 105.616 cv
220.085 107.315 li
220.085 107.532 219.972 107.583 219.796 107.482 cv
218.35 106.647 li
218.174 106.545 218.048 106.342 218.048 106.139 cv
218.048 104.441 li
cp
220.261 97.1378 mo
219.997 104.752 li
218.161 103.693 li
217.948 95.802 li
220.261 97.1378 li
cp
f
311.512 180.969 mo
311.504 178.183 310.051 175.083 308.267 174.046 cv
307.459 173.577 li
306.74 173.159 306.076 173.14 305.541 173.449 cv
303.641 174.561 301.819 176.429 300.436 178.757 cv
299.078 181.04 298.141 183.765 298.223 186.827 cv
298.26 187.432 298.606 187.974 299.282 188.368 cv
300.09 188.837 li
300.07 188.513 300.067 188.184 300.077 187.85 cv
300.077 187.849 li
300.067 188.183 300.07 188.513 300.09 188.837 cv
301.874 189.874 305.285 189.477 307.706 187.952 cv
307.546 185.427 309.313 182.228 311.512 180.969 cv
cp
.921569 .921569 .945098 rgb
f
302.971 233.325 mo
302.845 233.244 302.671 233.146 302.552 233.055 cv
302.346 232.898 302.067 232.689 301.89 232.499 cv
301.338 231.911 301.223 231.769 300.797 231.007 cv
300.668 230.776 300.418 230.189 300.304 229.757 cv
300.161 229.212 300.096 228.963 300.018 228.046 cv
300.055 228.661 300.402 229.209 301.078 229.602 cv
301.188 231.421 301.892 232.698 302.971 233.325 cv
cp
.717647 .713726 .890196 rgb
f
gsave
302.971 233.325 mo
302.845 233.244 302.671 233.146 302.552 233.055 cv
302.346 232.898 302.067 232.689 301.89 232.499 cv
301.338 231.911 301.223 231.769 300.797 231.007 cv
300.668 230.776 300.418 230.189 300.304 229.757 cv
300.161 229.212 300.096 228.963 300.018 228.046 cv
300.055 228.661 300.402 229.209 301.078 229.602 cv
301.188 231.421 301.892 232.698 302.971 233.325 cv
cp
clp
302.971 233.325 mo
301.137 232.143 300.227 230.515 300.018 228.046 cv
300.055 228.661 300.402 229.209 301.078 229.602 cv
301.188 231.421 301.892 232.698 302.971 233.325 cv
cp
f
grestore
303.778 233.795 mo
302.971 233.325 li
301.892 232.698 301.188 231.421 301.078 229.602 cv
301.885 230.071 li
301.995 231.89 302.7 233.167 303.778 233.795 cv
cp
f
gsave
303.778 233.795 mo
302.971 233.325 li
301.892 232.698 301.188 231.421 301.078 229.602 cv
301.885 230.071 li
301.995 231.89 302.7 233.167 303.778 233.795 cv
cp
clp
303.778 233.795 mo
302.971 233.325 li
301.892 232.698 301.188 231.421 301.078 229.602 cv
301.885 230.071 li
301.995 231.89 302.7 233.167 303.778 233.795 cv
cp
f
grestore
316.007 224.169 mo
315.441 231.22 308.698 236.527 303.778 233.795 cv
302.7 233.167 301.995 231.89 301.885 230.071 cv
303.669 231.108 307.078 230.672 309.497 229.097 cv
309.575 230.36 310.513 230.827 311.651 230.172 cv
312.794 229.509 313.725 227.963 313.792 226.71 cv
315.198 225.971 315.963 225.031 316.007 224.169 cv
cp
.568627 .615686 .839216 rgb
f
313.792 226.71 mo
315.352 183.446 li
316.771 182.731 317.535 181.807 317.565 180.956 cv
317.487 183.117 li
317.41 185.278 li
317.331 187.439 li
317.254 189.599 li
317.176 191.76 li
317.098 193.92 li
317.02 196.079 li
316.942 198.239 li
316.864 200.398 li
316.786 202.558 li
316.709 204.717 li
316.631 206.876 li
316.553 209.035 li
316.475 211.194 li
316.397 213.352 li
316.319 215.511 li
316.242 217.669 li
316.164 219.828 li
316.086 221.986 li
316.008 224.145 li
315.977 225.014 315.212 225.964 313.792 226.71 cv
cp
f
299.282 188.368 mo
301.078 229.602 li
300.39 229.202 300.044 228.642 300.017 228.014 cv
299.927 225.955 li
299.837 223.895 li
299.747 221.835 li
299.658 219.776 li
299.568 217.715 li
299.479 215.655 li
299.389 213.594 li
299.299 211.533 li
299.209 209.473 li
299.12 207.412 li
299.03 205.35 li
298.94 203.289 li
298.85 201.228 li
298.76 199.166 li
298.671 197.105 li
298.581 195.043 li
298.491 192.982 li
298.401 190.92 li
298.312 188.858 li
298.222 186.796 li
298.249 187.414 298.595 187.968 299.282 188.368 cv
cp
.854902 .85098 .909804 rgb
f
307.528 173.537 mo
307.384 173.535 li
306.693 173.158 306.057 173.151 305.54 173.449 cv
305.736 173.344 305.998 173.205 306.194 173.1 cv
306.456 172.981 306.804 172.821 307.072 172.716 cv
307.72 172.495 li
308.011 172.419 308.399 172.32 308.694 172.262 cv
309.328 172.176 li
309.641 172.159 310.058 172.144 310.371 172.15 cv
310.977 172.206 li
311.294 172.264 311.716 172.354 312.027 172.439 cv
312.586 172.642 li
312.806 172.746 313.099 172.884 313.311 173.002 cv
311.835 172.144 309.795 172.25 307.528 173.537 cv
cp
f
301.885 230.071 mo
301.078 229.602 li
299.282 188.368 li
300.09 188.837 li
301.885 230.071 li
cp
f
308.267 174.046 mo
307.384 173.535 li
309.651 172.248 311.835 172.144 313.311 173.002 cv
314.119 173.472 li
312.643 172.614 310.603 172.72 308.336 174.007 cv
308.267 174.046 li
cp
.768627 .764706 .92549 rgb
f
311.512 180.969 mo
313.714 179.688 315.494 180.839 315.352 183.446 cv
314.83 197.93 314.311 212.32 313.792 226.71 cv
313.725 227.963 312.794 229.509 311.651 230.172 cv
310.513 230.827 309.575 230.36 309.497 229.097 cv
308.903 215.442 308.304 201.697 307.706 187.952 cv
307.546 185.427 309.313 182.228 311.512 180.969 cv
cp
.717647 .713726 .890196 rgb
f
307.706 187.952 mo
309.497 229.097 li
307.078 230.672 303.669 231.108 301.885 230.071 cv
300.09 188.837 li
301.874 189.874 305.285 189.477 307.706 187.952 cv
cp
.854902 .85098 .909804 rgb
f
298.223 186.827 mo
298.217 186.602 298.2 186.302 298.203 186.076 cv
298.207 185.798 298.215 185.425 298.245 185.148 cv
298.294 184.694 298.382 184.091 298.461 183.642 cv
298.506 183.386 298.595 183.05 298.658 182.798 cv
298.787 182.278 299.189 180.884 300.127 179.169 cv
300.862 177.825 301.8 176.632 302.38 176.02 cv
302.915 175.455 303.909 174.404 305.541 173.449 cv
306.076 173.14 306.74 173.159 307.459 173.577 cv
302.711 176.318 298.964 183.098 299.282 188.368 cv
298.606 187.974 298.26 187.432 298.223 186.827 cv
cp
.921569 .921569 .945098 rgb
f
307.706 187.952 mo
305.285 189.477 301.874 189.874 300.09 188.837 cv
299.771 183.567 303.519 176.788 308.267 174.046 cv
310.051 175.083 311.504 178.183 311.512 180.969 cv
309.313 182.228 307.546 185.427 307.706 187.952 cv
cp
f
317.562 179.724 mo
317.546 179.412 317.504 178.995 317.449 178.687 cv
317.244 177.528 317.003 176.944 316.753 176.4 cv
316.616 176.101 316.399 175.717 316.212 175.446 cv
316.006 175.147 315.692 174.778 315.449 174.508 cv
315.23 174.264 314.878 173.997 314.619 173.795 cv
314.478 173.685 314.269 173.569 314.119 173.472 cv
312.628 172.605 310.561 172.722 308.267 174.046 cv
310.051 175.083 311.504 178.183 311.512 180.969 cv
313.714 179.688 315.494 180.839 315.352 183.446 cv
316.758 182.738 317.521 181.824 317.564 180.979 cv
317.576 180.603 317.581 180.1 317.562 179.724 cv
cp
.768627 .764706 .92549 rgb
f
311.512 180.969 mo
311.506 178.843 310.658 176.534 309.464 175.099 cv
309.459 175.212 li
309.403 175.885 308.979 176.762 308.634 177.379 cv
308.472 177.649 308.31 177.92 308.147 178.19 cv
307.65 179.021 307.151 179.851 306.653 180.682 cv
306.04 181.706 305.426 182.729 304.812 183.752 cv
304.312 184.588 303.811 185.423 303.31 186.258 cv
303.174 186.485 303.045 186.719 302.9 186.942 cv
302.49 187.57 301.505 187.87 300.793 187.821 cv
300.157 187.777 299.512 187.478 299.087 186.998 cv
298.905 186.792 298.879 186.436 298.828 186.173 cv
298.757 185.81 298.727 185.439 298.725 185.068 cv
298.72 184.474 298.788 183.881 298.9 183.298 cv
299.024 182.659 299.203 182.03 299.422 181.416 cv
299.653 180.768 299.93 180.137 300.246 179.525 cv
300.567 178.903 300.928 178.302 301.329 177.728 cv
301.722 177.164 302.154 176.626 302.627 176.127 cv
303.078 175.652 303.568 175.211 304.099 174.827 cv
304.595 174.468 305.129 174.157 305.699 173.928 cv
306.236 173.713 306.805 173.571 307.384 173.535 cv
306.694 173.158 306.058 173.151 305.541 173.449 cv
305.305 173.587 305 173.787 304.769 173.935 cv
304.153 174.382 li
303.953 174.538 303.697 174.758 303.502 174.92 cv
302.939 175.442 li
302.767 175.611 302.548 175.846 302.38 176.02 cv
301.873 176.602 li
301.723 176.782 301.534 177.032 301.388 177.216 cv
300.939 177.846 li
300.808 178.038 300.644 178.302 300.518 178.497 cv
300.128 179.166 li
300.016 179.37 299.877 179.649 299.769 179.856 cv
299.443 180.557 li
299.348 180.774 299.234 181.069 299.145 181.288 cv
298.889 182.016 li
298.814 182.249 298.727 182.564 298.658 182.798 cv
298.481 183.545 li
298.429 183.798 298.375 184.138 298.331 184.392 cv
298.245 185.148 li
298.224 185.426 298.214 185.798 298.203 186.076 cv
298.209 186.301 298.217 186.602 298.223 186.827 cv
298.26 187.432 298.606 187.974 299.282 188.367 cv
300.09 188.837 li
301.874 189.874 305.285 189.477 307.706 187.952 cv
307.546 185.427 309.313 182.228 311.512 180.969 cv
cp
.854902 .85098 .909804 rgb
f
278.694 250.794 mo
278.683 254.811 li
266.555 247.809 li
266.566 243.793 li
278.694 250.794 li
cp
.568627 .615686 .839216 rgb
f
279.605 252.067 mo
279.594 256.083 li
279.595 255.612 279.274 255.152 278.683 254.811 cv
278.694 250.794 li
279.285 251.135 279.607 251.596 279.605 252.067 cv
cp
f
gsave
279.605 252.067 mo
279.594 256.083 li
279.595 255.612 279.274 255.152 278.683 254.811 cv
278.694 250.794 li
279.285 251.135 279.607 251.596 279.605 252.067 cv
cp
clp
279.605 252.067 mo
279.594 256.083 li
279.595 255.612 279.274 255.152 278.683 254.811 cv
278.694 250.794 li
279.285 251.135 279.607 251.596 279.605 252.067 cv
cp
f
grestore
289.673 254.338 mo
289.662 258.355 li
289.658 259.717 289.212 261.077 288.324 262.358 cv
288.335 258.341 li
289.224 257.061 289.67 255.7 289.673 254.338 cv
cp
f
gsave
289.673 254.338 mo
289.662 258.355 li
289.658 259.717 289.212 261.077 288.324 262.358 cv
288.335 258.341 li
289.224 257.061 289.67 255.7 289.673 254.338 cv
cp
clp
289.673 254.338 mo
289.662 258.355 li
289.658 259.717 289.212 261.077 288.324 262.358 cv
288.335 258.341 li
289.224 257.061 289.67 255.7 289.673 254.338 cv
cp
f
grestore
252.378 258.251 mo
252.39 254.234 li
252.382 257.015 254.217 259.8 257.891 261.921 cv
263.365 265.082 271.369 265.876 278.086 264.297 cv
278.075 268.314 li
271.358 269.892 263.354 269.098 257.88 265.938 cv
254.205 263.817 252.37 261.032 252.378 258.251 cv
cp
f
gsave
252.378 258.251 mo
252.39 254.234 li
252.382 257.015 254.217 259.8 257.891 261.921 cv
263.365 265.082 271.369 265.876 278.086 264.297 cv
278.075 268.314 li
271.358 269.892 263.354 269.098 257.88 265.938 cv
254.205 263.817 252.37 261.032 252.378 258.251 cv
cp
clp
278.086 264.297 mo
278.075 268.314 li
277.066 268.551 276.029 268.734 274.975 268.864 cv
274.986 264.848 li
276.04 264.718 277.078 264.534 278.086 264.297 cv
cp
f
274.986 264.848 mo
274.975 268.864 li
269.011 269.601 262.532 268.624 257.88 265.938 cv
254.205 263.817 252.37 261.032 252.378 258.251 cv
252.39 254.234 li
252.382 257.015 254.217 259.8 257.891 261.921 cv
262.543 264.608 269.022 265.584 274.986 264.848 cv
cp
f
grestore
326.491 292.243 mo
326.479 296.26 li
278.075 268.314 li
278.086 264.297 li
326.491 292.243 li
cp
f
343.895 292.977 mo
343.883 296.993 li
343.886 296.115 343.306 295.236 342.145 294.565 cv
339.843 293.236 336.117 293.236 333.829 294.565 cv
332.691 295.227 332.121 296.093 332.119 296.96 cv
332.13 292.943 li
332.133 292.076 332.702 291.21 333.841 290.549 cv
336.129 289.219 339.854 289.219 342.157 290.549 cv
343.318 291.219 343.897 292.099 343.895 292.977 cv
cp
f
gsave
343.895 292.977 mo
343.883 296.993 li
343.886 296.115 343.306 295.236 342.145 294.565 cv
339.843 293.236 336.117 293.236 333.829 294.565 cv
332.691 295.227 332.121 296.093 332.119 296.96 cv
332.13 292.943 li
332.133 292.076 332.702 291.21 333.841 290.549 cv
336.129 289.219 339.854 289.219 342.157 290.549 cv
343.318 291.219 343.897 292.099 343.895 292.977 cv
cp
clp
343.895 292.977 mo
343.883 296.993 li
343.886 296.115 343.306 295.236 342.145 294.565 cv
340.677 293.717 338.63 293.41 336.746 293.644 cv
336.758 289.627 li
338.641 289.394 340.688 289.701 342.157 290.549 cv
343.318 291.219 343.897 292.099 343.895 292.977 cv
cp
f
336.758 289.627 mo
336.746 293.644 li
335.676 293.776 334.658 294.084 333.829 294.565 cv
333.38 294.826 333.019 295.119 332.747 295.432 cv
332.759 291.415 li
333.031 291.103 333.391 290.81 333.841 290.549 cv
334.67 290.067 335.687 289.76 336.758 289.627 cv
cp
f
332.759 291.415 mo
332.747 295.432 li
332.33 295.91 332.12 296.435 332.119 296.96 cv
332.13 292.943 li
332.131 292.418 332.341 291.894 332.759 291.415 cv
cp
f
grestore
349.596 292.99 mo
349.584 297.007 li
349.579 298.713 348.458 300.417 346.218 301.718 cv
341.708 304.339 334.377 304.339 329.837 301.718 cv
327.552 300.399 326.413 298.67 326.418 296.942 cv
326.429 292.925 li
326.424 294.653 327.564 296.382 329.849 297.702 cv
334.388 300.322 341.719 300.322 346.23 297.702 cv
348.469 296.4 349.59 294.696 349.596 292.99 cv
cp
f
gsave
349.596 292.99 mo
349.584 297.007 li
349.579 298.713 348.458 300.417 346.218 301.718 cv
341.708 304.339 334.377 304.339 329.837 301.718 cv
327.552 300.399 326.413 298.67 326.418 296.942 cv
326.429 292.925 li
326.424 294.653 327.564 296.382 329.849 297.702 cv
334.388 300.322 341.719 300.322 346.23 297.702 cv
348.469 296.4 349.59 294.696 349.596 292.99 cv
cp
clp
349.596 292.99 mo
349.584 297.007 li
349.581 298.04 349.169 299.072 348.347 300.015 cv
348.358 295.998 li
349.18 295.056 349.593 294.023 349.596 292.99 cv
cp
f
348.358 295.998 mo
348.347 300.015 li
347.811 300.629 347.102 301.205 346.218 301.718 cv
344.583 302.668 342.578 303.274 340.47 303.535 cv
340.481 299.519 li
342.59 299.257 344.595 298.651 346.23 297.702 cv
347.113 297.188 347.823 296.612 348.358 295.998 cv
cp
f
340.481 299.519 mo
340.47 303.535 li
336.76 303.995 332.731 303.389 329.837 301.718 cv
327.552 300.399 326.413 298.67 326.418 296.942 cv
326.429 292.925 li
326.424 294.653 327.564 296.382 329.849 297.702 cv
332.743 299.373 336.772 299.978 340.481 299.519 cv
cp
f
grestore
333.865 295.368 mo
336.171 296.699 339.896 296.699 342.187 295.368 cv
344.475 294.038 344.463 291.88 342.157 290.549 cv
339.854 289.219 336.129 289.219 333.841 290.549 cv
331.55 291.88 331.562 294.038 333.865 295.368 cv
cp
346.176 288.213 mo
350.716 290.834 350.737 295.082 346.23 297.702 cv
341.719 300.322 334.388 300.322 329.849 297.702 cv
327.262 296.208 326.144 294.191 326.491 292.243 cv
278.086 264.297 li
271.369 265.876 263.365 265.082 257.891 261.921 cv
253.106 259.159 251.441 255.272 252.901 251.734 cv
265.029 258.736 li
265.809 259.186 266.945 259.364 268.008 259.199 cv
275.379 258.052 li
276.442 257.887 277.267 257.408 277.549 256.792 cv
279.503 252.518 li
279.785 251.902 279.474 251.245 278.694 250.794 cv
266.566 243.793 li
272.67 242.935 279.385 243.887 284.171 246.65 cv
289.645 249.81 291.038 254.445 288.335 258.341 cv
336.74 286.287 li
340.1 286.08 343.59 286.72 346.176 288.213 cv
cp
.768627 .764706 .92549 rgb
f
170.902 130.228 mo
195.594 144.483 li
197.912 145.822 199.809 149.118 199.809 151.807 cv
199.809 161.563 li
200.103 164.974 201.378 168.507 203.463 170.892 cv
200.914 171.137 197.642 168.374 194.703 164.64 cv
170.903 150.898 li
168.584 149.559 166.687 146.264 166.687 143.574 cv
166.687 132.684 li
166.687 129.995 168.584 128.889 170.902 130.228 cv
cp
.952941 .823529 .286275 rgb
f
184.551 152.544 mo
195.48 158.854 li
195.48 156.46 li
184.551 150.15 li
184.551 152.544 li
cp
.921569 .921569 .945098 rgb
f
169.468 137.196 mo
169.469 139.59 li
195.48 154.608 li
195.48 152.214 li
169.468 137.196 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2002.i039.010.P.m004.c33.chatbot messenger AI isometric set-11.eps)
%%CreationDate: 3/27/2021 7:30 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2Osde<Puf9Q@YmpJCScTZkrZsmi*(pNOjKf"==2J\00oATN4Dr&r,dRY:mi8A:*U2prElE.(%n*RrDFM1U'Q##RIqVQ(F
%(#;K`R.N'0?ap%4j2$B2jTE8??(l)JfW"_Tp3s>SoNSFk]i&dWee4CCKj%rpE)+.^'(>ckV>_^%XqZb[<%#(jS`Is/5@8>0$giV<
%e/2khE90#1W^RBT42[VQm4*YsrH=[M6#EClK7g:J\4_GEBAqm%IpR$#RtZ$r?MhBkU8`!62LXdJ$M"F:Cb6goZTp`%ZMn"#;eaE=
%'>7<9[Cqqm'2+1q"s>M#AQ)*N5FVGi^P(>F"J6E[s7M6YJ&?In@3eP"ci/A/IH[teXX-Z81k!;=[9c3.4@l>WZehVrR[:.T\O(il
%^Y5V#g-/<1Y%^HW,l\PW,:H6L,j3u@P,=XLYr+UW]*VF8WUjJsCl],)^WQP:[D[.$;"C)j\l6lI@JPC0Xel8\1^-),<;bmJ>.IAf
%[2J,KRG+d0r!LiF=$9n>nD&f?_#IF]NXF$P^J4W0YB2HqCC+&MIXBVEmM(-H?q[1Sfk^AjU\\19k_^Kf$mKsppCb>`Xb>%p,FD1$
%9B`'0%N7bDW#rD5@/BSR:\U=>o5\\b76!\09+g#@fkQgG4Vi55KId)A80m$<s1R@jC93)6]C"4%_$g2eZPsM]/\-4a^2p\[VI%4U
%[.%^s`1TR4;Q6:h?[I:lDq%1QTo`]uaf@I&.+ci8T7=M:^UY`hPn*c&eZ<s5gU4BaT78Df9(c+In^]A%lV3ht;I]+e)u[%/=C=Eh
%*&S*mC4lNRQ:Vk7NQ#ZO,WqQF6N0T"q9S!6EU&`%P="Lk+JH@"?[ej.#W40V`G'>,;Q(>!$3$XQi(j)$qP?H!l8=EMIf!EP2MkWV
%6l'Zob7(b-7=if]EOsjQf7o`%=J=FI;/]cM_CCf\/'E5pl2U-XfAbbch_&4D[],q7h!0?^I6klhYE`9s.`ai$'F*)6/.Ug16D[RD
%D\a6-j^KFim'JAX8+h2)gNpg,h4DKunP?)$CM"`ec.ZJui\TAj.PTKu.5tCBJpZh7MX$%IS>KTo_W4=#@aG]RG\*;\*sH-KSapJG
%Aj#uo4fqf.X_P?<0P$foVHg4tLHf![5F,>2/Fq_nB[m&\QVIm8,:`Z[?8-5/jVkZ8M8N*!mIt.t?>[L@9H7@Q)Eq(J.!aH\dQ/P0
%(:I<q.t@OA''WTPU2;aqV(rq,[D]p4s$n:.1Ekp7;62^*-4FYXWaEk1l\T`JcTaVmq8^LIJ#&$sO/Y=/qUkF[;D*G]rlBT;oZ?SM
%9:m2Pnu4aZQqqL35p&7,d)Y4.Q+$MKUg<hAoKi.l3^]NU3g\-)2#7LSkk$V)@qMg$SKU3Cj(-r(`ufDY9)'d'a^t&<A2X2hqWRQ+
%pg_amU6!P@LHaeN4_9TF*'T+s+.YVCIr+s@o^V./-:2)OBIme2o[2o5Qkk*dqRB4nN0uJCJ,Wkjj;."PP>0>g9-g9`><27+Fo%K6
%D7d5HT/7!'k@jM8*Rh86r8TeO-fa8mc.2&g:j(M=N*VL#9h;lV2t%&KpIro--61>Xnq2<-0C.^t>"YT4ShW5m*m[H5B7jfI1"Q,L
%KX[qX_X(%%l)B`E4q<'Yr`K)\s+!3mIft0b%F(Q62Y'=t5G/XfQ"IVd!u_e59Ma$cU(<^/5G5NZ&(+b1dg,JqWQWZDAG!6(.-ZC?
%#bi!35XZeL\jocu,BQZ37%QS&9KUm](ljCqLfgB5du$pIcV"1Zp]HN\B7gI,0"OGnc-+Q`8"V?=)^q9Jn;g5LVg4srYioR0H5NCG
%1f&2a1eV!JA;IWl1io8S\dlt0R"6Fh6:9*iF7N(d(bnB6Su+euNpBN"`!7'Ah&o[NUY0oS7spICDFlS7\@+aEAC6VY6jR4:<o1t2
%CM0_*U#8cqNb&G4kDWLb4mn)/`.(4WO*:1DS&a^<5NI;=5Ii:."91'pB&^Wu]#gt264MBV/k%Z4_RYtLaN,j1H)<jfP;J*2QA(ER
%aD!`3"=\@)RYE.#Dk-`O$gAH'-fmWl9g@*C'=XpoH;N@^Q)M-h$.#L&2Z5*V`(Rcer.@HmMKH:>9EP0BD+Gp/q;^GgXaI\-7Z=t5
%rLR,d^Y\AG]V5Cl^Lt_Y`1r%KcYIu5:FuELXjlRT'saUZnnG#hP<Z]R"]NZX@B`GqU0K-)r>M$L'<Bku\[k#b?gXJiT(M%EdJUgi
%@eGg$Xe#2&qQ!HWW)>k&V=qla@^SO&QD+DYEm#,Ub_9Cf^M(['-7Ci+FQ+G7G76V5Sno*i`^&MGpeXLuT;3rrMo(=\*gLap"th;\
%/nF7;N="]`YK,mdFVcFb@Na9(H9!#rPGT#JS`XXain'(ep!f,3XsH`MnZa6Z4Xs1@eZ$L7Ma>1!TqbtU9<D.K/%,h8q/LX;>^0L5
%e`qqW152%GUXnFF8AE3]XfqBLX?][iY".icd.6d&s*KMH09/aD-m)C@N5@hbKu*FSdQb<<BnV4iofS1EMNF[F%`s%7kIbYj\`jhL
%(XF,Q43aM7-$-IK/GCRjq^cr.dWKfF2G-"'j.VN>?9"5%ioFDSEVW>(?t\Tt!N]o3Zc)]&PaaXCk+UR@TeJ'lS2h,ArYqQd=gLAb
%IH=JBgmSIhOiWJCR#<,Fo3cIAK"2_TY^%cYO6,N/gcUmla)\p3rg:#+bJce[C1=^gI0QFVGXtMW4I>dAngfJ3Ki7liD(j71A%Zkd
%l&=&Adhj&q_p:(7%%-u1Th_Xob5-UQq1M>@J08*Eb[/(cU!mbA$aoV?*h7&]\UJ_Qo%R4SIi:a(Sjo(NfdXlp\YV%7gc.:3Z+-Y#
%8'$$..T7eX'mPel'OKk,JNkbVa";^sq.D!KDGZT;S#`[15c*EU4-`,gpNNB=o4r?1fPm+\+W)<99YK"l(N+n5YKFBE_asJ^UW,EU
%"t7L:O&i0(<[dg"`Bl[)lRP.\L34C:NYP49@d'=RO+r?($]PIRLN,R@%N>A*J]@`0mUPV8bI.%=]VNpFmi09?Z4/n<DjX.pBD0Ql
%bUmkRSt_(&eS^b^RE\`l8^dYo*9Ts>`_<&P\/6`NBtG@=B-.UmHoP*JD8%-%L/`/d=`.SGrH=^=fr7lkEVOBM;Q#T5b],/nfi^DO
%JXO0-@@:5g*!_>D))@6$(^/`,iS_-X!l&M;GQ$[7%n]Tn[hIZAcK9NPeksY8q:q;8(\:orUTbX5/fuSJ2Ns``N&;mpT%$GNT4I6[
%9"O9as,4-Y2a=c+$g0EW,`\`K4;Q$U#M*n29IJ-P"pN&$9rX(%@V77=O-?K3FM78"p<&BFl`E)b(V#nlL67q?0P$IZC<b;]`2g.&
%LIrn!NQma?`$hf+l,fpP??)'pGhImqBPbQWpFGi@Y`g3b1O(VQ1ld&@/c$s:Y0!Y)(*@1@-=-r'o\'4G<cZV?N#!d;R9rcE7cT\i
%Od+-r'P]M?Ep-U"SX;AslCf]fikU0`.gJ#RDn*sBeAS;F@af")iug/J<bWlpG:`c%noscFi29W2P:kZ90&s;sflF,j.273C+1>Be
%9Vok1(9"b\95W,il,8COVag^[Sh!JCI2.0;Y=G%r`ppKiJs/<LPAbR&=O&A;e]O4)Y>Q!sXkul`,RgP>-,`)]ntdRkLekTT(?`4#
%^Mmc+Ue0<Dbfr[kj[piUNh+>fk."<lq1TYIQcU$qipGP=#ka(8$RokU(D'nbLiZ@O/2]%:$C)]eT.s.cNSQ3DA*S5?Ea1$ClEqIl
%;^`DCe]nnFoO49,Ku`>q`gET$s#cUe=67FK4#+UJHCQ+W51,,NXBDaH;9iE_>^/)R%_Z?X9W;"2j3M_`V-A%H=N0bI_PdX/^LAIk
%a038U=<i_jX^$j^`0Po)#\N"([c/k*7#?Q?j9IV"&DO:ro:79C+P\c_';[Z]4&P!B.5uBR;<#gH`%0f7hMMrh9MW0UR6Q'Yn`FJu
%(M12PU(h6S01m3p-Jg;uK]\<V+ADc@PSbRhHnWXW4Xi1p(Ss+?HVq_2?nY-B)4Z)L1Z+*G1&A"397'Oq+>`iA1#Im%l-df@o/Y:0
%V^@_&9o0(Hm`Y32D82Rd`;DBDq>H"+*l1P+?^TP2amqSE-b#VTRR[/h-P&5P*G79;OWLQ4^"FtnF1l`1]k5U`=pu%fp"EZSc1Tdi
%kd=ZZ+EMaD[bN_^P<.<1F05/nenT8=D5Ni2\Q528[K!U7$a0i,h!uZf1b,sO,kt.e!7&RIk$mDq`@(osk$g.`UHpWg0E:E@p+(ih
%-aRcBnR$d"B07R;[=f9)X.gU"6*/n"Ts@Uss-eDE54Y6AZsDN4&n5.u'#LAmCC0k;3dmq+Y1!o<);:n?C>bPLlOfSc956kb91.jN
%eBDj1RGUmuN(UW]o$>Idd8(8H0j_aN['R"_.9(IqW6OJ$0@tIes1oX]-I"D/NV.tteEl"PLX*iY._k@^^No\7[Y92H/mG>W)tau7
%e\+_:kL6=u(Q=T:BjF>gWSAh+*Sbm.lm?AJa/K>"JK.C\(5S+5],\54-9Mqi1q$d>"qIEtm)),J%u7AISu#Z\$I*VgU?]5JaS]#:
%jZ#pmC*BpEl-.7W\sY9-Z2NjB^XOKgDN9@fjU<$KBj?J(Tl-Kkbs:laI^?`e3t$6[cI[R/lbBd1rl[*V'jt<OO#brnZfX?5&!P5h
%I'3fIkA.fH!Nl0dmsNB(>Zf8&I-Zufl(,$R:1AT+?h9hlq>QlX,+P3Hi]Ot12/48R'kXRCo8G6g@GLa@qhgFBYLkWgnJZ:7eurR:
%b/NJK^=)&YlDJ!ge:1_a>,?UqdA?sq7GM#b"1uAV'0L,(e2$\8`MKt%8oLXt9Y3,qk$Y&AA<N50c^VXU>:69-Y>Z-<5-M0i<N]F$
%p3P1@Xk0%rg;qfrH0T3D;J5SkIHRT9H0T4;3r;^Kc=4=boDI:oSL*77=E?"jY?^J%8%mF(2_@>;EUfS?"!,-CJ&TX]KZ]<89p708
%>J:3U)XH7EXGdg9P_;g[gW.F?2#JP#n7M+W#5JM/6E&imA+MTga?_N6)oRQM<Q9`#0Tt*Mk7NV*V_Rd%,Pa)%\,W#+dQI%Tk/<0M
%ZcL(Cb//,sAY+.7-XPqlQ[.S%Sp6YN?KR*2H/dqXbgQtOK[1<&o*!JN#BHb0pSlF\c"?r`k3eYId54RFqVaB)"WjRRRdS?GigcF/
%oZJT@*6OlFb9e_#p3r\t16"GVl?Id(`-(u9`d9%]j(fJF^,^E.0:@X6?iRN,-77<J9Y,56Kq"G2j#Ff-Bl4q=bT!$r_g''9EoN)=
%r!'$*U\:M:ef3iFq<^iHgR#q!VQ&sH_i$j\raYs"cECKd1l[r<`_PXAeoCC#(SK$6Z]@t.l=X`]^Q%22rDH=dRi5.mOaWlW*qLqB
%Z4).#b5RuK*+HR:bD!qeo6W#Ds2>i5=-U[?"p:&I1UHp[p,k[2\Hkosg4S]OoLHG+CC?IY2_ME`N&\m`q!kdYFUO3;SJ>SP5UVSq
%0h,4h*YNI_NM#5uU6iof?QhSY@n^D%2-Y>7H_/9FBErdRa-_5lEb?MU&I4):*b3&=m6$FaWG6gPa-c$EVBh4R#d%Bg[3'3+T?T]M
%G1J2YgP*eNH9'9bAQeJ*_K;7h$VJATab?_aP2k=a<9mNXBG1?&F[8L,n0H?,`2f5.rNKRF(J!S.qdO6'4"=<@9i,3]Z-CWImt_q/
%-K&En]:_n,/O/.b^N]TZ0i!Z`:ju$er_-TS1m<.Obcfe>D3=!_medi;)<7!JG!1l_=!&M"1ORqP/9?!cXB4F1Cb@Uu9P3nQTK&O]
%J+20bhj*ssl829u'r(AC-3\&MSrd&?h5#f7oBS\kT>]#SU/Yg4[,EMN1/kO<.h4<J^>1:L$Br6XX(S/&7bplp9c:_AJjKki[BFYp
%VJS<o#gL_J6B&T!;n&>Pe#@RDWD-&)HQLB/2e'=B3c?(aNCR17dG-jQRn%PkBPr4F>RZBu*mMqr1cL'A_e(HkMfB!<4J&%DGV7"#
%c,7);3&_B2k2G+"Yft"q(_Mie9As,,A>U]D>7iY&d)A@]njC"KHG+FW/As8fo6>-gijfr=NZmO&nk!KM=aLAu7Y!;0=(9=4MGK4,
%W*aZL^bfbZ)7^l"IaR<e?B?n5A9<O\<V\-5g1dB[]Ne6':q]^SQJ4XU@\qXZm@TY'=_^rS>V$]_n_pHEb;&OtM,k[q)!/SY;^k-k
%D>\$!FkbpQ&i7!M4;4h"-JbTq[C_`:1EenqqCVCcN)QM$@dLO:FdcrsU468r`:IjBMN8.Kps3MH\mCkg:bDCiL2m$jYOo?/qJd,5
%1jB2i,#ht3.O,ZtDQpt\c^L$(9YK"l(Il+efGCLseqe%(-I!Iu,gF2K6c+Xf"q(A\=$*Z&27k0TKo[87@Oo2[J&TVCLWYY1IEIjY
%A9Qraa=dM<JZoRO-p9GQhHZTJc[sb;F+6.62*[CQ)m1s4g,g/<%Fk,kQ*CLs2gP7BmZNXa=.0^kp0Vq;VUd2bqa>LtkeH9o*@c+e
%eP=M.g=4g!h;@SLq['a2oA/"3W!QoMN6>("YCpNiKdJb\\f=_I%gOgQ*%L(DI\AkZ1n-sW>\KGX(KE]N>6%TuQK-'1W-oq>r+:sn
%):-TgdJ-@#2_lotb?o7N\==MYheuUDh)ND_VR^]:)ooL/r"X[MGe84<&9?cI@iUd3?aGa@QpI<.2E7[2cgO_[dk`)\FVIcr&MnZe
%ca=RJ9VYBDP>Am:oMn)]oc!c+T%Q]ejOF;h(ZShSWR0U.<4d:lk*W,Ii<`5,U:tanf43$3j64=Pi&"QqBlQ-.[+4SEZ8UBN@Re];
%c'Gc.hiTYH6F8\pa(0[,iat=)EQu?@'.YfMn+e7C^O7#^eqJ>gc.4bg1Ujp_#3!J<l`X[#2=hi3s1U[QEK5!Q'Z/,egr,,4M"<Us
%gn>dq+MBl.S,%)GQ;To]aUV&*U2[_`)M\`"Oe'u80ihd$iO<f*Fa^+,XA/8V>4GuMe]99r=jflTM-4JtXZ;l1S'An</$nkM2hu@.
%K6m`]RY=r2/C$lq'?Kd\671AubX\/5jN#Mml%or-DL@maT)/4@VM2LlV(.bfUC!eP_RZY#S<aoYC"m+mRmqA78!"df[Y8mfX-L8W
%+Yh1Bki>aW[SO$pD':D:T(^LR[I>i!rpd#)^U`pErCVkE]uMdod"##jqPg)X2`n."`,;8L3;8o!]k3,@GhnDeq.lj(WKb`*?<'FT
%lLi:LrOZ"@M"l7<0p,E;+sd#?o,CLF0g8u!C4qL[RuM;4KVn;>n^6ITRbJpu-\"cHgP<9M]LCiTZ<%!&j1c_#$`R=CQLGm=-I-m*
%>TuV&'[g?;\'QU/JkiGtHSfL]F&=@;'!b&7Yo]!/<FqJkWu\VV`QO`PMpknAcmfk/\n]eLrMqI5r't>%W<t9hW+2Pn]m\fTlbo5<
%r`'_5U^:n"HM@$W5IA?:qY#nV5A4dF]8;T@[7'7TqXFPMdXOo'+7ba@M-^IqeJ1jE*7C6Wh(LV>Oa*]QI][]$/[!*E>NeRCO+Tc4
%ke/<4O8N`L1A+hM;f7X_Ttg.MYls4c+&NLWgs4]!>@RHV(t,3@&drV]IdSl([T=s'4@dU*:/iV8[pSK00_39BTtq>`esS&C\[%bV
%gUXV\/)/saC^i+#[W?"A=130]43Pc)en"_KAc%VJKheKC3NR$-bLK(YVeicZSn&[`YR$kF"[Kjn8]T8$_B`hWT'[Ho7FQCJX/)X"
%gC/$pTgERS\IYnlT.9<IJ?pK2=t,[T\N\-@?`<be[P-%\5E.nqKoZI<^X[5mI]UkR9S%Ef"6KB/q"'RF@MG(CNql^`olFAQ'q!n"
%0WBro;cnd.=8n9!<jPUPqa?[d+,+n.,#PF#IO:#m:rg9@?g2V?.@m?eY,Eh^fMD5Ifd57pdSr:rO$9-RSh4++(UIR;P<U,fXIdun
%B^5VOo:Z95;*CjDBC!N3Q&(PS[#*KI:0%Gs=<;tcAbQKB9)V9X4?AU"KtF>VJ#euAl=Er7qn^C>.i&Xj(*;%1-[ul"Xn?Ir/#Y.N
%\9@\_4.94MT2SN8Ed+]oe=goJHL]Fup2Xsj8PjMS+qQjgfC1cro`n<m/FgrXhgWPs`'?.ar&0u&T+g>/7A0r6nOQNsI[=0"&SIu]
%c3Q@1$>Y.1<spE<)%7$<Mk*n\?C_)hpKLdBX]9nP#THBV(nXb,%CnL3r[c^:4eC=>jjr+G$/k8$d,_<$\MuZc>k`o6'W,Fh<Y,*p
%jU/YMPY9UmJ\`R.,pu$-l^m&]D-Ik/icjA%H!,`S&eplB$s/,L;WJ\t_eY;db>CqA?Fjhu/]2Y47I8_QbrgrW'7uSWP&V`:3N]d4
%h:V8Dg3_*8q=QhbGVI%#-H<B"PpnZ*V3,A\%+g(^hF*<tlF.-Io!rXH0]##8be903SAaEt:h^,JJZ,Fr^0^pp^'uqPCr8-[#ZKJD
%L*fitrDdMOQN&lh+/s*#')PD<jZ!51'1`&Zm6n*VDAQ'kQ#ccb&5HKCS+e'2Xj]i%/&_(/c#:aJg5/XJfc=mDgIpo0Xc(+`U"/k+
%jo9<90QH$[lBP-=jQ8^]]hZ2eBud0HclF1^:8)jf.@g9lrHb6f#Xi]0*BA[/.5f7><QJ.4@_L2h+JW_f)hh1hf=Rhh[EuK)KG>uu
%ef_q9NI&2q];b0cWme+pEV'L*@&sDF86ja2`QL<ijLeXai\R<FRHRU`qh\6^^rpsiBs=t2BG;@ADln&f;^mAjC?_V`G00"q$I/9Y
%^!J;Vpd)<@:2P/7:(NV*j'5$Jd)7MV1rOEkRL\rEL^$i[gTh6'FK^:"o_mE0$l?XdjUaW-2VdXGMQUg)=*3(D*<[p,8`?%kYYEBn
%XmeoT?7T!pe9'<h2+.#&$"HW)%,98`a$l\@W=YN:HcE*fY>W[3GK8S1/&s_8Gi]oIql(-FenXk9ZUO3ITcT:COFaN+rNoB]n/Ioj
%.me\f3uuij@HH#=irL.4nB[ET/[4\&EMk^\Yd]FJ::P-.n+J.eQtF5UZSC[f_6sCSU7WEgI*/M/lD5nCe.QD"Kh%;..G+JcS+L;\
%;*.aa:huC2U^mf`6<Fe*;GW$gI$^i"I&BjK<7kCn2A)7(*Q^\I^;ZdQH!Y/_oppE6:k9C"EIhe!Ug'9apRBpj^9Z_TNt@5El^5V(
%nWJ-IVAYO-ALW/rlV7Hb-F)V2j]AU!\6(1=8>M>+q3se;*"4hiF5\$3etssIdA2sG&t9[3k.;ec(Tu3mN*uT;^Y-C088ApqM)sJ3
%&Gg)UcdOfJW*QDl#-ddKru'4PP;qnccq>n*93d=eTVF-e=2V)2"!%oSN[!sjkjK(s.A_F#ZOu9*HA6FSr3p#VOZ;sE1FfJffbJgb
%N)Fl]X&(;q_`_[W%;i&p%d'Af_R8$a(ol-DQUp32%r^<mX;7S?)uBg`C`R<a*]#(a2<I2I:.U93a'HGZmSlRPIU;A^QC'/R3(P38
%!H.sa+pC-W1YH1hiYF>3Ll@LQK0G,/._DUsnutn@[8Fo'HE,2o6@'5TUm&+\<f0n':osN9mL;e9ou*$")P:1]I3#k/Rka.R$XZ]6
%rc053-4@d<R;27abnHcNJehC6@HZpbqIu*3.9%dJ6P?cX,PPT*THlO:kPg#$%$i4.#*.e&V4+45Rk;D#B3hYmg:Ago:5L`mMt,0*
%(7PMgfn;%^mfkh7j;7L<mFk]+&[H-&&UMsJ:Wr-?!BPWs'GE+V33QX8:Z8G*cd%\/Pn5p<,Kj-rc-+[7q'Z=;2rA?FV!ckol3Uj3
%lUhlQ0X![(+XD)*?+&COA4a5K;pq5pk]Tg.Pm`;S=-RQdWoSM,C@OgA-sbT->[Qc]N1*X"c`5c#KVh)9hn[k9XJ?mtKiBn!WHCpt
%[,"S*qbj$&9T!MlTT\Cd0mKujIVer1m<W1#/6=)SoBOcKcqn!'8QmA/PND\oF+G0f1h.tSqD47NP2"e4_/ZD\MoZ\+ETJ;T8!iKc
%i"_7%e\-ai2)eWTL_[E:#JJ`&\<>`!T@^q'[XOL%4&m02/)0-Jos8]#3__0UAkVEhCNX:iHjlcTBdTm/O\oYO@_G7[hF=g2.QgP7
%lXHFUriI[X2bV8='96NF_SmHFGt'^lU>GfT05cb#`X^f^RTjr_T"LKo<M<et?"bI@nO6F5eugV"f/8r(MN(6uk7nn.(+Rm==7S*]
%C6pH!M4tSadY(U-N>U_Q"g:7Cc'D^(n8tL=7^6!<)s8URk$h5@LBQXpZGc;#Ek<\c8_k;!Mb30Ni>^-4<uBr_$5K''`cYkNb*:"P
%\ZT0n[(5b]IZ`JH/Mp[59jk_#&[F8K9"2]_>us"%C19.hTom8Ah&AqE_VpVFajF7nSLddDd=/AtUNonD?)dZsY15Q"b+oV,>:i1N
%QQV.W7U"l+_Jd,&dTah^IpPAAm-7ISE06g'L5/Te9Mb&Eeg^ag'tOZ?lT$HI\gUC:i*So)Pk*SMf$nA\4aKN)2c._Tdf"YSP5TYL
%*aVgNk)ar93K0o2k>@@,<'b(:6[?SJ\a:,r3ONX[P/4cA=6(J3rNYpLP4_<7.ZM=l>$"E_QRI!ZE-A0J9BF'?+<B#Je8#[#")V<'
%Y#%O@MIBi$fNG+Q]Sa%++dJX4>ocjbf`DfMf,)%Wi[@jF0%WGU?n7f#c=LhNg%J$f%XF^NUD\4dUS`SL+Yr@p+\)q`8<4Oe5Hj_,
%H6qnEMf)qT++U8@nqm@QZH@nIKIJ]8aGI:ih.;l19T6,[S_"9B*nC[XisR'LDZ)44dn._I8"H=n:q,4'3F3:(V87=G\QqTKL^jfB
%q7@=^Q5^Q'23<FcPtXQUG$/Oe8JcJ`m/_fVf.I`h_&oObGbJsskLh95]%08Tm]iD/X%XJ&TmEIcP@OPobSTs$`1HlUS<%`]rZ#@V
%=O_*Wi(=FA):0[8%VV"db\V40<gMrIiq##<b\)855;$dm5C'VBGdmUfGdt5GhJ@(00@nEaG@'A!/2'-.PRGUaIJ_:\S:,<mo?Gk8
%?1Zb'cDO1ES'=^Uali;%pOP$CH^`O.I`n<9C\Kd>^Ean>DCd_MS#r%R.Wr).^2p1iP^:_PT0Ih=ZajN@LRI^sVo<I-q<34)YFX*g
%lHmZ8+07IE[bBDQT@;qXQ/tuQ^=+9$BO<;R[I88/=nDW4qHN(/0m/[CdpAP6[W^QucCDAI5CQ3FAWgt%pDPZnp3C`>1B2W@Xd,t?
%AX=K\ndAZu1[9_ZQ2c09f?'V45'GA>c-!Z+Zh-[JF5_KXI2)MR0O#5Qh`!Kc4Z\l<d@a^30BZ^-o^1W3lum+?:3snXG!C,ZEj$ep
%nZG^R:cI7?Kr&7]BY@`n>aQo))lX(^_km"+jf_=HR7D2d)8Ge<l.[$K0%Ps"_Blp]QZ?_#(U@hMXVRF=q>T!Rns:/hFQL?F7k;i\
%:S$"\iPY+L?u^8d`J$V6f^!H?Dl.9g8(FF`]BcLmp!],1j/f]7N)[-n/XA$@7(:9Ip-n:!;9jIJ43*(V=t=5d$T,t7pW::pZCe9Z
%qc/Kjqjdt]RI,u\a15d-_SN2;p.,#:;^YNDZF'/1oPmSi^%[rLI9Lt_-p=s[hnugK[#aV+23@*;qJsti;%3<0[%iK(pNEmDKoLl`
%4%gZakf1UQ?aph'6JZ=QGIL<GA*I]V6[d]KcFoJ(1X!>4Z8MTo^.fUF:0W&@1q0Q!T:J2D%37[d=>,)Lon@%b4(;rC05UmK:oX)F
%mLVSVL*.8'*2&O71<d=ncCQ`#Z[V5.Bn*A%'iRWUDbJcieX,07Ku0V^C&@PICN'6h]/Q_&9R8pMG$+aXq>Kp=3H^NDh]JC[Jpsps
%+*&`<l##.%QeKVq^E&qWb2;R9os<q9o6f]eYojrKrTZ?IV0]=4p[EP&ASQ/Hn]Q<'Z1Lpl-_Rj]!O+i$OaOk7ltt^n7-U]<(,jd*
%g36Ic0A;t*j9CDZU-p[Qn!\HPV@H1Lp+eUBQ2=C(E3=]HGa?nNT/I/@K8m&Rq(2'Wj5m+Zh>8re?i@nP:Mqj(P'rp-ZoUl.?kXm;
%Mk.!"aU>q4Za&"^s-d:SH^RQA)b2"B`VX"#j@K+r@Wr;E5JQ]lZ'`)+%k_or43;l2?V(aaf3-cHk"9%29p2[E6UL4t@cmS4f5fH#
%D[o[j#Q8md*ql4-hY&gUG:U/.I-O-pMg+F#bYU6tUYX?2.@[5A2SJ_]12=I,1fSAY]lQZ[PLDC;bM4+MTD!__EPJfNcWVF_V5IO)
%E>Yg5)W=[YbNH0sPI=QdhQlQ@MW\oE\_$35f>ckC[s"a>Y12=Z;b%YmmSb&XQb!V_Em+,WHN)l\o.bB,G4CBgI=@QlQZb!Gl<MQ)
%4aM"pGj?/D-0F'uHQHjBlJ^jf,9ssKro>*lrR^D8H#]@#o:Xb$0D@/CE:gEpI]KPdY]f?c"a&3D:k,0UUb<N&jo!,a=9to&%gS.'
%@Btu3$)qg9ST]#]:VIqF/C2,8@-E<QF%ui0%u1M%?^K?Q>A'bHMta<[kYsaC%_oa!W*d6ff?K<<R3WOCqNgcicGR$acoFZ<G)jf'
%Y?Vo*N?HcrAo[43S?fAlY.ie<[[3sRcHF'fm7$p4VY5&(R\P@tdb7>k9$)!)hEUPogUj?d.r9rKi]PICcqV#`6.L@nE1RANI\Uh>
%hS-(eWWt].L1G(Z4I(8:5i9:eAJ%qPTt9Iu&>d5QEAuG7?lPfuGAFk$/7m@NjHqV^DM8;2h+15M8ITAhI4/O(29(Qd61mMnFU((^
%lct6Z%^d[hq=lL?rC)'OK1`h&7fW=P$<*/c?hgoE&9?fRL^90>+!/*&>5=?H&Js9qcW9]9hK1LWAtmn:IV11((CaB0s7eDn<?FY?
%\_`sABpa=qp$a(n@2!9W(^KjgBN"f_pEt3<k@OjD>eq@$md,VslLE%O^%_j#-Al+B>p`$+OV$(l*(a4DO:^!#L-;7?,#4D&LYXlb
%LD,hOM=AQ`ID)@<g$?8J;JpeZej$R*HtZED-XoK#N06k6K,fPIQ2CETjou!,9($J_L8k/I+rB7Gmd0Zt8U3GEr":gVZm^SRd9*9n
%qkCb?Ht/CkLrAu6Vgb9-EU)cTb?BAdOafc=^mQ7P+'ts:f(48:s)n)7>5lh-,g;_>T<>_U#I&6@r0cp5k4-,DkF(n-PKdA&o(tdg
%gHn)Ye_VAgmY$"NV.1!Z&?YUq4?V-[q9%\QknEK'07N1(]tS_b]=7V0d=R^qkT"uk^3o`>*C_K+ihm9$ftGYJ0?mET\!>4<kjN,?
%6]8?R>30:)j_MRoq!75$`K(_3^2;qgb=AUIHWa\^KpEp2HCjdOkFVEQ/p<moFM&Z3P]uiCh$ZYq@F'Pb<s6<F-!rm#DVItimnBai
%;IA6CplrY2i'<DXDghC._+Ta.KcR+A(qdeC>QT,RbGZpV:'T9t&b;:3?3K:hP0N0)*o9#h<,U0s(MWS^H_fpa204<Ra4inup&%b^
%A_MT$4Y32%?Z1C@S::FpF.6HHmDYB1,"NFY<LEZUg+SZCm;Gan7l^\n+J,$R<:.6f[^'t=g3`FSfUg#\nn;qeULF^)d\jPP\17eg
%l&'ogO^eLYVAC9^&(TR\DI#Hq8^:X\+T505Dp.OM`naS>>?Wsmos_Oh,)4cqUm0,)lEIS)7+KVuMrMRZ4alqH*D_Bq7ur(mf;3ae
%E^9YDGqX7/l-:3,puE].J^6nS3!h0u^>*"g5\9u>ljClRieB,N9Duu'h@En`f@EREMMA*Vd2,C/l24$=;mP/8PQ14Ln\'=Qeq&)2
%&%nnmq.og*l:9GTm^u**hV[,?(Z/;$WM+Ll5=iJ:Fnc^qH18`A2a`_<r_RYg4/_u0:*WopC@1iAJZ]+F*9d@0];BJWS=/8N2D<pS
%CV.X5\;,4og%nbQJ/RaubA;qPheT$[Vp.t?'?b;tGP^I\j-Q">rc4k4_iaaX=\d(P/[rCG]_g]6rpf!R8ZM*D!heXQNQfp=5(Bk_
%k5r.3RiA84C7E8IQQE;8/01%u)LC;.h*\c".+Rj8-2XG4poED]@D9:9HRaqs-+U4eG[dc/WJ>:&3G3E(,TFEZjjdf[)@=?LU;ct3
%VVEZUS:4T985;VAHY/qm(tjF9]<C[b0b;4T&6kQh'eZd=gcM^4"W$"a[o4s;MisUR-SJhlZDFS1*3eA<>mfbeC"^`%HdXmUeF,Lo
%b(P>i[N.T;f)2]^I7:1!qlAsRnj$$HLGecoW#OFQX#KJ0grYlf+)1N5G;d46^FXJ$fL;/(8-doD*tU0>D:kNQh!+*ZEkc8)qYMLm
%pr\9YSATnuNcuFtrUsJ3FZ,2KTDPp<H9r[r3cr^$@]m5:I7fn8hJ6#Ca0,%F<<'tOc&H@S*bMm^jc=-AmCQoop#H#BeA9O1*cgj[
%la)eh'W#EoJWU0!a_H"rj3D.Z+9u/)FS3X^eF;:hL\D>N-he[rc^k`jdM;NUEq[JhiW?_S4Y=J;`VG-ZiXG;DqUthbMhk\6191Y^
%gsT^0/8Xc/?]C9AQd*#6g[/n14#G4FGO5#u*^O5g3_HRIrV#H8[f(2]6ab<!\X_:-rH<@m<ds[eQ[HL.<'L3Yq;WmaqT;r6eBRjQ
%qSuB5Q$W>[Gu\,,)^r#[Ip'GF]\D/@oC[-A\c+mVR^>KJd)pjpWjX!66Fh#?AM_7tpKD*3Ft]Y<o?;ZmQ$JX?qeUdKeCmFac:;oS
%^E:frDgi5-NN+EZ8JFA.'iDVm&hsng'%E8Vr?VFAq*qfuA+^gP23D86h8u6/I][8*GOJbShr\7Fp2mnf`CN*Mi4ZgMZ/P)AXbtWb
%>41M7HFa]3bLP6'(,hX4?3_Bp1Za!:]ulpl?WV:jr:\#/P'Z#SO,h9tq!pUK^Y!lAU@kidf8JWQ5P9b,_g8a3@[3ieCa4g1]ZX:B
%.-5[Ylqa3`cX+(gUnuX=j*cA0T1OGpcY#/^&"_[.,.:G,l=DHV8F#`Sc*p3tL&=EK*?#FPja221f8fh$9t/M4iDaDW2`Z<V1!^[+
%df)[?>c%JPho`r>A[f8CeCf-XHh73RqYT\s)5K-2/Yr/K'9@Nf\G>jbW"WqDWVrQT9cfO"2V28`]*ruQoWKM:DSDE69/g.erLVHB
%'ToP]4m\Yi8!VU4s3'#EgqFZ'aRd)?pA(%U/%^1tcYY5iJ+/1Po)8<)Fml:ebVZNlOu^/P^^el*=<OGQ4s1s8BJk-[e>.=c40+*(
%EP(o>ldg^dSX5hjHXGL[Z[+DF_7(K=dITdX%_^%ucCPn:0acnZGRP)1\'jrlhgbC&XQe<t7<\"]"/#K$c^(!RinG!GDS,61L$d;C
%!mj`i(@SR.`YSajSY]YOfNfgZ*\T(U<ce5,S>E?+WBHA%-lRSY\[h7;EA&l-JTjN>8uj+%C9?S.p<ts4/nM/tHju>a,.c`24Oc$0
%r@$)bh9GE<E^d#u?*>Li,O"eKjW*^NBcc."Vs:7fKb<,Poj>;*g/oJq8ipD7>r'L0*^..L94[q0?d6hD!U/\5[5Nm5;(\X/cgn8r
%[D$CdiqoU<h0e)S*Y_q`_pPe:2f67cXRPdji,UA3H1Bi^Ld5L*5,TpVk'`7He:OWYPmQVn#HHflD<5T/fu5h=X4Vj7W22#0`n,c$
%5K%7Z;gt/seM\J&rHm(j/Up;k$9m#tmU<@j9-)N+g=bT$n"mgN]'ONoh.LZ9RtnQ6?2HEH3d7%gS9saQcia+Cr*Y;tl1MCJ_hSr^
%J$XJS;M8,U9DU`:j9\=8=#_,aa18%[7nZ7f0.U+hHb)l@q!pUkSPM^t:#0o<5Mk1oj;5]DqI")oUBM47r&sX$kC$nDZh1Wt_<WOB
%W(panAE!4@HUKQk<m16g2O(BaPffUt<c(a%G%K-JGFhI<>HKe!dT>uI036qA`1(LWh-YM2-*.Um_d,M*?=iko2>"5Lhlf(&.JL2h
%*jQ?YIQtIt4=;M\Y-"==r8sXrY!:47L2(h^R$i#WjnLI@6ZU0WoD-XP@eR^b;<`Bb[Q-*T8g$aY,p#+ua[t1<9cYj)dbL?WY4ZqT
%4IRdDm[g60Q/l5\MY7%6OaX8*C%JW0ZJWClr76"^AY*Ne5*kU\"M;:Vn_3c$IJIpDDKjo^YT!GHI,SLOF8b\Lnjo>'9:ETm]gtcq
%_^1`0ZUX5Q@NG3BjMJORf&F<Rfp=?#ir4;h7[/'*2?E/oE/m[S25KULmq&)$cRo%^`cC6@fm`erEK7o3a5?J-q4_?@Y-.&iWB`Tq
%S^p[na8WuQ-_&E;/8n"NOaPG6LSahO>kQ,80.X_pkZXrb4Bg2AO8%+g'lgVRm_cXTbtU:UbQ#[.YJ-NMnm=V*0!Kug&I2)^[H/Ws
%-R1b4)W0d.BB3lOjd9Z[bsJFRHJ[rP\\9E*kZ,'KTm[l.mCjm]p.L0Sq#1;n\C[;.YDUeh;b(brUE96DbKXreKREI&0?jeqIm#-J
%e^.JKD<"V@PXoA3V&sOoAKR7?M]9k.?`$cini#3K=9^Z7[9Z"2'_R(b;QaAeI&qEE[J05Pem6VZK+`LfQsSYr>N(':0-&TY+iI[2
%I=%(%H1c4GbI`ZkUjH/!8!O$g^Y/MZ9duR&r25[:k82n=oj#mN[*lREMe/fprHa;&p;&TZC[qXPo8e^.msiE\]Q_]Nk-;0(@Y+*:
%jn$u![e8;Prj)%[#t<2K'RahSrXQQB4FR@B3F07EP5SX7IkS`Xh1doe-Q?#*eV<TTF0SkOa_k08`rg40VSE+P0>I!3m:'u,5:kDR
%,j<FEgKbgs7Z;*D:60Er:JLP*r;k3^o+G]IK4N+0O4,a%8K1j45<lK?.t%<(S>n`aZ_.9/n6(NCI*015F/JU7(c6^4AUSpoq166Q
%m`d1hj6)]r8.;Eg`X<4^@ebG2eAJ2'T&3kdpGpg---JAQb3^g,,^i>/,YLY0>k.'"C?j']`dR;Mmc/`ar"tPQNU8`HqT1CiUPiS#
%U\qm)^"n5;qsUh<h+at6LC535/!UU:*iM"2^N)q#C=a['-gkX=-V)F%FVe9KA!Ge&SGV&hV]CN$i<EkG)^]$\9o%&n>r@KAs#`F%
%W#`-/d>Zd6T5%\X4JHa6#GGW3$V)"^b>/h@I\M8L-e,]D7*BN/!p3PCa+[knZjPH&ROHYuR&<B`$!>Ff[eD*U/c=8UcPbL=P>&W'
%EPqG;QE8]inBZD.dATmlH7e*Bb4p[G+WESbmJQ(7XHs3taDuknmP[ldPd!lK)CkT?17sda,Urt#mjE"R.5Vs.E`(]Ne&$`W1uRb)
%Q4Lt-)O!=breQ.H)Kl"[2kY1AdA^F23qhV?hLlGjbg^[<=`.KN%mQGGI%f(Sp.sS3r?!b+>[G$A^@JLK:j2>_LT<n\GE/Kr%cp*D
%eYPeK7CsMm7uY5o8uP+mZ'fY\FK"hh&KJ4e[8Lp=G4aaMT]+^QX^8YReuO7c-;WKK3d`[#'tq_ITQ!b"Xh?BsZpXZUf86P[K.i@b
%4Do<qaCquW[^:g#+=G,S;eX7aZHD"`/%RoR,e[p[O^T3,B2b`$m`D!?@nL$UiWH0*U*Sum+8+c-:]86MI]D&%T,--BKqEg8n:$\(
%k:P.E)"b+=/&fAIX',4C"eo(6<?b>>:N]mc09IZaD6MM/P0<?n$(hLZ/ePRXccY'2$mS4]o;\8C6UT8>)A3PW#/gjCcjc#`FHp;/
%NZNHo+FFoS2*u`0]@uZ+$1Hgp6G^<tCuEYjG\klLc9^(Cf`+quM4qT'(m1\'U@]n9CJ@o-ld^-E-3SJ@!ujHl'lG?K0pTN531NZX
%%:XIVG:,%p!6("F2^XQ`ETQ:b=31P4.9[^oikR-f<+u/!(S0i*X\c1=EEAF0*/1Q/Mda<@-Y#agKhkq=eo`qmiET:E:sG7PpTS^r
%WNFe+#N2:8"R+<"+f[sO9F\VKe:-:lO]O'E!D1%gQAG)V_?5c]?lK%lam7#h9,=K[%_6oBR9B\+5D$Juge/I$GXYutG*O7J^=[V2
%8:Jt2o\0Y<Y'7O<$:tVikm!Z1a2pf@ZqFCKLH__[h;7g\TJuKud_O$a&+DIeNm%A=H=)Gu-MbqbprOZ!9*j?Jka"Ye=Ffh0rqXS9
%QVN@U`(l9oE#Ms1XlOE/ZP8MEdO/!t`pqah'n=]G`si,6_6ZQ-,1O4HJ,[h%r[/eV9%q.hKo7Z329Q`'/\_Y=ed.^d%:M5@3f3iZ
%>Z8=)(&M\oh(Y#/ejX&eYaqS`CK@0%KWpuBVHFs+FX(UFR[Mg%ZC7,%>j?,opC-?5YS\k2&:9-3e4dH^k5m+a0.@%3`\!RHD/`YC
%c#s9bAg^;YQiV;:$j8`jo8biDQeC`D_IDN\nNS:Xd*8BKg:G/E[S=c-^:Uu<8uPM+UOPd,)Q)Ws/Nmeb&ci'FQH)7Q1_#9k2emB.
%3[%u(n:g$N/^4I(*%u"=>pRooC5)q%\^\?/HG(*jL@r.a+@K,6*C@Oqoq^mdLP#R`KpLsY<$XWYoAk#R4sSCn=M:Nhd&7h^-Zp=Y
%83di,]0+Z#G(1;4`0sX1ZuXBdD*+K8YT?o1.O6%hds4oqRhR3JD-0ie0f2I=b6:Ok\ICK3=Z2VsFW-8E2Dth.djE>a:m%R,@45a-
%@&U:e.\XI?$`<8"oFO>j]b/Y&DaWR`9pD>H4WW!?&sRJAZ!N]HVQ_d._Fo2#Q0@$K3At\"YmpuY9Lu6V!#-/)`KC4QVUO$O?'<2#
%84nR$,[Jm,^tBJ0NaX8"B[>4G$*nF(87Xu7Ns9MWe4p@k(33;D1UsS<Tu8_ol@=t$ek,-R"oQ4_H9'37e?rj"3A<qY@n@ERL6h(C
%58^q>QkF.K;?JY:/86.;7S'KuVU=VL&;aBHT?/!C[4S$Q9klqn)@Y@V_5E$SZoj]!%;Ag@F?pE$7%k4=kcQ@M=t]JKUq.IAgXIf(
%V3Xbf1.\mjasLgT9:'cQO#`Ni7t%qR/kIaO8l,oLbXq;#9GR_\CeQ'CX?4"pCOiTc=&:9]OF9sY"9WaXBtj.3:CNq#A?&,R`W[sY
%&20DW-s03A;aiIj#PGgcT9O>+WPDaE1-<'ZgX:I/Sg5baBA7PG8E97dQg$,E3gc.D-:s^SL"mu]9SYXI`/W!(a+p,^ND/<ae<^AS
%g*S7S)AhFAOu4t="9t8',.o$#@p,mo#\;pG4s\1R*EAG"MSmn1P!aV-9)MCmDMHe[:<9#i]!GsJ6cW`l/dC6R<V2uiI^Hd6?]C&-
%(iC.#UH'6uOOTu(Ua'GNlGF7+lpJ8'VDAMSN<`q'i9arhDj<,#".[F^Qb([?@eM:E`/U'sb$IYb=UEmqQu5i#dt9-uFV5"I3J:"M
%Y/OYHlQgeFY$1H[iXgVk<^VP>D39'^<Qf>-8Sl_Z\17@%=eLRmN[`=,qH(UW+=S/4j4^N5@sP@,p#,&6$caLtK0cYU8=n<bf+H*\
%.P]%a\tjqR\L.jGJ<l3*]<28"P&QP"fMLJ0-k*qjC!:*3>Zm2dST1AIZ9j).i-N<_i!I_NV*@DK?D*kjDi*:A$\F:_e@]3LdPfe>
%+XJfFd=p5Ko3pWAG"ej/D+Pp4i&SuDmFrtI&>hu:!"qTLi-GJBr['csrZ(aMk_T."bLBe]AjXSlDL1Z##j"p0bXspY_]nKm5]SIt
%SUk;qWFFd3g=#^@_O2V;-NuVFZA!P"`sdL,BjfB1h@Y$l?M2#urB<)/Y)[4*W&3fA%^fgnS#-W[OpZt`L/:F,!5p/55r(`ImE(7H
%K!;C$)X+a_,W.EImfXa7Q4QH*T]YLRT#3)[Z#VZonIhgG'0p##KQ7o^DS$6bGTq^$$JggZ>si?c\18Wt\C<.Q*#1i%b_4J)WDm$*
%&&hc7-1Wa43&5$CBE[fdiQSj^-*%>\@ou2%o4nRBZ<U_Q1=/rr;3N?^,-P=!]Y]@S2\U^$Q6@7lPH6.s8`t\1?43?%Okh<Vo2K71
%61r->G/8h?+g#G<AHOH]k;]Q-Chhd<P=2NW2Gk(uLQ)S!^saum6Q"Z0!TBeX*c"E;FHSOd`X.=5o]Jfc$koKM5,$X5l(l#r#nrR4
%lB4BU-I8FTNilh"Ecd6CK.Jp+Uhn-!RBit*(,gt]1t.WMdXl8OjX<rV[t9a(n#J\T9[?)7CfOJs5]B_mqCjq^5TcSOK':dN"#468
%,I"j]C6FVH69ttWmr;F`ofkrAmT%]`iI$`)G2R.;!MnZlL_!&Hg(]9,ot]C[TReKk2h[oi"<b:9+Md#rJ=AfO7A::uq%"82B*PIU
%6u,1?JcZ%p[9VCT:2W6d+>an3J/+kGZ%3IB2M=O.B?5UmL8%?WTYu?eK=%CbK0]O3(<cn@gh(Qti2W!T6Jl0t[QST:aampWC1n.d
%Qq:2XSl2Zj;K[hgAf@NLg4V!;Kd`Y4rYq:456/&6[4[8B&8DPCmYYd'*T<]%[M^FIE-QTLRrsupmiW[:nKppRKtL@phMNXY$#FX]
%#H0,5<&q6#j=+"<`(>tX7$79RN/K[;Y_\5Ukq8GJjGILna(#?<[&j@bq9u.U6?P&ge0'>QbqclD>#6:T6s>ZY%$"9gOjjM*#\hq5
%no[WDc#G%l@@i0_E9%8%6[JA]$\lrm&m-PsdT?XmEu:lq!YPlgB-8o1&X5,2_9Nar,dh8u*,7dhW%eVpG]!gYEBfp-.OH%PJ<(qu
%C%)KFciHe-n3/r<@oZ)FTjUK:a<NN`ptfuJ8Kp!YGjqHpOYL2tM+]C[>n)EInBc`#b7)ORA8jj8dpjNiPs$8?i.7=fSQR]o#Dk0X
%:^UfqU:^Us9gem`9]8;#YjaY,r!m1(3OLE8ls_*mG,:*N/A'=t&;_t:85Z#(bi%3r$aEt&a<*[pA,_T;J.rX%P+-<H#g3bqF?iX?
%cHo5bP-!Ar$onbT$QoW6KF')(Z3s&QlHfjYj[-P9EcT9^#YBEb&,="PKhJ0g"lM/SnDNZN>+*g'1!hg18L`SKVJ(WN!Z19j,CAcE
%;<lNKDj6I8T2coWh+4*(rTC075aasU*=EH$7%N+^%W>S`Lc'`0'pOT"*So.hkcR9t!^an#.1D@PJj=NGqV\or[O#LEW/Tmi=#fd"
%V2RL-Zt@Zte>a3qA:'EcKn&L2,cT'L/Hp6PD\G1$,fBqLITS+k//"?hO!1=TV)e]T#?S^/`EiYR7bYofQ=)'Q!2g43%>bt%:8uU]
%T.i.piZ`RIjPWf>n3+hpS#dh<c";Rs-FjoI0<@=7Kj7XgZ3q>W(`J#rjU*GTKJj:ZPhMCeO:_K7FbLB)'phB\!_((9G+`bj#p:8O
%12C[p,1*FuL4Zpt6lVFE<OE->L)mab[W5@Y8?"iYBr!e1jkXet$Lf\+=TMuOe5))D;2PX?0:_fg;Z]=QOdNDg#PCDq6"+BCFV@Y+
%.h`-`#osXMdcMroM9<[n$jguG0JFA4.8-ZpSQm9Xfa5*-+<lL_gb"%/CGeJV[!(MpHT%oq`-;:b_.o_Q_TWCbgd*t-`gB5q_+oXW
%i!!3mJkp>'F?CNmpr'12#7m)?*E$>r$Uf0]Ksi+t-a@_=:e00snALLX[fcFLRLu55bU4_Q'#hCNib1*aO<:uUn<'.)?-,nS;&?c(
%a,un%'.(+27ER=m8,FoFr%^8l!Ze'A6/?;FQl/?2W$k-OU*CfsI!`fC[_k;#9WdT=N(t.T`JrYUa_Him3C=58!'j!iYsD74&@p\Y
%,Tmk;+>2`Bkj/>3,O\//VpB5*TX"W2+L)Xp9",K>#Ys1g"WRZT_\d"*X@SK%G!1'M'J1PLb\9!QI%!mAJHD]UFT"*..S]->6pnD>
%+>u;lW/]un(o3Am+[Hn7UTga"^*>ab7,+l@fmuLWXoW_VT0P=:haOa_$Qm9jPX@h/+q+XnP)CJh>ZD8O#9\]2,p=%eFmQaP<0#"R
%T:l*G)a#Q[;)5Co(Q,je@n=nMEoG*.E,HZ60S)0Q1J^NZ6Y84?BW`la2&h]1&@NbQb=GEi!Y6F^HDV<b(T[c\Kj6EG9D5+]at:ui
%\]VDn<!1UO+B@f;;1Z&F_K;VAn%hEsaCafK&G[9*'LA*KVA`=cnC5#p5s<f:*jS\lrT6#C\3NJsg:Y/F%I*e;n:1KoK(sjI%0IT6
%@h[--fNmGp:_"`cC5!(nOFqQa=Uda/j]EJ0*4C&j-(m6Ffp+6s8$A#";d)U+5mSUOhBkT<L,UBg$##gVB%nSJP''<`CQ9lYfPU[G
%*B6R)f2,*o*+7DSI"K\A_;3U_'i2Z(!-=U1l@aoYZR5i.,-T,19,&Wn:3K=[B_#mAVG9XI2$f$ipfi?"mfI>9kHJ?-^_pZs1R[r=
%OJ!q'.Zlk?Lk4)8l*+%hO&rWkf\kskVaec#:0?%gK@YSRQKHra[7_n^ZGT#/';WdD=ZdT?8TFM5H/+u1Z+>r00Bi[6$D-X,1XO(D
%8jpe97k,A%KYp`Dd#h[NF&L_r=9Xf)3L1$E$tKBl,GE&pP&YV`*DZr=3&[H=O?bKE5o`TB_I.g\?"#26QNfpnR4c,&TiEM`:3*p2
%@*+k^*HVT@l>W?CQJ#@\5<H0DNQa5!,RA6X6p/Rr!#^Sk<s8?l(=pVaEp_@AMFfMe6<:KWA3^<:"Q6<,*+3?/>WJl!=/?ffr#J&E
%[Rb\k<E=XD<7Bo*$P"m[&4jo@XN(`;:GTgO!$mh2;:'9!.l"&brk\(89e<T#$jJK5L1'9c;N2g!FHNlL<4f/7U8]0WY\c(nZ"*k/
%5W@U%g:B*Q*`'ig@n@ofge7!0'MVsCUkog0k!oct*2LXFKs\)gbNQ4b"l"V:2"m[J]R)3jJQ$^d_a)h)N]"U>'G/nZ^BAR/b@H]O
%R];U).&n\rRKb#"^cpHn(DOMH![,C%4NV<?Y"Oid)cDpM1CZ7J%b<\OR"6e<"&-QIA9W=r!F\D6"Up7LIC=2,P`_e8c:-`_5fg7Q
%WeRDOVJVeg:#1u2_Q4';AsP:j4?<^&#nS%L/2E;,G.GY8Ke-jrRdAPbKj8LiYWQAd;;su0M,62HK'HISA].,M>X]9(&^JlGYhd[e
%aP$PVT=?>?\;NTO+?NL0Ds4]"M1o8&3/qni*@:-.?p06e$JfeNM]?c".684"HXW@4M[(>VpE"PWp-lYO\4mIfoCPnB_s:On,hDCo
%Tb2tOnbr<s%lbCeHaf04'Q;*4EL>#dAWm<G,]_V5kLW'6N1l94o"(V5A2Y%M/S%.Lc#?jHeI9&"K-Ta3>uN`XgQUOPNI3Gnq8tpl
%\c88.p2.>t%0:YjOe7Z$:!PWI0m1^J/U0i#GmCWEOYU_!e8gF<@%GsWU&p[O@oGoU9tmXc&A[g<:V.>>YU_[i-d#s1:0kg9%P^:>
%H2kOh(;79\XCYee<Z5;%>ENHL")>BpoMVIl=-PjJjB`j<Zo+=Y=p)r4L'3Xr@C)lsQkD%[)aIA.Hrma]QejFmGGS$>OY1$t@XE-G
%YtgXJFODI4OGn7Cs"emM+V+]q3%WZ8NW2H0^!0<Tb(SS#;[sCD0r8Sf6ABQu,%n/));(3X9#pD]\*;PuVou.RG,g'm!OA*OGf@mi
%qM=ksb*jsBoSS67S4PK?/EOs'cK*3"#XUodM,[WqZrIrSBIZ;`nnqrt*?D5)3^Hob9,`CO9Q?O8PSLhqKN'jMAo:G2oI\4S7ab5G
%0J$\=pM+0Zh/U$Y47#b2f^^B`DDP8PFI%W#gNl]IdBVUU3$iJH7;\7AeUhU6TW<rjg6SBWs-d-%_%IfZh\GLGf+91,Z6o&,+oaPO
%f,XlJ%//5UMVu!F:f?IV97\ZqL*EaN,ubXEX@j[sXi^uerf]+4dNpG9[MK49cD_,-!]81A5m0a]7#U=^MVHbe9^&@3CpG1lj"Hk(
%+gVY5,>up:nJA!POHB3A/aB]36pa7$m/rYYjW@0&'p?kO;#(?&!b3&&&h<o([l_Blf=O<\3uW-km(eV-@9:tV;R@_fQ_5ton\GT6
%YGbt$('n^q<SJf"jjdAIb;r65@*aJLY7`K,[V5q7.@.1`h\n1JWiY0aP..ZVgB`ZTS6rXb(D0tM;AZDIY]?RumJu;dMm*>`I*W;F
%C.L:h5^K#b10l/:kX)T@"oSgt,?A'HM>X^sP]UkNAHhta?0o"#ASp:9+@n@LQ>Qn</Ij?A/D"ZD:mAgB:>+8jPBVqR1.?i>OR6.9
%=bAYTF#H_X*[EFM;A6'*kB%;pS"gU,]Fd=g)`G;dm?U-Mq)$r._AQ:R0NV6q<@VuR/Ou\u/6rWKfUE&+.G$m''P'b=)26OZS8EE0
%G%"g*h#qPUCJ=r2<op6qk.)rBbI]r7;3U<;=;qhZ`/.dQQKEKZVdt5kPW2GS,c=>4GV'nC@Gf<feXDGr/";HV1-u"abu!,#OQ)AT
%?u-LqEe4<UQA[E]\-KX=/t6'r9p@-+5XLVm1\3Y'?tupeDlBBc#n:d\,^.6u(c'QWg>,Y-YWEa3XZ@&o3UA_efV)qF\roGl7u\&4
%/GP>q9Jp?h3bljFL#&P^19;iRb3+uqAe53h?e?sh$.Yd3nGog0DQ"<k+m`TeT$Gni@cFXkm(*5=6`)hpf;;G4Y?l_WLZ00`Lg4?j
%LK%TARIAJ4=!HDT\`t_G.!hfJ9R+T;k<ZbVUA)HK7M(VLARYXUL1;3X(MAt1),M-#>aT-=-FTD"A>X%CF"fSm:BI5Wia^$5PU\A/
%.;._\R=X"33$n(5;BlV()]Em2(>Q9$bGI]]f@^FT3G,OXJ@=)2[eQ3lYGYlcF@;q#-ICe$1PdMs_tEfk#0f"%q,"A!2BVXaMlPZc
%J9X%e*X]'\Ajd=S&ZZEGonl1#)=q6c&%e4e)NXVEQl*GP74hd[s67t^[:9!U$>4Uf<@O49kZ;<J_;n*SMI]i>'X(J/^U=h9jasJ/
%mFKk:LY%Zh$EA@YC1*5UY<dMUPnlGS\fb34VLsLd79NXb!iUe^K<dA[RkY.XV^+N^"G+6+,H,Cf[XsZ))dLa39XXN[C=7mHXC*cQ
%h%3T:;S*S"r)nbpp3GmkkAt!N`"[b_'#\!5<*f2>+\_Ag3)8IMnoAB(>49kh%Nkm7XrT3oB3AuUO(B/K%8ZCE`]Ckc4ncP`k=C]M
%fbla$,,"Jg&O6Ld4</^s1j0UVQ:PNHp4A*K#fF7hL:9$NA7!`MWY-JHY41P:5;Id8=!sb%#t4,,LtZl']J\YaUrjO?gF2$@h@Q>i
%;iWUDKS`Cag-T]?+sdOcIajsMLs7(T>=]sfC8C]c:spSqcS)guSG)"-i0@i*cf$Y/@,$CSAGF69p%(/g_+&DR>KQq$,r_<t3C])c
%j?q%J/D3h8"Z9*<&[?a#F@QDXjQm#T"A"@`<<>pZ+sZ/4-;L.X6?+g0V$o+9;j@tTQ!OmioWI1n=*ec:cP^Pb0jUA,S<jn(G''D\
%'e(oG3R1"a@^+hc*%dO_*52Eo&OJKl(.b*g#0R=I#Qs7u!&EoDHsdtCfJQWBF[sETY08]+1LLBXV.kbC_IgRH,%Xa5<5s`a9XZ6[
%fRabl81#RY<68\$.i.joA(\5jp)b0b],r090]bi1*)DK#aPsrNPhg@4A)qeg=6Y(TdcE4m)%WRsF^.APmZ(i`b`'3FdLVXK3<@XZ
%/QGVaE96jq6?L3=SiW[`Wl:/*@F.^$LZSlmXbi^'o*;k/2Q1An1((7p[]0%Z.DkV4VCRb1/!+X(1GecN7c7f<-;,-(#-WCe8=*X:
%%bfQ30$)G-XP(E.SoRZDG6[AF@Or2I8"nB`i<JY(,K6m(C5X`Z$<qbkd;Mr>eJa.%h;V8hT#R`<etfnL'hsZdOmo.5^hVV+-Vuff
%iN`?gZ*V`?+B+VrCcmbG"o.@R^8e"mb>gGn<uZ'/0?=N)Nb>@D2--r09q>0n2h:Y("3MQ=3Ie)4C.FaYG#</9$f!*WE+BO_.0%E;
%fIt#H9bCc@.\DFhpbSqQX*8tA@Ul*Z.VU-$GWeJ/hI.ToNZt?QlO/<U630M_Z!CH!>K/*R9q#lo3A!4FU@u,"%:Q;?1i,Z+X*[MT
%*Lge,R6W&G9S%k7FmDZo!L)]F4\D0uq$eVO2W@FfL32-#S.t>Pfki6Y[;;P[cp3eo0mjZ$AXN$H,N`Lb#WtWtBsNu:Efk(UAF$+f
%5Xqtn9BpS[_Q^_(T.!6-?CG:1j\3`)<%OfsH*=7nL^^SJ@&K9b0#V/<c!dO%`El$![W&LV$6Vji`SPe`i+!b4o-D]4KcQs3]teR(
%":Z_E1>SJ"*Vb"%7)9.B7K=@k5k:3s[I[XY:B6L=l,mh*9.@&QE:(H(g<b'O=l!&eC7\$"_KAk=JgQ\'*9,(7Be\j.UC29,W,#m'
%54F47C$[i@eq;cmY-b)f+7BO0eoaag=I(bk[tY,:eL8HkD@eY9dP5=j:e8U3PpQ[PC/Pk8Y,8iS:Ck;\;k?=;Sj'Nnb*dPG:b27n
%R;,[(A(WqFAV_pK+e7$jD6_QDo#b4Xl6YEaW[GWP%9U2(\PNPZ^lf7t'I1uJVA%%?-.>qH?<!=Ve'ul^Z0APR&4,s(Kcn3r&hFQH
%!p"Vi`SjD5!Ds(Be4PXs"U?P?/A<T6UnS)7-QGXs=dC9W%kJ6Yh%hT5;_h0>Rac2m/kR(nP*Z;iBU;mr'A[?,5DJMW"keH91mClq
%jHqqQF[SX])XO&-[1J@;,N@X4kU%.i05S<#*=7a18/T0+'%a#can*<V.=C+GpIIW<38hU_QtO9[lm;p.JK";2_?7[_UW_Vt/e"tk
%]V,R,jsu1L;AX^-%Pu$7'DD\2"JmP5#\/atWf=pF$;)?DK5<&ONM]O(Qr%(MWb].)YG.\q?V=]M,!1p0ftgWTOa0-Fg>0=UrQZOL
%n(3Y'\.YSB<@rKG"+Z-&#=G@+if+N%[*'"bdj;F`gHc&&8;sPuDn+f,I)?\&F6meJ\0Z^H-A&L:h-Sc5"jF>Q9q1Te@Z[HXb_P`i
%0jkMl:"KeEChTiK#Hs%Oj9XB@_M1-H%8DTnbb-Skk2D5."I=Dqm=X'NU%)t$J3$e&"NZ[+IL)`Qq>LU%\:uJEg%((N<ium-+p(&1
%f=0[GV^_EK.aGq;&b'mq+[H0%".Mj&@+c0gGs\op"8"lbbm7M&eHKYJ%`cA3#08YI-bqg_h-:(\GI%<\aKt;:F4\nuiF%XMro]Pk
%XTt[&NBmVc\-*+BK(t_C"9fTHke-Bk)"Kdks0js)#/ipJNK""263D*IVgnml4I,ig,I)hNp'fdm,7st&&BHR-b2A..!dL:W:rSWF
%er\C)EG-bn^:^8h`[Q#g.B#me%M37sGj]PD+!A"%X8*lZ,"[Kj&=*Us6^O%s)f(,d-%Q_5%!!=6,.o<2ON0H9=@Bru)-PS_!p3S=
%.BkFtF3[+=$a0'o5jSN9*5WX>e5^oVnA`Lmi2miV@Ta3H$Fqr@?%k7UEAV57=Bi2_4qEXd5IA3T&4c/$&@Q,['cgAh)=et7\LF/%
%\<BPEcX"V(/Z-"gaV0HZ\65?W[;E;lb>S65E6,Q$U!)HEkit>SbEA2JicqHgnRYTVT0no+P\_^4boseY,`glNYS8M@/-*/N:\\?g
%,rb/,QE)fe/hb*5*E>'FU!B-S*&srKU,:,:K@=hKC]T;39mK#J::YYU"jb/B/[GgBjDC9e4ATkaWCE0sJ=u<J,]>@<86B.U+@?h+
%5YiF."OuQ>L/f:Xg]/3ahJcp*Q3OuK!c)6)`m0OUFHrXe$)R`CKWOII#XcgDB38M@5WR8X4DC9_?1MSO#2pPWO;Cu?Q+PU)E#p)T
%QI`p:<^iV'P9=FM#4-*pW[hi:FWmd?i:a9]_5^*M78aJ+.WRRN5[b#1IKqlYn"U0bYa"PJ!\0W+T`%iE%,2B-^rF1iJs!;(5YpX1
%@n%>mU,3+XeQ)5qo@SJiKV(N<`lach'XIn'F;8a4Of<KHku-7S?/'s:(D5r@.+PH&LkON$WAB'@iMb`"\1nUWfl:"l6^PnXH&[rc
%m%fK79n5>T4>=AcX49N/>Eh2%d6+8Nft9n9*,r,IHjGi%"jW*f)[2+^+Y544)ns^VH%`A[OZjNUrPQ:4\RfZTs1-K\E-lS#K*f.q
%<MJ-l;&'9%E=3OQ=?p^Zi*&sB6(/a;C!(so35.%O+lmN`;`9H&E/l\5!biuHGrr(P:_umA-)&u``c@-Y0i"2mP[.0g)CGpj_ba'5
%!5_7DF;YD$eX+l(EG@k.Z8]^p->PNbaN8ir.e(F\;93=\Y3ZT:Je2LsE$>kq>`kASH8\Mi+=!mrc(ZDc,BfnZLO4AAO5jB5)0`SS
%c;Z=<2!cIHK&gZEBaM_48*2Gj:r[nc'u!MqFI??-V"j"O@9=)n!k+Jf.lU/]5#LQK&`k$'mW\<-;jeXOQr2%<+>JDnpf]\H35^t?
%!GEtpQLVd;HiYT^4Bk/Kq;t_GF*L[7&`\ql1m01_e;G[GLcL<Z]]a&N_%Mms'?t8:fJ8VDUY1'KBLIbUUrYu_k6Op+Pkp7o6&r)O
%Z'24T4Y)>ZYVB.HTYQKQKlDi&A:'?Lp5k&d6n*m,(d*hM0Mue/#2c]mo[WAPc@YVXAkYJ-;A8(9q6FI9*70pV_p..f3u-)8CC3)V
%j;[X^Vp#7/ljWVl8dfAXK&Y"Ea1!,BOoouj#<>X6Dk>PqYBmLMMZk@r.'@`(pO&m#X!C8l]nLAVCfO0LeR6;SE3%DF!ujN)n_"Tm
%Yq`]$P(/+,+?"lQg<9Yb.uc;,]PIq2NT1W?p,RI0M!)mU0S]WJLlhpTiI4$..iI^Eg"<-1E)RgU:`4j8SPTnaU+9Y1dLE@j8ng_#
%32H_mRp9%i-6u7P^3'mmZ]D<,_/^/S#RO!f*8L=@]7VY1Q/SkEW/*O6J=pc%@k96![,?sD$O\C9Z>8g0_+2?,&aJ>LB21/=RT/>X
%?!Lj\@VFfG$mC\4NuV0<U&\3DF80&f!-K:T78(5'J^ok<R6%B_>@!,W@Bt-j&.L*K:lLbImN:C+G52YE?m[i83hP/0SD3HDg"US(
%IpJJ$@PNX:ffYfr(qH.ZOTa(:pO*,,3:V1Qp5\CWI$,iM1#63h%*VXXb8JZG6Wl:(Gq'HZ5C(0<42_=qHM)gQaN7iA$$A+34$X(2
%KlV(&SU=ITNggk(fei3<^Zf69_kVb;PJ<-IUu`q%6W`$me1NV6YCO6"#C&W\%pNj(>rlU/*8V%c-"NOjYmDt?4d6R5]'4lTb:d9L
%RW-c1n.on0X@T;+=**tu^Z=\_ip\h\&jgs`JOJ,Hc7jjbcfk<'l<sh\eLOM[j%YI\Y58CDEXd.C^OaWA&a<a^%B`lC62jge]C7-%
%+9uFd9nfJm8/,5'aDCCbCR</N4MTgK0LPFpGBeGR`Xu9a'4b!H><Z!G@5@pk6EK]mBEFL>0I2HuYi,dM:\T+#"[ghp<4ETn(_]U_
%-9lPQ*l<p&g^%9IAFOW,E.Zj:pu6D`QW(g,YL;ZUI"ig*ZGjV@Vh&^arF;r/pf%l%#NrpJ(9h%?%48&ml<&g0b]*b5N+<f$DX\t:
%RdS<6;4T@6a/tf?JY)bcAJZ8*jUi`-o0O-Egt"BJLoICHW$Tr/ClT3S^6mKue8p=2L/ZC0VY8+*)-Fd2]ri*9TE1OIOo2)er.^Di
%J`B`7JG>'c5@/k5L2gq*BCf%FGSe1m\'/>9[U`'%RWuqF-8V.3mRK*L7Btc)Rh!j0<giNF,Wikho>K>7%Dc"3>(a5o!uKOQ`,W&U
%P"EKn<M1(2PPJ=8+pH+c&%DHdROKJtqi)iA=Su_cG'/KiB?;(sV.npj@gM.'a1VWG4.dGkBEiT2;bf*nd:om"bN/Cm!&AYNR(VGr
%&Bg<s2kYoM&(kQQbERl>GWRWe<f9[5!9p#Vi<=REa9+tPEX3d$R<6uRVH`=+5u0+<J1_m]`!+N<Qk)o-+u1Ic@T)0!%XqRkpYEFG
%m/k,iLMA;%/JoXo"8qQp-<OGlU`"bE2j$(c_Sl&CiP&J_OUKo#ja.e7Xd_r1_gPHK$[.o0ZK#_3%"?F=[Mbn2^&J(H6<=V*^CW&L
%i9_/i=]SCdjk<$e2;C[;9I#0l]NbM5)6#k`\N?pCT0qPHRQ,1#^!C-XN5YL0_76nc3>,GK*Qhbu!?$4;iKmF^j=8\`)iGZ%Fg9Z'
%G?8Q;8%u.'Kbg;"X!X`2Z#43r;sDpFTrVg/6E<.l<R$Z0DrOJu9eK#rmVhM&%t!69"nn(A<,/_;@:5'k?LC.+d,m8%n=6<?R!N_K
%?H8b>'a+@$e9W>]2W:#<:j"u*G2olChut'(h/X\;+VQ>c%E`Y$VP8Use=O[j<em;Blt-3O8DMC)c`',El;(CIGo5B&D5(7)F&Xtd
%9po.PW+<n4i-&oo0\Pd/1u]ee,T!`_=#r$[e&GCSo@Z6CbQuj>D+aN;I<:'h6bXjBneX:?Q*-rlbK!s,lJ\`MAhY3fd3[PXGl37u
%d?RcK"3=87f_c;SK`G7r*<I*B\U`iL*Ck9"T3Pkj;=M1O7Za/#V^m@@LBsCs'3Bgc]SNEdQJpoHE0c2bhf7EmgK##IT0QfX2K6UW
%o]1=k'EYe_&S1<5SbWtYE=+&8oL,?W]k*FdF3Y]?=d*KJ-J@DVZW5bR7Fb6ff!)(!"j.&nnH>OJ4?2-[c7MiWmG;>!`S.Ub=H!gb
%;0h2qr(n]FeUN\i^Rd"<XduUo8iU$,Ql=Tn.p):]n!5PWh6_Q'(I4\9rNr$K/nnbk,ObEfN"c1K/?=*uU<Ba(Z[U@[`F!k9Q="aS
%,ID^.O"]&A7k68+%gPZN"uhYO@glN-iA<8F1%'@p6KG.;+Q$_/k_bSu3(R_-C/-Sn(IR[X_>kiD9b5ZP7Q7V-EG_VZ!P0.6%:#PO
%+)H!uJm&Btd@'@US%OQ^.2!'ITkNA/r&QGO;T*kkgM"</(EbnX`S4:5IY6BC,$"AhXKer""5?ol,&ui#6%1L(&(k#gYkZMH!HRh.
%3"cfj]O_]a%8Eh-!Ap$m;NG:VfH9H7\pUrX+V&Z_b@`G%>Il5;-1AkkaJO/5^24]LiOH9cQUuDM((*HUe4E%:E"Wp%#1*\+Im;qD
%;RZ^gbsp8il?UjD+H#go:nR#+N\V9Cef2K,'(4]KKpZ,I2]LFWR8_MHDGJ.XY!&#YM?@VQllBG0b"j#[`%NM?7-q*MOFuUi;41Fu
%#QdiS;@bt\D*\@Yj;+>oGcou$%KZeM;Y"TL\qCrG(7ahY'l5BP^/`#-lR`Qp5S0UHmMoKnCHAJqA#[Z6q/o13\L*Q2JX[q[%<%c*
%eu[^;RLUi=4HYO:.DD*?\q##2(WoM0%jb1(;q'7P;E3;\l(lMci5qTjDc=g@E+K?_%e#tIIYGAlO'h]@]*%+eW3BUj.,5f3NK^3!
%4>OK'RY%'0YY3ms5@.BpEJ.&K:?O^A*'EbnRch^&\LJZQiWV\7%DH8q`='AqHm+\3'Z?u^OjRK'9\AN&EWhB.EOOjIhB'[<g%(D]
%+](RaDCCd:Ls5T&0l\ks0k]u9K?kls:K/NPPanu`cI62m-O^Y@F@gi71kqL`An!eJcV9hsCsG8gAIN3^W[!]d_fHp9+bP_QN(e(f
%!qnAa]CIIAkeZ3X^'beshDDIXoVMeZi3&pY(*eWl%G[@&A3B'rS;3$+>XJ\0L:!b2S>!Z%$f@MtO4,4@e?MSC*_+_?51!]o+X:K7
%54TZbiA,WIJRUVN;oMLZMh6o"JuY]Z[\*4'DCkj0aTOCeppS`s>fRpj7c4qJQ^6jSO^?6k1@n<&9L:TikTZZ;YFWjfB[-l=7Z]]@
%:*M(S2J:qij>D]pP368@FX%`NKHrsAbck>@'9a(S!M'WXQj?D\KRqU/iCUroCO)ro6\VY*3@6B;@)Int<'3>P)tq-9`[su`3@MP;
%9F6D%cinP@`Dt`%\PKOoX4rE1fMaTD,7/@+BZSEb]Lp0,nsaiNO1?'W4E%%V%r6t,2%lU#DUkb3s0aAdANShU(2uVIr$n>S'tF9Z
%"UgH;M[ofSG:k*M_&^#&pL3R");O&`Vi#HL2Qe>&s6Y6hNb$7Sh7E[d6bNbe$.LBk(]$^%Ub)Tn=gh"kH6V(b-96%rO;Q9!d,-q9
%>!#KNb]C)$\uN?pc"Re5R_/.Gij*'$f)kpr;b"RjF><0VpDa<gG(K4j!sQ&KWj+/s^oIrR_ITE!$DjeTA/jhfGtL+8q]Hal0i;*m
%;"WEUPlZk:0W7J%@VZXY^_U^a'FpGR86B6R0g!&1WnM`$BI%]##gs5YAq1t"J3d8e?WO>ZP94+-:OWk6=,]7@5d,kKA&*a465`9I
%9*/"7]?^s?d%QiV2ZE'KV279Y/jVhg)lF).,`l;J-LbnsoZ"7erI;jpDZ9'2hZ!?5^OQ"?2rD7g47_;.r9!momr&\cpu?k\N6/UN
%Vg!9VC38L8j5:&#-?bCS:p0MNrqGa9$%5Tb&`>$nKU@Hib<sbZB*L%<8$3,\]L:2Ms(]bgD89gObK+P',_\YQGB<:kX[iU<m#_Zp
%XO.@Sp#4Sbrqbl?(*jlN4-6(%rP@)hioB(6roDVmePPiB:nO4Fk/2'\oA2TY@T,YJ:bP+6QGtTn6:*-t.q^q!kE5?::dmVkhG]dF
%9N/a=2ms8)3J-)lfQ'1E,[*D5bEo)%R\r>_'W*CLb$o<ZZ]S:#C$o'hfA4:F#n;f#S.?T,De&"[R/QENhX/&5CT$@mH9JuM.;n*e
%<2AJUTb@ud_0lUe_5:^mfTg=2qn\`icb&5H*V>gu[\5(75!_BT3*K-T$Q*l8MR]oL[`@Lc1JNfiIe0ck_i8(.C!gSY91^*rH8!;"
%PDgeML#V+2I?'[sZ;1NCPW7-H^X*,];@l&T>9b7LlR)*6e0'!a!QGt0%+bkf#taleK;,#"=>6CB'i4[a&*2Rd1SS'I2Rd<O=-hH"
%E?*EWopke`G^[(Or#jR#&'<0SP+3'-X"KU@\UVa2?4&,Bh#-Vtl%d=di["'3?E;#aToCtS/p9,Q<\*gLP57Z-'>m&:n2!p+mZO?q
%QZ.Nqeg"SqM;?^EWrVo37\?(9^gmlU?!Kc4]?L#+'0.,`<W?AL:l.uW)tr0n7a(Y=Kg_+k(WO0ha*e0h"qj9O""C8MR3M2\oXML+
%@*4hocLVppjFg!TI(kGo_YG^cV"<>9GFJ]=HKo7@:d.+VaM&QjT_1>i!1a=C4%!1)roWCDiNEZtTT:4,iLj4.S5IkbD'3N:P3F.?
%o[QQ3/gk%h[Y2m4T[)Y:NEkY8G^F+b_tb*T'.+hlPu7UJ*qm/1l:>6<!\no:q6aa]&bbjE#ZGdGrg^0t&tR8IEd6C$p2-kBblLp0
%<o\i@QaajJc>G''dl3dbQQrTZs622?QFq57@<,&0^@t)"$D@0EJH&l=`LBaZ*/[1Vc'6upBIYHa_<Ts>b(^N:oqL$Q#_[:Cb^)#j
%#9IP9X@;GtY`]&sWsDJOD?oYB0F+_O3t+=TP]Ij5e:nftSqGPr-aL%Iq':PpC>8E'/au?O$Aba<+Jh%U;I$oX>-qH<-gCQ=ea;K1
%XId$B/+Qso@Q=Z.b%"PsGs1fS3Eg@?jf\]hkt.707.>(E)-A4kck2VZW^KuUMV-2&-AtP#W9R5&]PoI=SO"*;^/=s?BKMQ^B5`pL
%-3</El>Ab8MBT/FgI[PRp"bf#2-CJZaq!Ej"R"A\"q5e4Y-'(7S(a4k6\5B#X#E%1cK9!VlGHZ3RU<gUk%^:%23Q[-3!4/$pq(+]
%[o;mlGB)hs68qMn%Ld`:9MHr;%5&E#R4P`N!dkA4%(]A_*p-sKG@nf+IAf+ELPZ<;<pFAQ<\)RD)6BWAectQgEjtQtf>-cmHKmKe
%>Vj=h%b"3H1&uWFlj&hNp95=+s%DM"][g\j7H/^?LG0(eF`c?,X@914E0ALb>MX1W_!8J2OWq/SN+FlB_1BNMq=VOAB5"u6Rq"ZB
%%uscAd8)g[`)'ee[%QTU5\Hk/Mr:b0K(\o.XMGh\TuZCe%4!pDhOGVmPH3H.GH>1:f1R(F6?#aG"I,/WlPu.#6o81T9*,smm?_J$
%q?UCTWP-DGF>itCWI<C`G4XHic^f^,_\=cFNppIEA2"nc1PC'F;7bG@mlU:&E,#;r^(Z:RjfGU.K=99\<Wn+&J9tf=XTNVElrSG@
%j"p2&n`Vr506\iP9UqJ&:lH>1kp4ik'A+&R-,JjHO\?/0D?8@Zf*\XH['?q6&R?HU$Xn!__W"rt'j-TDM@b@DPQFW*>WVk`9+qRN
%M`mhsJgE!fkoCP@f<ss[$'XhLf2e0d&ANGa-\;[I[W.k4A?UC[\W6rTa/2RRpcM=^*"U"-,OKJY6m.$S+S0(e%Moga`uBku]rhG=
%K<D?M]%P^sM.SCdGQ`8li:rj*15]InB(3ad7-CC19Zn`8M5C\8?V/[nO`@naV1-._bou:LUjIVEd5_.4?=fS"ODf;+p2pTR#>363
%D1\2f:9MJ8#@A+R*YE*<XD\X;3Im'"GTU2AV"WmeJZ/tFTpUW!X`YGWO)G]l)*6P,Z3s:Z,`.^a":$M3'f[D+NI.JkbJrS:*RL-h
%9+kh>-0%TO/1,\$OeF+]0USdW`t$o?^hl7BR6+$KTfru-=VQ^["6<DeUZpKh*poNRAl;CPQp]sUim&f''<3iV4>=8)o&u=SM.j<o
%kChEV[+4dDc,Y_5hH@r^(!XY,[&='HL.nj?H%k(D.7/4m-"ShUdM>fV*41#?m=JC)_1#KJ_S=_7+\T\09=r]uCk"!,YsWO=K*))H
%>i^LI<\#VnR<EEk0-@nZK=#Ri_WZlD-(`e".%*R*#a1QfYe!DfC:48+1CD,FCoQSDVN"Y]O(C_PC1hcC_=7"o"`KK,ZrbRm<$'>]
%cote-jF+Ja*\4R;E&+D:37b<HD%srm_eB-o''Cmf.3e*6B(#(NVn'FG0hV:gi;2(CSH^n0O#uA`kO.$8%?Uh2+b>?qMali&=?rAm
%#Udh7?EhL[Lg`ji:M:l4"WCW7BW+.-#mR@6R`L7to^K=\]V&.?U?%c"$4D_1'7k9P3p>;f]<M8X\nMJ'c.gXhU(L1[,LA_8,A4)`
%W.L6<;Mu$IZ@!4oL19&*#j;r1S^+#3K8E\"b`$TW@#(@<(]:E)iAh1AT`HmOfT'Xk1\(mP<n.`f7#3$_5pn$)"DYiOX;:\1^s^&@
%LttcLW'6#::HV&Nc(mBjc[K!Yh8VcFPLpdu4cP!$,$Qpr`[`+UV*nGFGDffIitqb1!g-F4Nbl7;=^O?H-8B/_esB<f2J+$2=BZrp
%(1KZQHY8>nrRJ!30r!*>o5<_YTAc7,bf8W+gljCk]"Y+o7$f,+[1F/T-2`C)-_7+Cgnqqc#DktrEG;0cXJf:gACLbF=dmjZ%@$U[
%kc?c-)C]bQfe32A[&PJu01tj3!4M=-KiQ`%++&aVa\%P`&L8Nt/FK,a]t><M2_aN!R,j+-'njg=RX;ubD\:j)BLbMpDV/M76$55.
%Ki4B,>8%CPN/F'6P)s;0%b'77;S?F3dQ\*jAb2=rRa71VR;n,;l3[/jQ:Q,G(FUUG)/^J8%,gh/lgMl9E'9.Y(!L_7-gRSeJ^cbI
%"1.Pq*7BYT27M("kG1rbWpV]XAEbrn'uFtrn&V",RMA]Hi'l1Y![6aFV"=s9N(Atu0La97LDRZ%1:V(+jUa%-m]CpODPhoq7eYE]
%-bCQ\F8qmM[7@oaL*R`%"f.9.^R/f_i^3kJaU6f0r+V]Y8K*1U;4X77+_]pLaL,lH@9<_tJr7Si;gCos5S@cXP7G(VU^hjb8WiK)
%)mqS*$.t=bX%#Me1V26h/I6-]E7d6@dU^-5OJ_)4)W<uNoO=B;<I22!G.,Y-N'HNXGen-.9RBT=!e*N;Eabp>-@L`TBS*s7TL@bS
%f4%CH!C.W*$l#g2&,SZEHI%j5Up)js(`t%/HNd!DQR$26\)XQ5f'rp:"A]Jfiu/o,N"m+lN$G5t63'Ut1bfcHat'.OQB9>^8:%:@
%dPm6hU?EN,T;5?r/M,Zd/67!U=>l185_]N;7>M9V$6dQb"272BJliBcR0A]R*$-W7nA4m&*&"F%V[er9'J<<`=!gNecRY%&$</ca
%/HcB6(3(`g%$bAr6)*?6S,&#Ze#l*\"0._=*$QgX[Kb`7fd_q(b"WR,]VEfMWd70hn_s^s_GVMTMkMFL/4OBeZ](;'C2hEm_`C;1
%BHlP_"]IH&Ls:O_>C%a5/@I3imDCTcV6BE#kN(14RLmcq11Vd6X+l0g(?r+Zi):PS=$1Xi+*bVgo`g/,P%dTh6tk#c03`)L-pQhA
%.67--=BbhCa-hjL<J:okbqq,98a`<iKJ^_;.:W4_9PO-hfn,r;OV'qF>,)di`_<IaNbDs'cn\Fk85)X/l<>t0qEEecQp+\i+Q\Re
%X;2B6U?.*WC*S0q'!=#sO.8`6#.5>!F[d[1hX0+qP\.o;OQ/pX*";<m3i#nL:7TNK#cPc;PbK)QfiOgnR#W@G9YpTT/Woo1N^<2L
%8eWG/i/K"'Kh6]fWKrY4#km!Q9N"D+6Y:I5.ncWkj#t=0b[c2*CM"QtECtp<LS)-X$ZJ5M^&W!kLg'-rThj2?h!-@?p5/l"do(?I
%d,VTlnK:jB&.3'K_1[aXc^'<t6I5J1UMh]9DOo/o]lk0B4R'U$/\-;KP>1SX^A]XR;VROdfR)<3$XWPr+ia+DIO`#6G-1o;KAA/W
%T<(i>#<JQ=i"olMOjk`1!Ju^R6HZ5uDcD2$:s)BiZ?Vct*`#$NAYUH;Q9C,Mi5r:e]MnErf*o>OG8BmLcitc,!VsLkORJ(mCU^MF
%aXY3Q3]Cmg/I7#;!ktt77n=dK`-pU<<,d)*R`-u8bsSI$nE>m(eS5Y@ekSP20h&$%a`94!l`YE4MO1uO"d!Mn+=P[KjbaD1.8$F4
%;,YM0_5UT(LTHn5j^JOdr?80h743RuO7oV<He\U6Bu(I)QGFdr61'OD%C;^)jE`LW8-X?9OO_ZCdM*61+03[k'QAlTjhP&BYH^E(
%A7$*]o^gck*_6T=3DU9]C]`q6]4ffnl7BnUe6+:N:1]YjgUP$^K#<h8T<#q!d8F*b-;8@L6_FT=kV/1Ublth%Qql-JWYVl`dfRll
%f928#GVK>rjn/75kd13nfhNr42rJikRBn_bWJ\/s,U+_Y1pGf,X0cBOB:(YT]^QKF'!O&4fd-rq?Q(^Sri;`h9kbDE_<i=rHeNo2
%%+oBjeT(P!K72E\?T-OAfO1mo;!r5JiO7=3ji#Qpb&/c]iM7[3Ir3RJ"c4WZkeUkB8;jqUK1@urb7&hbMs.@k$Dq:AT'lr@[te8D
%QoUY<7Cm-@D@BcSJ<?tW,Wf]r2$F>3rAGd[d:qWA12T<V:^+/rNZT]%q"u>N%^!tDl=aO0I#EoF3D-9kcL;02eSBLHD9_<9aPeP*
%_kCW23/kI]$$\Sm*5C)ccE8ZiCK3ACUf&rrROqegQpQ\PW(@liB[tKL)(reV3_qXUo;N9#7DR#Y2,L.:d27C+fRaHGP\E50A=s50
%SS)2D[e,cPHk4pBQ`G.>m;<_#1`>:_BRT";V(S.X`[3MVZhD]DF-aXMJc[,%<qjJZ()gQd>]qM]]I4-,Dc*BiKBGjcb^sR.`e%pk
%dU:-JhTV'c]\+1&:OR8mKD`gIg+;'T%asA3>F$H0-22h-htp@Fd&Y%`Dk]i7b"Qm\%l14EbNO.<IJKm19a'+"k^DuTq$MYB-52N1
%'B.jT\c=9aG$f9`!7>HaT5f#(@o.qer?ULgKQq#p7(#>mAEMu7+Ac?\9Mm:6fZ/65<WpJRBcuCJgBc!4l<[Ad>[)qKSa7B$F-r3q
%(/>07Qj\oGU$GslW&PE"!)QL&50m*r-t].e4#uC_<_^#&_1o2X22Y&&d*U"(9_37/)-<_7;Q#V(oZSqpA3;8rkTpH(L:SCHh57P/
%H4>9AD0/ph6@0-C=j]]_8-A)ug"7;3Bbs>f)dR'NRUp;j+dHprB8$XncK\#>lXObbB<ClXmTm$L0'N/A^>*qmX]t\l\9lu.CtE<8
%*?;J'=+n^kc"d+KoukVu\oZ;;:1UC0*WqpS+N7sS?cY]81El!lH)TH!3<i)l*)gh.!R4R1GD1QrgXlGceN:RTkkW6'6sNW`h=c(U
%Re6.jh&Nk-]mdJ?#-d#Cg2K(GWNu#\#:-OD@>o&1nKS7t?TuCE`N%[TG[tB(Q4p(ug6,K/*A2+!=&.EZGb04-C:-:-$9QI@37paW
%WBciA`9\Y)W7?F-R[J.(lobfa)C?r81fi?jFb\f-SMhp`5m%6M:*I[70e\'/1lpH$,W+XP*LOD=$'@@+@$F\Y1Y@PTk)o%s,MO"`
%7GbZ5kb)B=LB[`/gc)6sGr:mMo=-G-!jZRK#uuY&NW;Q+f*>1n4ERM]csofCU=#IqANS+>p,aqGnHVcH7grZJ!@k8rcd)IrP^o'!
%`a)RH"'9O:HoG.C*(5?32L`&T/3-C7rDL%b=2?$;+D7#p8oom6HlNPh5Ko#NJ`.thbLdP4a6YLDR9sC70OYLP)HE+h#Os:bB#up5
%h%&H'"bV'H$I4c+-EtAlh](5'84c8^O5-C7Jsp=,drGd>q[\Qsei./DoE6JF?A#6a6Bsj,X*hR!%e^bDT7,4"HA-C5;j!&pW3DOm
%?:YK.KA$/8@R4*Zf>V>_C12k<W(e*6H!n%?[BEGl$d6#01>kmV;,9+5ZHi8b[AF>T.ACsJGJl[&8]U]nOun;ck^-tYjR-oObssU$
%KuNQ)j:-X(?5@A!Ue1bt,G6IKb'#/(;:Jb,m2/-68ek_g.t0u]Qp$`(ZQ/+_-?IO#7<P+k>@_jQl-+F^)!ENHj.[#C$)&o?EmBg*
%10q%KkZ3lZS4.nc#S\'!,R6l@3ZWbk[<XmH>bmT`'>dKi4[UbS-jXf=05@Lem7oKb=Zm"cS\[Zmm:NsRlZfs+1IIWG@CXrCAqr*Z
%W!X2[5>Fs=$o:fk.!Eo0J`B]b&_V22?^%cQ.!T2E3RZ=JIYe>]e&X8.2NFbSVpI:QkTZpgiEK.:!_q"G:(r-n<V;M]#lkPo`hbf'
%-Bia5b5a_h-#tC^P&>o@:$*UBZQk=H,JOQ@FcAm31>C@QX=)p<>'JW;92u!cb*8Qb!K)Om&fHM2ZGnV09?/0/A>4[qJ2gIuI0it7
%.LLDj"FT4:Pp*"XlLTr1r1ZCTHI_1Kp4H\1A[oif4iiJ($Hj5d4Y"HNR#ejfLoJBsU>2_K&W8,0MJPWnLT=jBSUB'benc_Ep.7@9
%aD#>2p_2$HenqibTT+H7otn2`jPd]13R3s.bZ0SNR!9\r)cJ9ZGdDh;Ntk!.J'2<uR1EAInX]8pmo2J4^4R^lb0U-&*]3tEhNn(A
%KD+s*=keL6#*(AM'TBY?hf1BIT&J(8hrI(Mjl3D'1*!sYiSOY6mFbU(<V%1JrJft.0nD]AcdLefAJX-_+!SbpN]=AVSS&7rh],"[
%g2N4,mV:o*boPZtoKh73iWWr0PEB::K@)$(7]1t#Adil;+1Y/h=g/1u=WpIu-^D.irF+)B69BFD\bBY!FZ]F,\l!WWE'!QZHWiN.
%q;]`F0i,NWS41`:5ie"oE1D\V]67o(EF&q[(@>5fG?Ab=>I'rBKFu&JeIK+drFY3r?Xg6XhSTcqMg%@RFCVYL)>7q94?U)-k@n>_
%lg>Vh72l9&2(75,%C)nl`!A>L_nXCrqqbh0H+r\e#6=Ht],LN8H157XjkVW/'5htg@4J:-g+mGm-e9oN\J/PSfU#]gQ\VFQDJ]_^
%[cK*q3Z+/:A5W!(r1oFTG.crgnb0Zb2QZIAVX1DW5GCR^rQpB>'^6o>aenm%M<A`rrO+;-gJMI/0g.,s&*(VePpH6H$j;QTD=X(G
%mUV`p\`dm0hK%`<A'B)ZXJ-r=TtC[KY\>bFc@H&4NMW^\V<,Sr(7F5nip("YpFD#aG?=1'-*aj:G#(Ji1c]\g+q0=N$t5@hG3$_&
%X`pHlmW>C4R[IAaFLtaZKse7h2LFo8W:&I3iRt\&]O:Xg]\j-`GlU,80O1#BQ!Xfu!B<)%h7*W6\lj_:C<)-s67H]:.X3\mb7(Cp
%"i`^saqW+[<b_t'U`I5e=H2U5rIn.R7,'\^RLZA:D"gsiFaQ?"G@n6%i/_dn!RK0i'ME-29WPM9(%#!`UQMHu@Bg7#N<OfP]BX)m
%H`]F)./fB2ae!JZ'/mid',IJKdj<Ih1CH0eKk^U@$[W;Yc"TXJ#Q]e:Fb3(\e.&qji6d8A#a?L!$0Y-!YTs<*jY6a5nd$s,lX3\/
%K>e-fA.'k,5Y?("1RRSZ,%*E!-/1H]fa<<&A2P(?k$2KmA1WUm%`L]+;V;g+(_V:Pg__W9ZrA"V'lbL2=\sh2Tl7D0aBY@(f#jRU
%o@hCZ@o8$U%hWG>$k3%,[ZAZDA/=Kap)kot7D5j6T7+R')_25k2I:Q76k&Z&75B=X$34NL@3jJ>Sc.V_7s"N0b]NeK!t8ZTclq6Q
%CBN3ZU7PH=YTBIL4=*DTja,n(Fl9oT6]uK4g"iA(5DfDr/HWkYKM^l1L`:FBJ2W)\T+T%oTVnW,Z#Zsg5Tk'-K$k06^;IN1OUJlI
%0aEPr"tTmPTus="F(/?^J!MR>d'=C"q@uubbYB_-ORH_"G(igk`5dbuJq,I4]^KIL60)$7OT5]'cUC869bUVn:"@<pJQc#4"6W-8
%J/aAZZ;m7>;rE,s%A$NsBbY?M=JcCt6:CRqNPXEPTORtm9>[TQN3cSO2G:QjJK,(_YC(@l4d,uRlEK9VMs^"]r=7g1njTl[''GE4
%lbr'?5!Po<7UkO!_0EEJK`g^',@'0O!dbst9Uqd4js!52iZT.J2En/AhHqH2b$@nFR2MnT7f1huj=EU6""e<o:sbr^iLme+WS@8#
%MB&Lk2=>&6mBXu!0id/*[]316#AW/SKMH]gc`It+#OXM",lh!]A&SfUgid>/k.1?dEn6$`@FgkpipVLkcb@_oWmA\YhJ>Z^Ckf?g
%7TE*;fPPK^crj-hn0#u&Kf&<&F9-(OVr,XrEEE`[oikJX3"SZmeShdB;Zh*[,39;W5eaB!,fL,Ukef'ST;"fdpJ^,W6DdR?4J'(^
%V<9MR5:f?NmRS`<ZHdC/GY[#:>"g0&l#&$.Yt3asc;#,u<#2.Q+4e`aBk,93,,Nln-l;5sTSB+3bY"0(N)uDa'WA'?2(OhXf)/B!
%egUL\q?V><_@XNAcFcOJ,G-1q*/^<;=aL(EB)]h-'IbB)TtETCh#Z\'AhDTrT%iFG?LONen5u8lG*0*%Q;U=7dkDem04b%_!A[>O
%Kf4R?[!B%qfWX$=s.BDe<^E9qim"bUd7hDITQ*bB,:/\6\;JWA(96/&S:XelJpA^>+nJmV6@bK*6s3=UPM3U+/sd_Pi\qpVHecjK
%7e#Z@Y_;8E^p@pp>K\!Ojp9d2%Du<gXdI'.FRlC+XDT@?TtQKo4G:Su,XCC*d)2[8daW0;:T=)6d=U=h='+f=eX,^.o*q=X3r^JS
%_TfE<k:\A<K(a#H%`9'K$Z*EZ2bWg=UR/cbH&H`mdc`TETEV%[OpspZA?6Y]7'iSe&+::5aDNA+2ld<OT)2.%Zr]9:?;toiW]3(6
%f)tX(6O7&^CROKs`eHF\NFeK*Qe;G2"_@\W<LX-(Rh6*C8BSAS-2RfMZik9qmhdbQ96#4IAltltW2M>]FtL9ro5!rTVStIfHnaOT
%j"5%M86Z80`7;g4@s/hT:<5bogL\3jJu2LA3_gIgED!R?NcT\Ka=c!dD(ocA.20ELML8Y,FuEk'#r2f3YgXWbd'Gp.UthRb@]_FP
%%r&Jg04C1*6Rl;R=SYLh/5k"EUG96\IQLbnEXS3$(/CYQ!3<lfNq:JN>dtpfVT[91!n2jkc&4X0Ug%PDlcdO5)Y&CB%s0T<aKk=j
%Bn.ZP$X7nWLcHl25_(Jm;Up<*IEP;N?.trD7a2-Bh3eA>H&f"uPlA/1:hD3XZ6(qTi#S@03%?eSSIuZfq$;BkX#oh`JVHYF%l>2l
%*CSM>rY&SL;c]i+LWd(]cOR!RSmC.Em!`_fq7-b$a=c:bQW[C.[BE#9e&U;AWgJ"2'!KUJjVusqT=]?g]j'c!5Kl:6W"&L&;k0hN
%I\OpIon^d'$]eE2n1R-?bZCW6fDuCloq!"PKI?q[4Bb_*U3OrqgaD<'KIaRB:f*9+!s+j]/<;fk$infna?Q=r*^gA+U$2gr/%mS1
%0<IoL];U?>P'p'mGhu1IYM6S\>PEV38e?th$os5PKLO]/YIPt%VElX9fI/__4S!;hh?70pZH20Q!:3Q=&jWl5RP3/=8IKDR;U6$t
%.V/J$(=HjH3*2L<"FFXC(7HOr/&cB=%-:eC[U=fOL+s\%/C',$L6%'?cD`*u%O<@,j9de@TR\<lLNt9_XgM>uK.7LN(X;PD=a#mU
%-V@hmQm'$$4!c:<ZT>$QcPLEMeNT-M[[bGDdmu>P@s,ru&#p4&F34q+#kM'Xc]@rI4^r&1<U\G!<bN>+L2&>]V>O<':,#rBY1e7f
%5UGu?E'Y(.X+Dg3:4]c4<^?njeg0uB+A^3f0ZCI@C7OG>#049BbEsXY0lUH/2(8W_.[Q=1#9oG+U8=A^Hfl6V>jA>h3mequ6='H:
%>,4%A!<6)Ba%iFPLpGajH=g'r+\cL&!#AIH(-^s,XQ*&P[%p5(,P@t@gEEE3G<S7:NP/0oG?W:?*I05=KZ4&*GXj"W78gLre-iS0
%`t)5cpQ!hYC:7COGSroV[M%!@oqIY;d6Ma9ocamCh.Y`e)Wt0CjFl1KNCldHq5iB<,3h/4'nu4@\OA4U7`G`mRq4fQ6U*J4f<o,l
%Z_Jki<<IJq2bTSGigH=59u2Sj57uG<X:X'ti\]^SpRJ0<kKc*!W5N<1"i1#W6l)Zk8FLZ@Y*^LK>8m^3H\EDq<\(]0&t#Uf;S3Wd
%D=`YYmb=,5`A#V$Z_N2?%c#(GgK5n[C\Gs[6Irn/^8MUYpk>!bTr5-cHLLEh%=?$S?0+@OO\]eI=2+L@EU^kNVnn7Y'B3+t/9M_9
%Ta>tUIdGM2B6H/keARi`OpqMV'a!-_b<[j=&V=t";5fM"P81b8,^e'IJDhV(q_Ggr(BhG\VHSq)bc'.X(8FObOY`3BK/LS1-[f<J
%m`Ss`qjWjpYUGs?cQ1Y/W_e!Yq<-ukmc&"tjbK21\8EX@.]1CSZ!BTK2mS8$jYG`H%%Bt$$)5TFJ;8eb*>1J-@R$D0G%#"c..NCt
%hiO;is7a?&K,-n9LSS-LTi;UB_0E#PkpKjo7uM@gPjUh:l,l'lig/YB[uOCB)?Y-ZP4a[Z0D,<3,WP07o)A9HcJf`CM9i,];RBlV
%Jd9%R%q%gU!f3#oU>K7Gm[G%Y.SA^4oe'59\k=u[ft1)P1.Y.W!m;a]USaP%21(aqO*p*(\G#8]ghLoIgm]fi.O%nV3C8j.6j<1A
%Ppa2PIlKVn\_[3p)c=%oZAPCg;9%lk7(ICi6L!#m]MN"/ZKTpD<%X1hm_n/iP_NR6c->+iULs9r6&*sj2.T*CD=89T>=j$,s"5ru
%N9;02[&4R%+mXYJ/L[p9oSL5GE`_.bL'8rTpj`ItX#6Ru"g1\oNp;IZ85q$2o!=`FG<f6):Y!Uh%EAco2%o]%RW0$D-j?;UkfDP`
%-i)*I,ru7#-O&OfrtgE?-fldV>/PZ231$r36<#tq9amXdI^;S@0?`+95+uO!B@PU%MU+P6o-3*P"uM-eF:nWE5$6&*,^$,]>Mm__
%%VblH7(',0D"WCtmE[P.k#Wg;s6k@&iA"f\>80[(n[k\S.g"n:(g%AhbH(nl,t4(u=4NpE`c3!dYo0C0&`&CQ76>]LO3Od!&Qfs/
%?=P.0@iZ.8AL0\C9@Vq4P/8hZZ/OqjA#MJ1F/R')[*PS:gDLsU>XP8k4FIAMmaBA*f=pZlDM]iW-A>o]j=kH^;`]]Zdg(WK[m&.6
%F=@RM/LH?HZ/$8@!=O8Kens#"c5i.^3jnQFe$YV/l_:[.?3ACq1ojCT#G6tPh'@fr>3bH""G^d"?\Kpp10Yq]1[iko<ji*Ls6,gP
%7P;\%hdakPV\=,_*<'K1b5o;Ge1b8:G!*2q5],*P82SSUErkYE2m,X_<g0gT@&R[A=)J5Id=b$TC#W0I+KCL"p.h5^D9NidU.++j
%lt1f@<7Hbc+Uo\mJrJuTR>c)V"<aj:K=i,rY[VMeYBY8c.JZYEIg6#F-'Pial%e)]5/,sO%j,1a5<i[us)LfP(Jje%obiht[I1IC
%/3a2gbk0gQhje7a.Z,@^Q)%G!&XCi]Zt"UqMQAX'hX#>kX>CG"<44-horX+ZLl*0N=q^'32bWRVGBr%\Gm5!\K4LLKer?*CRJQ@r
%>mY'!`7oPp5Z&A4#Qm-l0*kFQT*A6!H.BE3%*M7YHl94;&(rIKWqRJ.Z?3hnFUBAIUUP:1&staJQ^5*gAXeZ9N?tr4NnrtL4.;CX
%#i57UdHrS,>`8`YDV#ZLc937cP0]bM1hd8.L'U>:911RiQIG2E<mAH522<2/L<-8mA/k*!iHR)Ul"/XH_<,8_XG6Rjg=o/lQal[=
%-0ElkSs4&l`c-hKgOD/_Ar^?A<m.8TF=s@<@OPu(>ipQR?H3=)/m`t?UoN!o&d4fk^P,i0&bqE6S)pld=Y(_`Z3d!VI%N%SEP.>;
%b4X%1r`G5Xf.98G[n"fJ-@Sc%-f8ZrCTR4s7tt<HDu4XeC<9*qYP<qkU9rPZ=Tf4S2FBrf0ZZ?n('9_4[D"?%k@b1&Qk%rdjcRN3
%TilThmrbu!O]:%UU&oS&U7/fq_1\;7N,\J[E;)@Dc'`cZ=O0<2[D3nUVItLkp'Ff`\/@?mI29a9DE&C8Gh_Y#;Y_ILl`K`]kn%A'
%!]@dKWEp.-N:e&?Hm:JH9qs49S]=G)+p!8VW&EOk:VArj+0/Q)IFt)t^4?Wa:,*CfJ_BajN"n#8PjP!7cqDHs+%F"J+UtcJ*!,8@
%TdS]f'^D7+HEf5;N=]DSquaCF:r9Y@P^QkEQb^XG.81c("4..SWuA0,hJl/^,WmW&+bYX_ifg[A.oM2F#<?o?MF&FK(i!b]p9'`1
%\f$DV/=p!MZ8*eH]((,N1]a)GnC:X)lg$Mi<R7^s_hA,mWhOMb3Op.,PM,_B<^*Kcfs+5C"U+?]BD%p..!bJf=[gdDc#>e0#YA:'
%*.QO9A](R#/0L81f]6*\oLL-s6Xr2k^X;GB/choh*ph-"+'u>J[kI;[_Y"l>jXTUQXl%:fqcFLAknALpd3gQumjq]3?Bo-ITMsKt
%6%NP:)Mkk"9>!<$0?b(6GC2\Hh>:&9Als#BZ.t.Zf8+]/<GkmAAJ-#W5=DIhDtGoX:NX>',b9q4*1tF+GaQA@$er9R[VH@]!8Ou!
%e=su=ah6<*LW;>gUMuUM)C7m=$]q!4;/uJN?OY^k$b]r?0aToZKM?ZT_O2n=VPSr.IAe?K]jKHc)eHRT:NmU-^g=TZh4>7^WVHn2
%0]6?tS,/u9VkD-:"j"Tp(7mr?N&W+Tq<7EGr#AD8kB#onU5E>c;("1W7+fLKcmOU4O;#V4Z`t%]VT\.c?sU$qX@==,M+ZeR%+q0I
%k&bt2ePV`WHAa5W_kCUaF=f^EWt_%sQ<PpRH_T11'&'DB?c_R9k3YqdGrZYl=+Y!JT?h=1G)U&c'`,k^2;OdU72U)*q'+(T$:t%H
%/hL/Y8odb2YG%V(os9>NT<c&Y8RbK&j2H[2(Q7W$]+pc&r7M`X@OJn'f_jFejl`a(htU<JmdK$^kS<:]\Bj(4YIAG12h1SaS"KZG
%(WYPpJ,IdMTDe-EmC1ufrU/Q[X1@'Dr9H:[J+;oEro)Vh*T''W]:#Hus3fX;5PsD(IJ_:`hn1uKcQD$Ak.<S0IXh4Yf73S5jopfq
%3;gNUJ+KR`_kqJ-^$#EfDgq<Vn)*das7ZD\n%N/Di?L;Za1't(me?>GH:Nu21O=HhIl15lrd+UhJ%Y`hhnSt3T)@`_2\1DD5Hc_G
%jn^S^q8YGOroX"L]75+tnFk"AY@h6mQq:E;46dH;TOX@.W^/qKFu1V+iiV4hjf_&eOU;GuLU)'(Zb%Am@r3fb,T;IE_'uUi.J5#>
%9]/7u`(Eb^:6RBeQs'F!>cGH6N1_L['N\mh#M>ukq5dp0/HWI3Mrg\;X"otJg:7Cif)[1o)";`Y,gU&<57$&fY0<p,,<CWn\H0h_
%'U[-q9ZKUjj]uItQr[j!Xp]*iXW$D?@i=,7\L@A0T#:@$M#(uk9_#V#Y@WYb_E`'!LQ_=BU<$A_<5Yaa&u&i(n.+!K`L]A[2McB]
%I8J5SZOAC_W$Y-V`o>'AB#;Ur7Mb>dG[JsE65">p^m&$FEbWnc_5OT$"JXc?q]4W$E37dO@!F^_8>VP*q'#F(3g,:*7<DablU@O1
%U"d3fVe\.@%L2s;?-o5%.2ltQ+=Ot1[dP9\YG4YFkGP60Is@jRpun;BkF54K?k]k2Gni"8O>@7p/:i^Hm<h"iIC,U(ID>OHf]4iK
%CCgqeoXNa%B2a@rq_4j;UbIRY:)&PJM'?n(-t6gB7,E*ZB1XG7#U,GZ"%]Rhr=6GTXDURt6fN[YMd]qL"5,P'"'Xn2M?"g67Hn<"
%]i3D\3IE@H&1c'm_'mK%;828A!5bjmMHKl)TlsC^'^[r7MhDSF9cr">`NmV0D$odgS0b2C9>p$F&Km:f=E2GB^'ncShuFEpU%=NW
%nkjXqM@)dD-L%6,Ue.ka79&1K'GdrgS>GQ85n7ScA.ZkEX0h\aRWm0!3&QAq4VVMQ-K9LH^mIl?D4SI\I`ulUH>Gpq?pH;Cei4hj
%#b/jj7u,DW>N1;=o'!]=2oM`2MYrd\]>NYtc6kQa8907o^i*BS_>'$sq.Yhma*9`YYOYC+5WXJMm)L)m:+c@iJt50rh7H6_TrOde
%giTZn)2M^69=b[Tb+)U)jD,P0!W*L6[*ufXKY.b<P,g;?/l7d71uX^@Grs[Q]\uu7>k&k0IejBsJN`nO>L`_XAVo#N2;<2JS2LCc
%(SXAZTd5)"o0$:I`P2!4_g?(;+&;?CGXp4Ao>otn]_tm5M1opmcmnkL]qbd1nXNV:-&O[Y4f/sV*rX4g'd9]qfc=4=![QgiFh==G
%$]$8t7OU#7EaT[jI1;Z$pG!8Oq7bFfFZYt:!7Wu-9TUZ+]c#>("6\\r$cTAL!0Gh7[k<3+n1Pn<<ohA@;#jh5p+G8BFi,A]e8\SB
%>\F:A8uNF=UhqE`2F]I]C;H.9c8I9aX:bFcbuL$OIjDLlT/pk[im$<iBP.rt%i)ND8B8h1K/SWZWAI4W$'I3BdO5I"$W4,.5qq\Y
%U/.&;;mR)H?2[r,8iblnP_Ohh_t?PeHM0,k<p!SgV4*8dM^lHU&`8L-*e"t2WqNETR`g-iEMjaFbm44*)%CeeJ?isTGd`F4OYmrE
%*Itt?^EA/gDad)PLCT[p^3IqGl.i&!Y-$7X6Li`^%6Q6SNTK"j`?@QC6uC4,0_[+?mEng8Us@=/<'Ai=@6YnA&Ps.#e]@khBu_Fb
%kfF:lU[<=`B6mGd:ab3F0HqW3WODV*!c"L[\#;S1#IRiA[!OL"R-]P;K4lIlC7NmV&m/XmZEr^PY>YP'ea'a^48r)_K7rRCA,SF,
%V2tQOMMqD5J%ksE5Q1NBB/b>7nE/J4[pT0%S,^WuPPb%Jp%Z_j%(U_u!Gm_;'aYUWLsE:&Bc%`oNM23'2Z9C07o5<nlf]$S>')(a
%%V(#Ks2GM#9VdP\h&pD_Ae-U37o;Od#Z$5kEshR^4iY#_C>c*\klQfjU:N*NN:YNmU4pXng05TleatCLW)&R#GMiW;_"YajEk*E'
%d'H-We,o2X+jq$!fnSS[;:<6[JPp+t4MZsD"ISAq6#@2j2fQARYode#="m)40LVKLNP;&./F7FJ@;SKD'<a_Hpfg_UL)TtpZSBr(
%JPul1K-F8;hQjt+?9?ANl:MTRR:WS?-?U2[(!+'$F:*Q4>WX&^"$iF2Mk)\"LgX2B!@:\Za_\c'jkAK>Y&!d=i9XXa&Z2PMi8)1d
%@A?'\1:&XPiN6g/XZWdU]6L\W?]kmJ6Ld\2!MBS\/YEM<)]faCV?XYK0&hq$3ZrI^cK#<?$S'[%H*5^:9nf<.8t+MXMPI+@+nLjH
%;5Z]ZBg]pdD<MrUS5ZZ@,`50kScdUn7'Z<R$_,<;]U%)Tlp/C-+XSsKc4Q!,kd]Z@/FsC4CWUj.9$MgC9)8le$)&pAG;KI)-,It1
%8I22K2Kr//]0<4[!RI_Y*\X$;58#5j.McMEM]Im>_E]-dF>4?Ei*7YF3d=q5fd=PpopG#$"O'S2%WMXlKJ`Ys"VLZmZio#>#RRLa
%nmYl;Y7!K2dAQ5)_+=lfF$Xl*<!nDDOA+&n>%NR"Bi7/6*NDkG6-e?NAQH%Q3hSUQ%N<t-)?J05gVD]X;[i.u-+VBIO.I)qd&6Zb
%;\+eQFKJl&q2%$q"j:M:^,Y\Ook0@%(d8QI8LhPd-qUkO>+RG\^n1,L,ulN(ll;)nkmS:XD#/a6]AV<Wb`FhF_Z`ot*3CsDFZAqC
%R$f\QU8X^rM<\e&p_7@'`Q9n>pl+A=<ajk5[33gUejGMh/"C#D%i1ieg;.I+pKXhsd?;ZucBBXk*ZPJ5AM/&k-RPjt7='(0D`Q8d
%"+'ta;qj3-5B=$9eYQ";VJE5YmEf&oF&7:(<u-YV/M&8WCU@UbTl_dY:!$?H#of:e1$iLh=.#q'Z"6!Y^Mq4-/`N$fZA/keX72_,
%H7nL3X9",U)=02;30,44A0\tSk/p6LAl67j<cU>f3JsT^_k7$jk?nI%GiLFJ+X#dH!@[<Oj'b^i!`RX.!lF9V!aqlH6=Ls,]2D'_
%1otlr7CC?HKm=<k'W9.!CD2/!NN%G_7l?DVDC$B//RF&j9f.gnoal/^q:B(7K-CCE+!N)WM;l?\ecQIo(bLFu:cY<<137G^"r]Wn
%/Am2f>,DJdo2sdF;LjPfD!#b>1R5+Z,[>p='+ddFV\VU>6?<@bitEUSm;fEJ3HckC8$RV]Bs(RAh.$ut>jSlP$ELVSbS%h(1jo^%
%$[l02hJ&Nglc<5SLeK[CZ-8e<Lf+di-20ur'`0/sd7T(OJLJth@5"Fc?ZcLac#4hh&<G8rRU":^PVD[P-$,cACK$C&X^;O^JWV1m
%cF'<iZsseP,t1QpA_d_+H>?AJ2`/XcmE3A<=<^7h71Z=Y7bh>5.t.XeQof/C8raI1L8ds<qJC:C!4YkI&dT;kSgSB@bMkA@r"Ob*
%+^)Z[8(.C2SqFdE2%P`0W=cENL>^F\V<M&EnN[N@r//(PD4REK[nEbGG\@E)5s_HS&T)kq#3M#h+Aj4>M&iITH4kNY17%9^NhgEs
%j'ak5.#QV>Lb1MQh"k,Qdu"3M(0X,,Eueir&kgu/0]22XSR^&#i4Q&jQ9Zq^!nc+8VK[P_B6>`8p/''#YT-f?8u.MHd\qsb#+gg`
%)2XbP*[jB-9rE3Wo2f?)7Y/1u]L`c/EX3C!--03G3'Z%U:JpdF9Ugp9]94@u8$boM(rRFnkZ#=2Yj<I+RSK0H3jK@+/4K8\<"=ep
%.i,oMo6+U_Q6l<+RDQh=5ni9#-0nQ_82j(a:Ac*Okbe2Fka\2M$m3u,Nh;\+O:RI,,6T4#CTU<4-A^rSU_E[^P0t6q`)(63H92Bt
%+$kQl(,&8j(gR5LrU;t]Jh&[4+KE9U&YGHP)kq4LF?I4i]OM/j,/a,.dmsrQe=GRj'd$$oRc(JI,98hk[Z.<BVe6j$T)l+PTLRuj
%d9$^`.OorN.7G3b2//*N-oN]C!T_KtITJ?aJjSc`dFadOEF@NHB@B@uoEUS;jq:Se:_MIM1+=@p@>:hg9X)e3dBS5,%HIVfW7Y&Y
%f27sj,#1NoOKtSM5ZrCFc2]aR/&JFj<mO_Rgg-(J1J_;V;M-c%V`\ucgc[0"m+"E)QQNItbZXU4NY6A!Bag&!Ym@uSprs)3i8qo`
%g6aBg0V`2.*EYPkWQ#s*&ucD/Rh0O-*/$<D%%qc36P2G>9OtqJO1rl;7oLZF!+A\m(liE)+3Uj$$PV>%?C%)C&o,6"CC*bO6p-Nu
%$m'0sA-c1<VD;X5.C<Z@]T['J9!QGTZLEcBK[TG^/_WeF6<m2j7W2]pGkSTKT-UaUX'$EhB1]f)61`%a?pC\,gW04/]*+@SLu2a=
%+lI&LPeak/gBIFH["$4r!,-@gA!Rs8+tJ[4eh7+L=E&)bo#=Bh8M+4c<t^j`-q`cHiK[=0^bUj2*MQ<B%-gjhoPc223Kqj!<Qhc$
%ZfjL`%dDj*1Vr1JY,kdQ,\@X!JBOb\,p5Sa6;"cg=f,Bh+llHIPuLS&6PVS]D7C^?>Y8L9(d-.Zj6`3uW=-aL'b%_-qQ?/??b+>1
%pZaIXU33Oa16R]_:Igoc<"Yc4M;<V.I+eYc?c62WRVP,X=P@KClUdc%Kk?L"DKM>D%MH\8p`%C-$J_D%;Sh(OG,YIQ:uL1B5o*(f
%.nPGb8!:#)`V_17ag$lX1[CPg`^Pak,%k4:#tcTQ9CN=?<!&)AOiV<D(nNDO2@?^J(DR3r5mro;A$e4?D1M^&F`#GUXF]MU:hlQW
%MYn3)I26n=ME_Hl3WKJL#JaUS_A")7mDUDsLMIhl-N!`O3LoB.:'RLc#QYJLZ(Jl,B!&Qss&j;<NH*/cm1C`/<ATpe\/JCSKP42I
%@Fn_l8eo?]<AW[;Au;.$.mkgtXjZ0`aDl3/4WK(cZ.:Z#7EZX':1e3eP-/nd+"]V?n?/UB'H%P+ka6Rqb/05YdM-ugU+)4bloIMO
%FLA=^4E<\lo8^t=m$DCR<$_;j[hWT''YD2\-lUTiYXZ1V%e2XCE?*:JVO&!cR/X5J2@9%5Z+-t92qT_t\RD0''bD`I;X<Bfciu'Y
%"qek+95;T2`:Q(uBUDGJ(Q^W55UW9Z%]d;/>1`pc[C)4s0Z+?m>&a(gW?sDIWaQo:B/rr,feQ2*WJ?2K4LL[6bRRg?,4VNX,YN/_
%U'F$[9^KW],%FJ!C4e#4/ss51h!>WP`]+]*'W8m:5_l]nUZkGn!!(0sEtgc6[7AXsQR1<9g8Q7?VGCC^-7M)Z>JJ9d`0KPa;cB]`
%[K6?p]1%(G4otD=dM3NLq.udkB7Uk>@bldB'p]UjY0ZK-\dns#fb/nEb0[)4@8ZMH$*$4in0XGm3SuqDZK.nhdKc`in1+PG,&B]L
%O`i*C6o8BgYu]E*%<^6u,^c1QP*\WO>;\DeTM<i[+q6t%+pJWd':lTc+7$jSMMsm/%2PFu7i%=nA"_&X;WpPZ$ncX*NZ%6IeRC#n
%P=?-ijIl60.ic7]n?S-In3O""/6t"-`X3-=mcERW.P=k@@*!47,KP%EB<f+mE&I%7F\l'),)P;a:FLR0F\99")7.jL[T4]s3fYBS
%[K5;3[qI=&\LKnm>I<9"5S9`aQ`V[BoIs(L.NU[)O0Vd#PVamVRAm$R`O[B3L\eNV8trP:d2e?$Y8Utb6kqUH&rKEi\?`Zk97r9`
%n1<Es%?Fg+#`dbV2d!A]CZEN@'mq_W;U#*#U7#L/AQ.6MW7WS!2%V;S8-ii[-^@OqA1'Pk3r'N[Jub00Q5Gs(UNU=*g$/.HB]hcP
%!(%`,0Kq@mO1=8G*-6C9GOqmIR19DeeEX&#LnT\<eA4LWZ?Eq&9_7O^@TGO8':$^=X9.q>9,+rhA]BMm[.?+n&0'1A+Sfc:p!n1[
%+pDHg:.AcnU2VSCl;WFJ_Ya[C:^D`1c8o#=$WnB9Kd.G6b^.)pmLpPfUb"*\9kBV'[i%:/@TTlr:G<1?2$sX!\OTiqJ=YoXn%G1C
%hf.;;J^RCfm"l179Y!17!c62qGGYqG9BAP:;a4C4X_*58*HO$XYbdSG@#$f[HXPcMG-K"cO:Ru=KYET%c*%3h-_i85bo;NuA"L9)
%BJq^/W,'\qAYpUrkWYlr=F#T*BT@h>Om*gGHg$PYa`^g%nqQ%4C4mE>e;p^)n`ldjMYY4HGHNl&0us#G?/S89KYl'F9Q2NuXUaou
%]Vo/\M0=c)+:dk0njXee/!,YSat^IY'b!=W!"^-WRoh8S$=[.Dl?-od6lU6j,uqDb;%4nbQXm\?A+1J<=e`iTlq36F*><9A]?lnG
%Ftcq=2F?P<K_1(&J#q?Ck7`4:%P&1b@8@AYWL;rrV)V0$Z+,Y.K)G,UR1s:T=3>FU%p9QF;0^>ODV;HSlW0>T7CV5c9aRqYb4$4p
%qlEP;MEKfq(;"0N*?$[1c0BJO)cPSW\PNj>/R]KC6.d4*P0!7L)QF(\c-GK9W\t+`3.CSN$#t]:kt7o.s2/_q0]le;%$Q5sPZ]\I
%@Ko=b<$5gC'*9CK#<k[VR`5/<B:1TWP5mD&XS9W]ORk/pD*kOSE4%4V[$BR<66pD/,Rp"FPR)(.p<uppl`BB,9:V)1E!h;O!L'P0
%ed%,-+AZSI@B^K+TH/f,esuW#9Nd@]?$9gpc!!/cCJ0_EY;2ctk#p4H&qtrHG13$7!R5R*7AVW[04tZS0V5!i>-ao_eOC*Mq>>27
%?!,>*Tp\U>8GW]k1eU-s\=Zkci16JIaK&WJqK?&Y?M)7A!GD-r\)s;6m-1K+U]%?mUj9(fP22JU1d+;"9bb.%9jQ!")<\&e?M9SY
%[_XerQ*'O$'u*&M+tFe_<d[Bf;aUh65a32R;XqD4K&/,.!7;]tW_?1%Les<IQ6YrO5$#IC_^P)VIMf8s*baXPXnP8"U8o%r6&&e@
%'VPNhjOAIm0oNVDSBm.?<HFJe";M-":>QVaH6H!t;o"6Yc$1]`b(O@<?46lB3:Q>M(JYa<Lnl=a<ri\`&>'6B92rM)6`e8Um!*0'
%)lStRB^DD-Z5K'%ZU=@75?ElS@;9IY[t/bJfak2VWegS8,!1;Tk@nl9O:!WL;?Br6'K=69Tp.;!5$N.XK!e6USh<UZ<EYj#3&m25
%6kknG=)?-ZCZjQW.F)_hI)p]sQMhN:gul(/o]`4R)99>QF:S*2FoJaU-UYp@[=i^%OpV)/aj-k4mV3RO[<N?RlafHdnkP+;$0d79
%9pW&I'ViuN?IiJ,To:'V0&XdF8a+::`=$]c^djknd/c:Ma\h;e7Q$E)@<'T$P9XZX(1NZ#/iK2JEno@Q.qf6@Uo%t_M<6$DBRHE^
%$ZerG24l.VbT[N(-Q+52FSJ[aKp$0"K/B.dNPt<il@DdP9I[6"F"B!f:^:86a,<YQaB0rUN=B=^"pH\3U0qdeFg\>r;2pdV].<4)
%W\S(?M:X'.RCfpe:'AF(!`Y"76msRlS_uJ*=p"@rrfeiHc5ST/;1iHSfea*TG^&<5d?T?=cPW8AT=fugOVJPbrY70)=jr-]BDS!/
%h*P:sEEj-M,1KpL4*3NAZ1P*2'T=>,$ZJ>\XWeY3/7fj726!FNZnm[>Y]R4*8f&Mm>cq:1?-)EoED+jcP\99k`?jU(aaun#84aku
%<uD0-d=*RrF.oI&GdBC^'qS;!Pf3W[gN>@V,MV1hSSP%n@[b6g@NRWSW7)R9^###Qlq156SBnTGTo*l@`(IIROicda_9HWY)Ftk?
%4&XL>Y4fX4EE4W;6bMq/$^9Rp6C+r(/m)(#1Oo`P!uCOfDF>c5-:?mWo!X'o_6+&CPP-1(ku`i(SYIk[Wdr]aqQ"?*$8\Vi<jm"/
%$`.d`[blK>9*\d)N5!.gGOj\'_Y_mK(3`g>4&#4Me]&d'*hN:nRNdoE7p!W3BDDq@UnB6I'.XD$S;AjSjW"?EWf_'i7+3H"!e<J[
%i8Dt695SEc1YPqLj3@3[c'A`pBI=pIS"W+Z6/)QGHma^Z@0J/H3qK='RR>js?)!ZA3K$p`2e./o($D[*[f\HKDk?RsCEI\KDol'_
%j--h+06+AgC,VMPFVPEF40_ocA,,t&Rp2CC[(V`<omk=cA"iOkBe>6[JUmn;59dL3MKra3>H4YqiSet5T5kJp>2[l=VP.cW/?rB*
%DJS&D7EMks)&kN'rBtlWhC]S%hfcD.@cp1<)S8*n(tb91@<,\2e(SF;W-3*E_eqLa+k:-),TVN*`..X=@B8&J3YTo1;1@=9n=93M
%n/`Ns.H$+*0h+[5X^IepVgVn<R+;!>BLZ#E^i,*o(O7"#9Rn=)g5MO/Cc!0E:"1HJ^B-A@!\Ced`CAmehV@`%$"04jp"$npAoff@
%IO7?^YkHBU(s<UZ=/;6VTo[T'W1=2AEB+DDO*gVKdT[N@C)OnR$o%"LP?G_#Vn*O`o&eU9=.[Yl:S.Hb$8C%rc%+\Y)=[$G?@<T\
%^36)3$h(?DT(U5Ia:KoYL'a[^+pM59=%"8K`#JK4eT*]M+0o6%ltq`igXaQnf"P*0BgL%5:U:TL[_b"]Carr<H>I%[&S:ot<U-Z#
%#rgU?]3>gs5I7iU_]&Ps-L%c/\]:%2dZ4onmht_C$-F$cK+P_^n=0d,L:1jH2PRmt)?"Yh^/=Z<*C.rTA,o"!'J;.>8OA4i?us=K
%iD^[h7\LRJ`4a9[dXgG7MGA:F#gk.IZbLpndmj8:hYF#&E:\Mh47@B@k5-0*H/O.9S+(\:Has[-B]>Pr71K`;hK,,_qgFCD,b!eS
%fB3'Q/rk:fI!sK(;M"Fq\BskmQ%XA#&((`;i!G*nhnf1]+AR$$SgBjNn,q<mRqJ2tEBJPD^Xn(>EC+jp:hbT/ZQ7Q-^#?^b+mN4@
%YK3*&=egtKATbPf#o[4Kpl3VNFL>n=mb*a"(?`DKb2++6H]SLepH%7pM1jgkK$/_%$(scHHTNcH8cYc4RgPg67%T2qHS<kl\@&o;
%,=e.Bar!VA$mmm6'4>L4^h.cYp?(@WNQp:YhCM3e0d>DG;`7T(:j&.XcPC;B]-HdICp^mPZWUV(=$)smT@mG`oTX^Vk8p8k\VIlE
%4hb`qIO++38)fP7+/Whh><=#ls1<>gJu+]Ocib$n_\>9@OWeTN<%$1ih'+jMT)tSk.Kf4)cn$\C3`;ag;65ZE2Zi-%IE)YaY@rDK
%8Wk4UGi9i7!A3eh:U_O.A6_>R#km/==aI?+EX@i@S_fpq\D_&sM2qkQhk/=1,d@MU*5it`H>lp%W2MK33Wp$_QkRG;V]uMA`FceX
%!D*kC?7=GNGrH,&"33U30PHRo[#*mup=k8YL'F48E[Lj>5d3@(TsQNk]-Udal"3mCX&g\-;SUn6i@Bss65a-19J/b$Xum#mNt"7u
%Pm#VT3IFdJTQMAt>rH9]q*g"q)Ebbt\V0!&/.mHUN")\M!9IR&N&\pUD@+"tq]I2F$iqgZ:/=6Yh<I$r0810LAC=7,T$S-pZi.Pg
%*PP73fb:l((9$)h-('KtOlY0(.-TSlK;,b%(fFLe6"0_o,%3fli!6?\X`\f]H/Z.U9.6A37^;2Y2>-Y`Ikj=?KOR+d&>nspQLD+p
%T(<gjJIupQZg%uO'OYI):rmHtncG+d/gaKZ'`o2%!KI9iO;.>YeV5s%lXCY$*j-17*f:q6(jli;RL;qOV!?.?T$)r`<Ce+QaZ$E3
%QoCYl>AqcU:N3HHHXD2Kfj+JHXIMFlroHb+V5T?=G",?1;AL+^+>"`L[=!9G\^`<i_>rM'*d)a+(<pDjZ6&aXq?.?)L8:%^Zq%R7
%UMAr8(lt]i5`,<:?mpCkp60BA#7jlW^@RrjHTL]rMGDqhk_UDR^6>o'6!4bDQk#0DPiK/#]);-Za*[EUT2&J%kMe?`g?HP-%eTPS
%d1rip2.pIU\a=3k[IH[%4ZJ=^QouU#'c(4OK.7ci0q4;4O2_9R<5=>8Wh^Nb!1"LP3K,+39T*&[2ngHjCu=U?H[f?TrAnT?p-g(s
%?M+$J(HoG!&:QX.?@"FcFIcLQ,'ih)l)#,kOC^XNpZ3=GbfOknSf^QFDQK?56&;&!6[YY;1]\QT[[?_uLM]ZYA[)`pitZY*_jm`n
%:Og`<2W-&?W:-I<VCU'I.pEs/)k;oUh;19LRh,TN*"^XX.kTk#/?D$F<F&#75.2In;stbfgb4_uh6UVk]LV-I.uc$4\f:mF4LeeJ
%Z6QZ$[:/$01[9N>WD$;P+m@bh@4&:1!?J4C+88^d'^]CI)Xe2U,V4Y&8G[LQn+LAQ_jl6Yk50O3=o^^korXlE*N]G!O%^^A`/O93
%G)+p[flqcNBY2><hedK?IV,e^>,U;B55Y-1cT^]Dp@2_#oclI%rrRc8T<==pc`WhRLbf&JgTs!PS^3/nTR<8(k69SF8kGV-aK,+h
%@51#65XhGZr_-G(A>BqZ+b[6c6W=]g,U<_H.2V`[N0^*ZU<"\,h?YBP5]o('(75DObP@8c.Kf+lrQ^a&g]$i3)J9bQB92UpeCcFT
%2onfBSH<2%]jJrZfUoh4HsU(b/9rk;GJ&/EXAG.Kj*Nmr"g"6'P6I0kjM>)(5TCu4$H.*E7a:NW)(ck<\+b6Ye0@OpOV"A/lQmor
%O0t(?FM\,)r>irkKG5!6-I/5oSQdY,m:6mKE\'*u8@ekd!_@T"$^-/G<bRlpf"O9N"UL]DH==pOG[9K&9NdCl$A%G?P'SBG@]s2'
%Nd"N*cBe\QCsmUO:TEJn6pGEE8e6A/H3$q5k7VfAh<b[)C%gCF@f4qZV2[<)'?-_[)cJ6]**-SPl4W;]H+'P02CegZ;4%h=K<pLt
%`c3mbB,#^Q/4<!c(tXSCJn,F]UBG-3&O;!U40@'m+K?]&@Dkc4hHJ]c`<VA"-7h>=:nte0Z67nZ^4EW7/((]\AhRRZhde$.SUhtb
%^_8sI_JEX+B+I0.d_^%m6@6*2LW*glFs<G.Sj4bUZqWt/KtK5M-]M"^g>/7*3r<auQki,%i^+5>6GH^^SlAs5_R)iK4hJ?fh-<,G
%=h*kBn.j,J9fGIQ)UaFloPB,Z6RE=<@4_c[R@aij@aggq7&r[H6m*.=1^pI9iRh:53oHW'WCBVuJP\G$mjPLIr'e'XdIRPr1Dp`0
%LlT2A/44H:AH=A@V)Ajq1iekuPA_I997ZiFCTHsL3D,8:d;4NE*[i^W&\<\I'X>K!@RNd;5*r'I`%M<@TrW5Q9+e`[JD7VtOb#6D
%Dg#P'B"CX0^9^IhbX*`di#$5W9ahuFU2K,3o)`MR"(A*,JCC;96k^6*l3QX5]/faf=7pH]%C<nY[&(2+W<ALKQk9'5UVnL^c.ng_
%mk</`Gtm$gmE=h_em]K;CfCQ@2YimHBo\KYQB?S^KCRuA8@E*^c^=A5_ZIWb[Fm/[(X'_QauJ*`F>4fJF1+<DXV$:/!9_n,7L7$+
%C`C"&25Z,m"L]\(30(K8)m0n,kP=hT[=:F9f,o1NrqPK`qseOU+4cYSEb9Z?;[X#:GC\X&Rbj%,S<FRfRtT@4itMT['lk\V8[1'u
%1OD3)]NGYeB)3<AN<,%[/7i@mWMC4/hZAm+@">+l-\:S!:2Ya)ZSOWTeJ-5R":u>%!rsOd^IK1ISE*5ln65I^PO-C;eJEpokd4)-
%F9\Ff%O*KQ0^#FM2\<ikP`A"[60pWD;ji:lAA5j6fT,Mm>e[E;&9mLbYIlDF@r88%Ac[@r>nhK<`jX$,!CdS4#m&.d6XhPI\tQ(H
%#2Yp\&Ik]Eq*fg6!YNW'UomKQMqXu(R54DmK4sY,?u$<+6U>^#p[bk#0QLQC_IBn0\cntA@oq?%SaQb<0p[3W?e'l+#fec*,>T->
%apeXe+qP"B#RK@E<jXaA5mfE)U]f57A[I?176nGRQeQ,Gl\GPMc(?>F:)&tbg.u3+ee:knB4D1BEmR+Z$!Z/5)s#'RgtMUG8/fNN
%6Vm!T\)06?oFM/4/>M-VrJH#e']fYDk04>>=#:IN6Im:lc1CpXIDmf4(Z/cL7FSfSgFa]hB"MCii"gj!SHL])_1Mn6&m59DVut=G
%(;4;bgqE;Y8:p0gr/A,6%7)\f`RNS7XD3?U"LZ1Ed#ad,h\O&7+G'hb3W!YG6uD6UN@FR*""j]&3hBru-,g.VDRNG5IXgej[mTFA
%qe^<.E).,)%ICPl'J\/V^Us[$k(M>QCp]ts8NdY7Xr</b]qbiN5[Unlq:f)O_XN4VQJ[uXoGKoXg9+CWgL+cd"cUPIhPH`m,NP3K
%-5'>]%YthIp=ng0N"BQ?G:G'hkTI*XS_eq@9M,gDaaAZ2/7_1;TY7#N?gltI9)Gb';:B!H)7:k'(//S(nNi%+"\%e)dLVHADe,S)
%M7CG7]'ciIOD@e524"L!)X2?5>fee<Lo]L5JW!X'EG-Eo$UPuHBsh^Y;!W'^02N)lXET<[DWE`dUmESbnqYI9"6+5iI`RE,l2p=\
%E'P7Y%*l)e'@mj5+rJ/0K#/7qiK:Q]'_qek>)7r(F&ZL^@/gHLJMB"YTs(=SJ-qg:rRQSJ#VbK6&=c8uGfP.,Q0su95<^M"&.:ZO
%>#(GbHZkQX=iiMC2[%n[N(OoOr45I*5GVFp21$O!PRtpr?+/@aLofY3EmdSt`$S&4kjg(A`e.Tp`I.A&b])4hAZ$hrZ.;+^*U4^%
%TeG2m4!)Kg-fLoAS+6=GaSTuO[Z?a;X;lNSOd$!W@fbkT3V(XTL-P-oYXLF"5%0qR0qE?f/`rYGI]dK4"8>jEre_r'f$)iU1YWNp
%.@;/)4=M0To%Mmkk!d:Wk8QGiRr7-\pt&oS]io7>9%"3W;?D"FPshA^S9cs3aTe-p*M:HNYfUDnVF;$2%gIFt[4\Zi$2(h`TF^bC
%9>>_lHeu9cVG0#Kpl<sTl.t)$kp3>($;GUo-'o$6YOn9,&m0pU-Eu@;9:r>(2XgL8?$ZG:8,`!6!jWIeg$5!CUH7XBftbp]:VM!-
%I@EfW0WD6&/^@SCff;FIN$m!SUg&a']HF&m#$M,G<sV_[cLmYQ8J?Z=gctC.K?+8U2bXdG.L*fPFku@e"5dUS^!B?XbD%Vi#tdi@
%5F^MKE*;Cca90W(F,]_Eg8].F"ftY68St0uBU8Ja-ea5_*IMN8.UdpMLLdqXN>+ZlK5riS9p,%EL_--NaY7QFN^2rgIY(@>1r=Dd
%%/*:*Fp]!;$QJO+fP1g8Lj:fdBeL-hgF5_)>:-RQ:9[rEYcU[qm8\kFh7).`IAJ1hDR?n*=2r(0!AsRJiSKp%2'4p!+ZgtqHV/E^
%qefF+^@HQ8<Q*7V*Kr>t)AIk5&X$CEMAEpn%e=F*!n0PQ-8^EF%@P5M(%cn6n!oCc:d8?"]<Rr@SJ_&aUMmk?^h*g^%0k=NX^e(i
%,A\]A1T]q"6^<*u;Is`l"e&)VKeeoFb<-fW,hX%C&qXWQPp0iDpB:gRX"F)&!SQ>F-f&UP=(A7b1tChO'OkR6pM\c8,ba$K#q`5R
%89:2PW5,8::_rmRZ7:9Q'm="&V'fG9G8<%nG]spZgU[Z.7[!qQT=Lb\Bt+Z>?X">Wjp>Wq9El,L4+e4>TI8SKa2>sh`EkQXEP7Yh
%gGCeWPgL)a';q@R@C1+jai=7qd5BaAb!\F+acn&lfqZ'8,(o0)/@$tU5<7-Y3#Fsh&bOe:@&oG$&5`OlfRfWgcL;'0d(KIHQ:0P)
%;IpMaRDYsKRfls0c0ttAQq4!rIM-sPJr7#'<Vof"eP4iQ)6G#VX?kH=*5Kqa.83L]8e;/F`;3kX&F;44nOIZV@*LM',u>KF?(G.5
%VKmjtk9drA2LWAaPA$Z(`3BB/Yt1Asr?EFA%Tr]0Sh+9%1>C*)9u/%A1-;h3dD.(@C23**/Y!5H033i0F9S6o$1:'e_lqe)l.Rtb
%(k4:SUUt>Y"gsg+,V".i68XUs8_\bRar$IZT&dJu\p##k22Fp5WN%jFabJ*+G.KS*;V!Z8m+N4IXQFV4GI(Du-t3T:$joL7NYm\h
%a=)"k6oB'X;D?+ijNDRTacck0P,059oB7`Nj^V0D?q?It/Vb>/-them9SZ1OqApt@Q'n44r!lue27,'do/-Zgq=Qir.KX&#G]4"O
%Fd_(9-tfi7Uq*4U&C'$$5XjB>V7*p-]iMEPT*jLrJe>1c:u9GQ/!VT&`(1M+TLV<\0l1"^Ym3'KJV>]\C7JF/9F<uG0[2N-GJ^2#
%1L-BG]f2^_[8+gV/_sTkUpIA=OW:;$qg06B[F#?IW\Dp!``2-1HHg:.)1b6V@(593T:7&a66d/+:A-5)G2>]F\\i+aa1doJ1HG\;
%Vb-VZ<;?aDmPu6(?jp,]C06P5@',?nG&FIB(oC^Y<;)Fj<B=q<Q$l%F\,h-4;TdObBNe6UC/@I*r7tVC%eOTh]1_C9Td!mKd&Qb=
%Oe"6"0O#0VkhDokM%u[6a=`=_"D0o6'%PDW6?AaKB'<!X`*sUO!Z'gSC!u\(b5D=/p,)SVYUnbu88i+7nLocp[5N$DI9A<VbrC(^
%EpKTG-Im-k%rpFI1+la@"dT9i15\QRCK:+e24MJR>"EXFX[.Ha:Cc99#J$X\dSu1$;k`e#-dCN-O.JG9Z[CJLP=Dcs?1W]pSX]F5
%mp17Q.(n/jDnJE@kc#+IY>cp4R0Q"Z(19eAFGnu_e#`Z%K@BtUD+P6KZK?TKJkh/-n0HFDmb[VB%>N4)'VM!3*pg[=@Vr_C7l!/Q
%)kr\`J"0F92WAV-3)""mlk4S;iV(1XY'gb_-6:L<PgH^6DY-+mOpl<ISMr[]%">'l^Jcr`M9apcpZmknS\#tNc/>X:S"Vs"k)Gh(
%EV^&M!`Cej&?]gbGEc770oerX+$l^D"q\N$i=_g-_2('=8=UU$-DW3NiZ5ik@<W-!^MaFL<a_Wkd>XHRAQ3)mn%@[pbC6ngs%8dS
%@sn=8"3o_iD>W[:47jUDE\JFU>@ng@Fj5kb%aiFm."r\d3C:^cIjK7]ej3dOC](/S[^h?>cr&_P71Yi4Z9&)1c_:"i,k+9H'/d/]
%6(tXVo+q+LluBL%c;eJ[&uq.im'oHt7]_V<^*_eK7`,'ijA:-F[o!eLi;Q""JNMl!*RXiu(+FiV*0*=jeOq]>1GC1VnR]r$A'A9&
%VV$:Z_q"4/f3.n'7,X&u9]3qqYq6C)MIAt6b;J%X=?6i_"=]7Jn=2Dm+4;W"HTIS6p^hj(*:jlI9Z:pomqFbs(XM7aJJ4(*oa*M`
%JqcX>k%NX#p=\gI*M,D_LY#kE\050=nXUndrnnaT_oP]3GKp1DhAMY%X#b`![kE=lQ8INn+I3T'p/+HM]0K>al,rD\T$9#Smb[V(
%\:)c"fJhJnH52#FV5unubP*'g4sabFBE\Iup^i6*1LZt<;/o*eMC&,-"YJc&c@#6j%'Y*hO<j<Wgk.bH;Z`7ck/P]LA9/Et#s88h
%Hk6b9a6Q/6:qJ/c\s.-'<FW*Q,'C])9.CsZ1t&oPd]lkqa6M<;>0&uHoep>l%D^F`?(Z[5/(GR*YOQ"J(b)"O&k$L#]WMuTfYgj0
%%i?A&L46i?ii,#'Z(-AP-L-eeW7O%S5KZA9E%MEafXtJqQ']K$OcknNEG.MW9ML0clTmmB=g(Km!8/=*$@31aAd6Cme0abnNW$d!
%CqFS'a:Br[)`t7p@+)A?k;r`QXisR1eOaj'Ss>:pC\t.O08[Ed`hT(q3^[7AjLeGSo!^bqH)>>N1&H-27H1!+"-XOj*A<I[6LTMt
%**G[[iFtjYDAP8#f;GNIZ9%LNBs#[ccFr-%%#g1up2qEMHN*3<"_6c)WV^p7gXIijd?,>jB2]lnhpbgXW$uYr@nb0SW,_3@hsna%
%Wk=dk&fCGN:"<*Cn6j[6[9-9cUSp>PB"`_:,n=2\W\ujn6spjQ'ModuGUZ8Q>EAnTrg^SAH#[4]@D,.)s/e\*2nHNK"n]NS4X+>E
%_[>u$haA6SE(>/jJ#LSGg\Ck$)A^ERgOaa4,Yb^[$Z(,QU7bQgQcBlI?3R?b,>ap<B)'Y65O^-G5Wdt"2'u7T&I@a,?!iJO.XW+M
%O;eYA1PJ^fNj7tVS5/o6oCRmcdjlI2mlSk?gH7P-GsK63)Nmoi5uSjsbcM;TSJI=LAekCT3UDd?Z%9,?J\^N(_E83]bB\N,mbIHN
%UusDH7g3=>;HdIn60+S;#A?+qgKUM]%D&d\DHZ@WC(T#/\a%R:M$mE(8I&^9<C)uf:28'D-j-`G7KC#KZka;>E,\=34YVT+PcrtM
%0aE+5HS?T70Q$T%o!0e2#t)5U)4G9=Cu4?kV!%2q2#F+/qoIX]OKDAq!4E0XNQ^.'GkUPf]__&dQB/\88uPk&'9s;=/>YX&pWgSP
%=:b:M\B+CtYgnjXQ6RL%<t$Yp((Y)BOuBJ4Q&3'aMFcJrA\e,shZ,aLFfU%r/-R_n#P2>TCP@\nVn')qLs:.\*d>4>P'[S??:8FM
%@^u:9Zd=F.ZG7@_"0"oD&L7*+hQS_Tf,aV?pfiaO._)\U846ia8=+])p*fN]XP-J&=S01Z.'bW`76jX*qc1*<=WgH)$jX+Z2K0J*
%lQpHURM/\5.2F"!lnh#U1SGkPj$aF=SY^S%Z8NHPksY=!3&KZ:L*d`"=fOT"L+&]sGpgXZ[p,99O06q@nYglY]O>VeoV6&V4;Fl'
%.NOlV4NFU&Ap>RPNWs\Bq@j:rV9Lbi$2#u6M(<Z6LW\c]nXq@@>RVOhFh&F3F^l_C1mV'mWf47@Cq#&HN5,2!gp)Sd0^aMFIEsl>
%Flq?k'SeK+d#1+%eZ[3qYtOKJ@Z;j5e(?e/R8g',f5URmEJV)tMG6'?h_?\WB4!m=Oh[lt?Xru0GAC%!GI2RCX@Ca<i,Sboe45ae
%PbO3jajMX=\ml[V->'bT_)R5Q:k)Hk`k;JURt.B[b"GQ="G:b9j-8)3N@@9+qn76!\r()%mL9S&e@DRN$MK`,Q`ig\5`*?#?_et"
%$>ndmHe!1+,V)F31R)-E.3ps,MAU][11FBt<a+`_f65Ia^dPOgZ14'sSfYh>;1.I5M7W$[,mps6^)C!N+Ud$8DhA:X!"g<:o2&;5
%-j#)?4O+12afRt`EE2A#.k..mPH].1;?5d<M-<'\Ti,g-YameaH]0G5W1mdJT#qc@_oqo%=QH%+K+ODm.<C=k`eT9^2Kj#G$&''K
%FQNsAApsWFDF!%7n)!a:h>CropSWK53+tV8KM_mdH8fMJ8b#nYn&M'6G$m))T4Il8nUeRr#ljV$ms8iks#cLrXhRdBflbIKn%Toq
%J,#r>lX,&:S,5/Eq=_GTgEH@HIspq#\,Z?;2r>V4IeT&@q;%\"r5[Q]2rB(B=*XV_nY_l6IJ<G2huDZI[l8g5r?)"I#qfC6ptNR^
%`W,^O5P^fK&'[9SFo~>
%AI9_PrivateDataEnd
